// cristmas script
// pm

#include "_ltp.fos"
#include "_macros.fos"

#define PID_SNOW_BALL        ( 1429 )
#define PID_XMAS_TREASURE    ( 1448 )

import void InjureCritter( Critter& cr, uint dmg, uint dmgType, uint8 dir, uint attackerId )  from "combat";

void _InitSnowBallBag( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_SKILL, "e_SnowBallBagSkill" );
}

bool e_SnowBallBagSkill( Item& item, Critter& cr, int skill )
{
    if( skill == SKILL_PICK_ON_GROUND )
    {
        if( ( cr.ItemsWeight() + GetProtoItem( PID_SNOW_BALL ).Weight ) > uint( cr.Stat[ ST_CARRY_WEIGHT ] ) )
        {
            cr.Say( SAY_NETMSG, "Вы не можете взять больше вещей." );
            return true;
        }
        int time = 11 - ( cr.Stat[ ST_AGILITY ] ); // * 1.6);
        if( !ltp_snow_inited ) ltp_snow_init();
		
        StartProcess( cr, LTP_SNOW, 0, 0, 0, time * 1000 );
        return true;
    }
    return false;
}

bool s_SnowBallBag( Critter& cr, Scenery& scen, int skill, Item@ item )
{
    if( skill == SKILL_PICK_ON_GROUND )
    {
        if( ( cr.ItemsWeight() + GetProtoItem( PID_SNOW_BALL ).Weight ) > uint( cr.Stat[ ST_CARRY_WEIGHT ] ) )
        {
            cr.Say( SAY_NETMSG, "Вы не можете взять больше вещей." );
            return true;
        }
        int time = 17 - ( cr.Stat[ ST_AGILITY ] * 1.6 );
        if( !ltp_snow_inited ) ltp_snow_init();
		
        StartProcess( cr, LTP_SNOW, 0, 0, 0, time * 1000 );
        cr.Say( SAY_NETMSG, "Вы лепите снежок" );
        return true;
    }
    return false;
}

bool ltp_snow_inited = false;

void ltp_snow_init()
{
    LTPREG( LTP_SNOW, process_snow )
    ltp_snow_inited = true;
}

uint process_snow( Critter@ cr, int& param0, int& param1, int& param2 )
{
    LTPROCESSD( LTP_SNOW )

    Item @ snowBall = cr.GetItem( PID_SNOW_BALL, -1 );
    if( @snowBall != null )
    {
        snowBall.SetCount( snowBall.GetCount() + 1 );
        return 0;
    }
    else
    {
        @snowBall = cr.AddItem( PID_SNOW_BALL, 1 );
        // ProtoItem @ protoSnow = ;
        /*
           if(@snowBall != null && cr.GetSlotProto(SLOT_HAND1, 0) == null)
           {
           cr.MoveItem(snowBall.Id, 1, SLOT_HAND1);
           }*/
    }
    return 0;
}

void _InitSnowBall( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_ATTACK, "e_SnowBallAttack" );
}

bool e_SnowBallAttack( Item& item, Critter& cr, Critter& target )
{
    // target.StatBase[ST_CURRENT_HP] -= 1;
    InjureCritter( target, 1, 1, target.Dir, cr.Id );
    bool roll = ( ( cr.Stat[ ST_STRENGTH ] * 10 ) + ( cr.Skill[ SK_THROWING ] / 5 ) > ( target.Stat[ ST_AGILITY ] * 6 ) + ( target.Stat[ ST_ENDURANCE ] * 6 ) + ( target.Stat[ ST_LUCK ] * 6 ) + Random( 0, 70 ) );
    if( roll )
    {
        target.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( Random( 0, 1 ) == 0 ? true : false ), Random( 4, 20 ), target.HexX, target.HexY );
        target.Action( ACTION_KNOCKOUT, 0, null );
    }
    cr.Action( ACTION_USE_WEAPON, 0, null );
    if( item.GetCount() > 1 )
    {
        item.SetCount( item.GetCount() - 1 );
        item.Update();
    }
    else
    {
        DeleteItem( item );
    }
    return true;
}

bool s_TreeTreasure( Critter& cr, Scenery& scen, int skill, Item@ item )
{
    GameVar @ qTree = GetLocalVar( LVAR_cristmas_tree, cr.Id );
    if( @item == null || @qTree == null || item.GetProtoId() != PID_XMAS_TREASURE )
        return false;

    uint8 qCount = qTree.GetValue();

    if( qCount == 0 )
    {
        cr.Say( SAY_NETMSG, "Вы украсили елку." );
    }
    else
    {
        string msg;
        for( uint8 i = 2; i < qCount; i++ )
        {
            msg += " и снова";
        }
        cr.Say( SAY_NETMSG, "Вы уже вешали игрушку, темнимение ничего не мешает сделать это снова" + msg );
    }

    qTree = qCount + 1;
    if( item.GetCount() > 1 )
    {
        item.SetCount( item.GetCount() - 1 );
        item.Update();
    }
    else
    {
        DeleteItem( item );
    }

    return true;
}

void _InitTreeMap( Map& map, bool firstTime )
{
    map.SetEvent( MAP_EVENT_IN_CRITTER, "e_CritterIn" );
    map.SetEvent( MAP_EVENT_IN_CRITTER, "e_CritterOut" );
}

void e_CritterIn( Map& map, Critter& cr )
{
    cr.SetEvent( CRITTER_EVENT_ATTACK, "e_CritterAttack" );
}

void e_CritterOut( Map& map, Critter& cr )
{
    cr.SetEvent( CRITTER_EVENT_ATTACK, "" );
}

bool e_CritterAttack( Critter& cr, Critter& target )
{
    return true;
}

// dialog func

// void r_TreeSet(Critter& master, Critter& slave)

bool d_TreeCheck( Critter& master, Critter& slave )               // хер знает зачем написал о_О
{
    GameVar@ qTree = GetLocalVar( LVAR_cristmas_tree, master.Id );
    return ( @qTree !is null && qTree.GetValue() == 0 );
}
