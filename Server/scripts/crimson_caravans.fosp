

bool LocIsModoc(uint locPid)
{
	return(locPid<=(1253));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(32)||locPid==(1216)||locPid==(43)||locPid==96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(42));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

shared interface Project
{
	string@get_Name();
	void Build();
	void SetAssociation(string@ex,string@className,string@classModule);
}

shared interface FileObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	void FormatStringData(string&nameData,string&data);
	FileObject@get_Pattern(string&name)const;
	FileObject@get_Copy(string&name); 
	
	void set_GlobalData(string@name,string@value);          
	
	string@get_GlobalData(string@name);            
	
}

shared class TimeLog
{
	uint tick;
	
	TimeLog()
	{
		refresh();
	}
	
	void refresh()
	{
		tick=GetTick();
	}
	
	bool check(uint count)
	{
		return(GetTick()-tick>=count);
	}
	
	uint get()
	{
		uint old=tick;
		refresh();
		return(tick-old);
	}
	
	void Log(string&in message)
	{
		::ClearLog(message+" ["+(GetTick()-tick)+"ms]");
	}
}

shared interface AnyDataObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	uint[]@get_SaveData();
	void InitData(uint[]&data);
}

shared interface ManagerObject
{
	FileObject@get_ProtoObject(string@name);
	void ParseProtoTypes(const string&ex,const FileObject&pattern,const string@search);
	FileObject@ParseProtoTypeFile(string&name,const string&ex,const FileObject&pattern,const string@search);
	FileObject@AddPrototype(FileObject@proto);
	FileObject@StringToFileObject(string&name,string&txt,const FileObject&pattern);
}

shared interface ValueAPI{}
shared class SettingsAPI
{
	string Name;
	bool IsDebug;
} 

shared class GlobalData
{
	uint Hash;
	string Value;
	
	GlobalData(string@name)
	{
		Hash=GetStrHash(name);
		Value="";
	} 
	
	void SaveData(uint[]&outArray,uint&position)
	{
		uint len=Value.length();
		
		outArray.resize(position+2+len/2);
		
		outArray[position++]=Hash;
		outArray[position++]=len;
		
		for(uint i=0;i<len;i++)
		{
			outArray[position]|=Value[i++]<<24;
			outArray[position]|=Value[i++]<<16;
			outArray[position]|=Value[i++]<<8;
			outArray[position++]|=Value[i];
		}
	} 
	
	void LoadData(uint[]&in outArray,uint&position)
	{
		Hash=outArray[position++];
		uint len=outArray[position++];
		Value.resize(len);
		
		for(uint i=0;i<len;i++)
		{
			Value[i++]=(outArray[position]>>24)&0xFF;
			Value[i++]=(outArray[position]>>16)&0xFF;
			Value[i++]=(outArray[position]>>8)&0xFF;
			Value[i]=outArray[position++]&0xFF;
			
		}
	}
} 

shared class Hexagonal
{
	Hexagonal(){Reset();}
	Hexagonal(const uint16&in x,const uint16&in y){Set(x,y);}
	Hexagonal(const Hexagonal&master){Set(master);}
	
	Hexagonal(const Critter&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Item&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Scenery&master){Set(master.HexX,master.HexY);}
	
	bool Entire(Map&map,int entNum){return map.GetEntireCoords(entNum,0,X,Y);}
	bool IsPassed(Map&map){return ValidPosition(map)&&map.IsHexPassed(X,Y);}
	bool IsPassed(Map&map,Hexagonal&begin,Hexagonal&end){return ValidPosition(map,begin,end)&&map.IsHexPassed(X,Y);}
	
	bool ValidPosition(Map&map)
	{
		Hexagonal end,begin;
		if(end.Entire(map,0)&&begin.Entire(map,255))
		return ValidPosition(map,begin,end);
		return false;
	}
	
	bool ValidPosition(Map&map,Hexagonal&begin,Hexagonal&end)
	{
		return(X>=begin.X&&Y>=begin.Y
		&&X<=end.X&&Y<=end.Y);
	}
	
	bool Transit(Critter&critter,Map&map){return Transit(critter,map,critter.Dir);}
	bool Transit(Critter&critter,Map&map,uint8 direction)
	{
		if(!IsPassed(map))return false;
		return critter.TransitToMap(map.Id,X,Y,direction);
	}
	
	bool Transit(Critter&critter,uint mapId){return Transit(critter,mapId,critter.Dir);}
	bool Transit(Critter&critter,uint mapId,uint8 direction)
	{
		if(mapId==0)return false;
		Map@map=GetMap(mapId);
		if(@map is null)return false;
		return Transit(critter,map,direction);
	} 
	
	void Set(const uint16&in x,const uint16&in y){X=x;Y=y;}
	void Set(const Hexagonal&in other){Set(other.X,other.Y);}
	void Reset(){X=Y=0;}
	uint Distantion(Hexagonal&other){return GetDistantion(X,Y,other.X,other.Y);}
	
	uint16 X;
	uint16 Y;
	
	bool opEquals(const Hexagonal&in other){return(other.X==X&&other.Y==Y);}
	Hexagonal&opAssign(const Hexagonal&in other)
	{
		Set(other);
		return this;
	}
	
	const uint get_UID(const uint w)const{return X+Y*w;}
	string get_Debug(){return"X:"+X+"Y:"+Y;}
	void Log(string&str){::Log(str+":"+Debug);}
}    

shared class MapHash
{
	MapHash(const uint16&in protoId)
	{
		ProtoId=protoId;
		@Min=null;
		@Max=null;
	}
	
	MapHash&opAssign(Map&map)
	{
		@Min=Hexagonal(0,0);
		@Max=Hexagonal(0,0);
		map.GetEntireCoords(0,0,Max.X,Max.Y);
		map.GetEntireCoords((255),0,Min.X,Min.Y);
		return this;
	}
	
	uint16 ProtoId;
	Hexagonal@Min;
	Hexagonal@Max;
} 

shared class Line
{
	Line(Hexagonal&a,Hexagonal&b){@A=a;@B=b;}
	
	uint get_Length()
	{
		return B.Distantion(A);
	}
	
	uint get_Point(Hexagonal&point)
	{
		return B.Distantion(point);
	}
	
	float get_Module(Hexagonal&point)
	{
		return Point[point]/Length;
	}
	
	Hexagonal@get_opIndex(const uint&in size)
	{
		
		const float mod=float(size/Length);
		return@Hexagonal(A.X+(B.X-A.X)*mod,A.Y+(B.Y-A.Y)*mod);
	} 
	
	Line(Map&map,uint16 grid,MapHash@hash)
	{
		if(@hash is null)
		{
			Hexagonal min,max;
			map.GetTransferParams(min.X,min.Y,max.X,max.Y,grid);
			
			@A=@Hexagonal(min.X,min.Y);
			@B=@Hexagonal(max.X,max.Y);
		}
		else
		{
			if(@hash.Min is null||@hash.Max is null)
			map.GetTransferParams(hash.Min.X,hash.Min.Y,hash.Max.X,hash.Max.Y,grid);
			
			@A=@Hexagonal(hash.Min.X,hash.Min.Y);
			@B=@Hexagonal(hash.Max.X,hash.Max.Y);
		}
	} 
	
	string get_Debug(){return"A<"+A.Debug+">B<"+B.Debug+">";}
	void Log(string&str){::Log(str+":"+Debug);}
	
	Hexagonal@A;
	Hexagonal@B;
}  

import MapHash@GetMapHash(const uint16&in pid)from"world";
import uint CreateLocation(Hexagonal&coordinate,uint16 locationPid)from"world"; 

import ManagerObject@get_objectManager()from"world"; 

import EventTree@get_EventRoot()from"world"; 

import Project@CreateProject(string@name,string@path)from"main";
import Project@get_Project(string@name)from"main

bool AddMiscPlane(Critter&npc,uint priority,uint waitSecond,string@funcName)
{
	NpcPlane@plane=CreatePlane();
	plane.Type=(0);
	plane.Priority=(priority==0?(10):priority);
	plane.Misc_WaitSecond=waitSecond;
	if((@funcName!=null)&&not plane.Misc_SetScript(funcName))
	{
		Log("Set script <"+funcName+"> fail");
		return false;
	}
	return npc.AddPlane(plane);
}

bool AddWalkPlane(Critter&npc,uint entire,uint cut,bool run)
{
	uint16 hX=0,hY=0;
	Map@map=npc.GetMap();
	if((@map!=null)&&map.GetEntireCoords(entire,0,hX,hY))
	{
		return AddWalkPlane(npc,0,hX,hY,6,run,cut);
	}
	return false;
}

bool AddWalkPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)
{
	if(not npc.IsCanWalk())
	return false;
	
	NpcPlane@plane=CreatePlane();
	plane.Type=(2);
	plane.Priority=(priority==0?(20):priority);
	plane.Walk_HexX=hexX;
	plane.Walk_HexY=hexY;
	plane.Walk_Dir=dir;
	plane.Run=run;
	plane.Walk_Cut=cut;
	return npc.AddPlane(plane);
}

bool AddWalkPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)
{
	if(not npc.IsCanWalk())
	return false;
	
	NpcPlane@plane=CreatePlane();
	plane.Type=(2);
	plane.Priority=(priority==0?(20):priority);
	plane.Identifier=identifier;
	plane.IdentifierExt=identifierExt;
	plane.Walk_HexX=hexX;
	plane.Walk_HexY=hexY;
	plane.Walk_Dir=dir;
	plane.Run=run;
	plane.Walk_Cut=cut;
	return npc.AddPlane(plane);
}

bool AddAttackPlane(Critter&npc,uint priority,Critter&target)
{
	return AddAttackPlane(npc,priority,target,__DeadHitPoints);
}

bool AddAttackPlane(Critter&npc,uint priority,uint critId)
{
	Critter@target=GetCritter(critId);
	if(not(@target!=null))
	{
		Log("Target not found.");
		return false;
	}
	return AddAttackPlane(npc,priority,target);
}

bool AddAttackPlane(Critter&npc,uint priority,Critter&target,int minHp)
{
	return AddAttackPlane(npc,priority,target,minHp,true);
}

bool AddAttackPlane(Critter&npc,uint priority,uint critId,int minHp)
{
	Critter@target=GetCritter(critId);
	if(not(@target!=null))
	{
		Log("Target not found.");
		return false;
	}
	
	return AddAttackPlane(npc,priority,target,minHp);
}

bool AddAttackPlane(Critter&npc,uint priority,Critter&target,bool run)
{
	return AddAttackPlane(npc,priority,target,__DeadHitPoints,run);
}

bool AddAttackPlane(Critter&npc,uint priority,uint critId,bool run)
{
	Critter@target=GetCritter(critId);
	if(not(@target!=null))
	{
		Log("Target not found.");
		return false;
	}
	
	return AddAttackPlane(npc,priority,target,run);
}

bool AddAttackPlane(Critter&npc,uint priority,Critter&target,int minHp,bool run)
{
	NpcPlane@plane=CreatePlane();
	plane.Type=(1);
	plane.Priority=(priority==0?(50):priority);
	plane.Attack_TargId=target.Id;
	plane.Attack_MinHp=minHp;
	plane.Attack_IsGag=false;
	plane.Attack_GagHexX=0;
	plane.Attack_GagHexY=0;
	plane.Attack_LastHexX=target.HexX;
	plane.Attack_LastHexY=target.HexY;
	plane.Run=run;
	return npc.AddPlane(plane);
}

bool AddAttackPlane(Critter&npc,uint priority,uint critId,int minHp,bool run)
{
	Critter@target=GetCritter(critId);
	if(not(@target!=null))
	{
		Log("Target not found.");
		return false;
	}
	
	return AddAttackPlane(npc,priority,target,minHp,run);
}

bool AddPickPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint16 protoId,uint useItemId,bool toOpen)
{
	NpcPlane@plane=CreatePlane();
	plane.Type=(3);
	plane.Priority=(priority==0?(35):priority);
	plane.Pick_HexX=hexX;
	plane.Pick_HexY=hexY;
	plane.Pick_Pid=protoId;
	plane.Pick_UseItemId=useItemId;
	plane.Pick_ToOpen=toOpen;
	plane.Run=false;
	return npc.AddPlane(plane);
}

bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen)
{
	NpcPlane@plane=CreatePlane();
	plane.Type=(3);
	plane.Priority=(priority==0?(35):priority);
	plane.Pick_HexX=item.HexX;
	plane.Pick_HexY=item.HexY;
	plane.Pick_Pid=item.GetProtoId();
	plane.Pick_UseItemId=useItemId;
	plane.Pick_ToOpen=toOpen;
	plane.Run=false;
	return npc.AddPlane(plane);
}

uint EraseAttackPlane(Critter&npc,Critter&target)
{
	return EraseAttackPlane(npc,target.Id);
}

uint EraseAttackPlane(Critter&npc,uint critId)
{
	NpcPlane@[]planes;
	uint count=npc.GetPlanes(planes);
	if(count==0)
	return 0;
	
	uint erased=0;
	for(uint i=0;i<count;i++)
	{
		if(planes[i].Attack_TargId==critId&&npc.ErasePlane(i-erased))
		erased++;
	}
	
	return erased;
} 

import uint GetCellMap(uint16 x,uint16 y)from"world";
import void SetDeterioration(Item&item,int deteriorationProcent)from"repair";
import void FindTransitHex(Map&map,uint16&hexX,uint16&hexY,uint8 radius,uint8&side)from"world";
import void unsafe_ExitGridClick(Critter&cr,int hexX,int hexY,int protoId,string@param3,int[]@param4)from"world";                    

Caravan[]caravans;

class Caravan
{
	uint8 Id;
	uint8 FromTown;
	uint8 CaravanType;
	uint[]CaravanInvs;
	uint[]CaravanDudes;
	
	Caravan()
	{
		Id=caravans.length();
		FromTown=0;
		CaravanType=0;
		CaravanInvs.resize(0);
		CaravanDudes.resize(0);
	}
	
	Caravan(uint8 from,uint[]&items,uint[]&dudes)
	{
		FromTown=from;
		CaravanInvs=items;
		CaravanDudes=dudes;
	}
	
	void GetItem(uint id)
	{ 
		
		CaravanInvs.insertLast(id);
	}
	
	void GetCritter(uint id)
	{ 
		
		CaravanDudes.insertLast(id);
	}
}

uint FindCaravanCreatePos(uint8&side)
{
	side=Random(0,7);
	
	Location@modoc_center=GetLocationByPid((1249),0);
	uint8 lX=modoc_center.WorldX*0.1,lY=modoc_center.WorldY*0.1;
	int tempX=lX,tempY=lY,x=0,y=0;
	
	while(GetCellMap(tempX,tempY)!=0)
	{
		x=tempX;
		y=tempY;
		
		switch(side)
		{
			case 0:
			tempY-=1;
			break;
			case 1:
			tempX+=1;
			tempY-=1;
			break;
			case 2:
			tempX+=1;
			break;
			case 3:
			tempX+=1;
			tempY+=1;
			break;
			case 4:
			tempY+=1;
			break;
			case 5:
			tempX-=1;
			tempY+=1;
			break;
			case 6:
			tempX-=1;
			break;
			case 7:
			tempX-=1;
			tempY-=1;
			break;
			default:
			break;
		}
		
		Log("search point: x "+x+":"+y);
	}
	
	Log("create point: x "+lX+x+":"+lY+y);
	return GetCellMap((lX+x)*10,(lY+y)*10);
}

bool LoadCaravansFromFile(string&text,bool read)
{
	file f;
	
	if(f.open("./caravans/caravans",(read?"r":"w"))!=0)
	return false;
	
	if(read)
	{
		text="";
		while(!f.isEndOfFile())
		{
			string tempText="";
			f.readLine(tempText);
			
			text+=tempText;
		}
		;
	}
	else
	{
		f.writeString(text);
	}
	
	return true;
}

int WriteCaravans()
{
	string saveData="";
	for(uint8 i=0,j=caravans.length();i<j;++i)
	{
		saveData+="Id"+"="+caravans[i].Id+"\n";
		saveData+="FromTown"+"="+caravans[i].FromTown+"\n";
		saveData+="Type"+"="+caravans[i].CaravanType+"\n";
		
		for(uint8 ii=0,jj=caravans[i].CaravanInvs.length();ii<jj;++i)
		{
			saveData+="Item"+"="+caravans[i].CaravanInvs[ii]+"\n";
		}
		
		for(uint8 ii=0,jj=caravans[i].CaravanInvs.length();ii<jj;++i)
		{
			saveData+="Dude"+"="+caravans[i].CaravanDudes[ii]+"\n";
		}
		
		saveData+=";";
		
	}
	
	if(saveData!="")
	{
		if(!LoadCaravansFromFile(saveData,false))
		return-1;
	}
	
	return 0;
}

int ReadCaravans()
{
	string outputText="";
	
	if(!LoadCaravansFromFile(outputText,true)||outputText=="")
	return-1;
	
	caravans.resize(0);
	
	string@[]caravanText=split(outputText,";");
	
	for(uint8 i=0,j=caravanText.length();i<j;++i)
	{
		string@[]caravanLine=split(caravanText[i],"=");
		uint16 tempUint=0;
		Caravan tempCaravan;
		
		for(uint8 ii=0,jj=caravanLine.length();ii<jj;++ii)
		{
			if(@caravanLine[ii]is null||@caravanLine[ii++]is null)
			continue;          
			
			StrToInt(caravanLine[ii++],int(tempUint));
			
			if(caravanLine[ii]=="Id")
			{
				tempCaravan.Id=tempUint;
			}
			else if(caravanLine[ii]=="FromTown")
			{
				tempCaravan.FromTown=tempUint;
			}
			else if(caravanLine[ii]=="Type")
			{
				tempCaravan.CaravanType=tempUint;
			}
			else if(caravanLine[ii]=="Item")
			{
				tempCaravan.GetItem(tempUint);
			}
			else if(caravanLine[ii]=="Dude")
			{
				tempCaravan.GetCritter(tempUint);
			}
			
		}
		
		if(tempUint!=uint16(-1))
		caravans.insertLast(tempCaravan);
	}
	
	Log("caravans loaded : "+caravans.length());
	
	return 0;
}
void InitCrimsonCaravans()
{ 
	
}

void SaveCaravans()
{
	WriteCaravans();
}

bool Regen(Caravan&caravan)
{
	for(uint8 i=0,j=caravan.CaravanDudes.length();i<j;++i)
	{
		CaravanItemTable(caravan.CaravanDudes[i],caravan.FromTown);
	}
	
	return true;
}

void AddItemToInv(Critter&cr,uint16 pid,uint16 count,uint8 damage,uint8 chance)
{
	uint8 rnd=Random(0,95),rnd_=Random(chance,100);
	
	rnd=(((rnd+chance)>(95))?(95):(((rnd+chance)<(0))?(0):(rnd+chance)));
	if(rnd<rnd_)
	return;
	
	Item@item=cr.AddItem(pid,count);
	if(item is null)
	return;
	
	SetDeterioration(item,damage);
}

void CaravanItemTable(uint id,uint8 fromTown)
{
	Critter@cr=GetCritter(id);
	if(cr is null)
	return;
	
	switch(fromTown)
	{
		case(0):
		{
			AddItemToInv(cr,(124),10,10,100);
			break;
		}
		
		default:
		break;
	}
}

void SpawnCritter(Map&map,uint16 pid,uint8 count,uint8 side,uint8 caravanId)
{
	if(caravanId>=caravans.length())
	return;
	
	for(uint8 i=0;i<count;++i)
	{
		uint8 dir=0;
		uint16 hexX=0,hexY=0;
		map.GetEntireCoords(255,0,hexX,hexY);
		
		uint8 x=Random(3,7),y=Random(3,7);
		
		switch(side)
		{
			case 0:
			hexX+=Random(1,((148)-1));
			hexY+=y+Random(-2,3);
			dir=(Random(0,1)>0?2:3);
			break;
			case 1:
			hexX+=Random(1,((148)-1));
			hexY+=y+Random(-2,3);
			dir=3;
			break;
			case 2:
			hexY+=Random(1,((148)-1));
			hexX+=x+Random(-2,3);
			dir=4;
			break;
			case 3:
			hexX+=x+Random(-2,3);
			hexY+=Random(1,(148)-1);
			dir=5;
			break;
			case 4:
			hexX+=x+Random(-2,3);
			hexY+=(148)-y+Random(-2,3);
			dir=(Random(0,1)>0?0:5);
			break;
			case 5:
			hexX+=Random(1,((148)-1));
			hexY+=(148)-y+Random(-2,3);
			dir=0;
			break;
			case 6:
			hexX+=(148)-x+Random(-2,3);
			hexY+=y+Random(1,((148)-1));
			dir=(Random(0,1)>0?0:1);
			break;
			case 7:
			hexX+=(148)-x+Random(-2,3);
			hexY+=y-Random(2,3);
			dir=2;
			break;
			default:
			break;
		}  
		
		uint8 role=0;
		
		if(pid==10)
		role=(0);
		else if(pid==11)
		role=1;
		
		string initFunc="";
		
		switch(role)
		{
			case(0):
			initFunc="_InitCaravanChief";
			break;
			default:
			break;
		}
		
		Critter@cr=map.AddNpc(pid,hexX,hexY,dir,null,null,initFunc);
		if(cr is null)
		continue;
		
		cr.StatBase[(89)]=role;
		cr.StatBase[(97)]=caravanId;
		cr.StatBase[(517)]=1;
		caravans[caravanId].GetCritter(cr.Id);
		
		Log("critter spawned "+cr.Id+" role "+role+" caravan id"+caravanId+" hex "+cr.HexX+":"+cr.HexY);
	}
}

void FindLocalMapPath(Caravan&caravan,uint16&hexX,uint16&hexY)
{
	uint8 len=caravan.CaravanDudes.length();
	
	if(len==0)
	return;
	
	Critter@cr=GetCritter(caravan.CaravanDudes[0]);
	if(cr is null)
	return;
	
	Location@modoc_center=GetLocationByPid((1249),0);
	Map@caravanMap=cr.GetMap();
	
	if(modoc_center is null||caravanMap is null)
	return;
	
	int x=(modoc_center.WorldX*0.1)-(caravanMap.GetLocation().WorldX*0.1),y=(modoc_center.WorldY*0.1)-(caravanMap.GetLocation().WorldY*0.1);
	uint16 mapHexX=0,mapHexY=0;
	
	caravanMap.GetEntireCoords(255,0,mapHexX,mapHexY);
	
	if(x!=0)
	{
		if(x>0)
		{
			if(cr.HexX<mapHexX+((148)*0.5))
			{
				hexX=mapHexX+((148)*0.5);
			}
			else if(cr.HexX>mapHexX+((148)*0.5)&&cr.HexX<mapHexX+((148)*0.75))
			{
				hexX=mapHexX+((148)*0.75);
			}
			else if(cr.HexX>mapHexX+((148)*0.75)&&cr.HexX<mapHexX+((148)*0.90))
			{
				hexX=mapHexX+((148)*0.90);
			}
			else if(cr.HexY>mapHexX+((148)*0.90)&&cr.HexX<mapHexX+((148)*0.99))
			{
				hexX=cr.HexX;
				hexY=cr.HexY;
				
				uint8 side=0;
				
				FindTransitHex(caravanMap,hexX,hexY,10,side);
				
				unsafe_ExitGridClick(cr,hexX,hexY,(4053),null,null);
			}
		}
		else if(x<0)
		{
			if(cr.HexX>mapHexX+((148)*0.5))
			{
				hexX=mapHexX+((148)*0.5);
			}
			else if(cr.HexX<mapHexX+((148)*0.5)&&cr.HexX>mapHexX+((148)*0.75))
			{
				hexX=mapHexX+((148)*0.75);
			}
			else if(cr.HexX<mapHexX+((148)*0.75)&&cr.HexX>mapHexX+((148)*0.90))
			{
				hexX=mapHexX+((148)*0.90);
			}
			else if(cr.HexY<mapHexX+((148)*0.90)&&cr.HexX>mapHexX+((148)*0.99))
			{
				hexX=cr.HexX;
				hexY=cr.HexY;
				
				uint8 side=0;
				
				FindTransitHex(caravanMap,hexX,hexY,10,side);
				
				unsafe_ExitGridClick(cr,hexX,hexY,(4053),null,null);
			}
		}
	}
	
	if(y!=0)
	{
		if(y>0)
		{
			if(cr.HexY<mapHexY+((148)*0.5))
			{
				hexY=mapHexY+((148)*0.5);
			}
			else if(cr.HexY>mapHexY+((148)*0.5)&&cr.HexY<mapHexY+((148)*0.75))
			{
				hexY=mapHexY+((148)*0.75);
			}
			else if(cr.HexY>mapHexY+((148)*0.75)&&cr.HexY<mapHexY+((148)*0.90))
			{
				hexY=mapHexY+((148)*0.90);
			}
			else if(cr.HexY>mapHexY+((148)*0.90)&&cr.HexY<mapHexY+((148)*0.99))
			{
				hexX=cr.HexX;
				hexY=cr.HexY;
				
				uint8 side=0;
				
				FindTransitHex(caravanMap,hexX,hexY,10,side);
				
				unsafe_ExitGridClick(cr,hexX,hexY,(4053),null,null);
			}
		}
		else if(y<0)
		{
			if(cr.HexY>mapHexY+((148)*0.5))
			{
				hexY=mapHexY+((148)*0.5);
			}
			else if(cr.HexY<mapHexY+((148)*0.5)&&cr.HexY>mapHexY+((148)*0.75))
			{
				hexY=mapHexY+((148)*0.75);
			}
			else if(cr.HexY<mapHexY+((148)*0.75)&&cr.HexY>mapHexY+((148)*0.90))
			{
				hexY=mapHexY+((148)*0.90);
			}
			else if(cr.HexY<mapHexY+((148)*0.90)&&cr.HexY>mapHexY+((148)*0.99))
			{
				hexX=cr.HexX;
				hexY=cr.HexY;
				
				uint8 side=0;
				
				FindTransitHex(caravanMap,hexX,hexY,10,side);
				
				unsafe_ExitGridClick(cr,hexX,hexY,(4053),null,null);
			}
		}
	}
}

void MoveCaravan(Caravan&caravan)
{
	uint16 hexX=0,hexY=0;
	FindLocalMapPath(caravan,hexX,hexY);
	
	for(uint8 i=0,j=caravan.CaravanDudes.length();i<j;++i)
	{
		Critter@cr=GetCritter(caravan.CaravanDudes[i]);
		if(cr is null)
		continue;
		
		AddWalkPlane(cr,10,hexX,hexY,Random(0,5),false,0);
	}
	
}  

void _InitCaravanChief(Critter&cr,bool firstTime)
{
	cr.SetEvent((0),"e_CaravanDudeIdle");
}

void e_CaravanDudeIdle(Critter&cr)
{
	MoveCaravan(caravans[cr.StatBase[(97)]]);
}   

void AddCaravan(Critter&cr,int random,int,int)
{
	Caravan caravan;
	
	if(random!=0)
	{
		caravan.FromTown=Random(0,(4));
		caravan.CaravanType=Random(0,(4));
	}
	
	caravans.insertLast(caravan);
}

void EditCaravan(Critter&cr,int id,int line,int value)
{
	if(uint(id)<caravans.length())
	{       
		
		if(line==0)
		caravans[id].FromTown=value;
		else if(line==1)
		caravans[id].CaravanType=value;
		
	}
}

void RegenCaravan(Critter&cr,int id,int,int)
{
	if(uint(id)<caravans.length())
	Regen(caravans[id]);
}

void SpawnCaravan(Critter&cr,int id,int membersCount,int mapId)
{
	if(uint(id)<caravans.length()&&caravans[id].CaravanDudes.length()==0)
	{
		uint8 side=0;
		
		Map@map=GetMap(mapId!=0?mapId:FindCaravanCreatePos(side));
		if(map is null)
		{
			cr.Say((11),"spawn map !valid");
			return;
		}
		
		SpawnCritter(map,10,1,side,id);
		Regen(caravans[id]);
	}
}

void InfoCaravan(Critter&cr,int id,int membersCount,int)
{
	for(uint8 i=0,j=caravans.length();i<j;++i)
	{
		cr.Say((11),"caravan #"+i+" from "+caravans[i].FromTown+" crts "+caravans[i].CaravanDudes.length()+" itms "+caravans[i].CaravanInvs.length());
	}
}
