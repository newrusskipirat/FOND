                                                     

string[]__critterHistoryInfo;                                                                                                                                                                                                                                                                                                                                                                                                                                            

import IGUIScreenOpt@GUI_CreateScreen(int screenIndex,string@sprName)from"client_gui";

import void GUI_DeleteScreen(int screenIndex)from"client_gui";

import IGUIElementOpt@GUI_AddScreenElement(int screenIndex,string@sprName,int x,int y)from"client_gui";

import IGUIScreenOpt@GUI_GetScreenOptions(int screenIndex)from"client_gui";

import IGUIScreenOpt@GUI_GetScreenOptions()from"client_gui";

import IGUIElementOpt@GUI_GetElementOptions()from"client_gui";
import void GUI_HideScreen(int screenIndex,int p0,int p1,int p2)from"client_gui";

import void GUI_DeleteScreenElements(int screenIndex)from"client_gui"; 

import IGUIScreenOpt@GUI_CreateScreenIni(int screenIndex,string@iniKey)from"client_gui";
import IGUIElementOpt@GUI_AddScreenElementIni(int screenIndex,string@ini,int defx,int defy)from"client_gui";
import IGUIElementOpt@GUI_AddScreenElementIni(int screenIndex,string@ini,int defx,int defy,string@defSpr)from"client_gui";      

shared interface IGUIScreenCallbackShow
{
	void OnShow(int p0,int p1,int p2);
}
shared interface IGUIScreenCallbackHide
{
	void OnHide(int p0,int p1,int p2);
}
shared interface IGUIScreenCallbackMove
{
	void OnMove(int posX,int posY);
}

shared interface IGUIScreenCallbackInit{
	void OnInit();
}

shared interface IGUIScreenOpt
{
	IGUIScreenOpt@CallbackShow(IGUIScreenCallbackShow@callback);
	IGUIScreenOpt@CallbackHide(IGUIScreenCallbackHide@callback);
	IGUIScreenOpt@CallbackMove(IGUIScreenCallbackMove@callback);
	IGUIScreenOpt@Position(int x,int y);
	IGUIScreenOpt@CanMove(bool enabled);
	IGUIScreenOpt@Modal(bool enabled);
	IGUIScreenOpt@Multiinstance(bool enabled);
	IGUIScreenOpt@IgnoreBorders(bool enabled);
	IGUIScreenOpt@CloseOnMiss(bool enabled);
	IGUIScreenOpt@AutoCursor(bool enabled,int cursorType);
	IGUIScreenOpt@SetElementCount(int8 ElementCount);
	IGUIScreenOpt@Pic(string@sprName,int path);  
	
	int GetPosX();
	int GetPosY();
	uint16 GetElementsLength();
	IGUIElementOpt@GetElement(uint16 index);
	
}    

shared interface IGUIElementCallbackInit
{
	void OnInit();
}
shared interface IGUIElementCallbackDraw
{
	void OnDraw(int posX,int posY,int w,int h);
}
shared interface IGUIElementCallbackMouseClick
{
	void OnMouseClick(int click);
}
shared interface IGUIElementCallbackKeyPress
{
	void OnKeyPress(uint8 key,uint8 letter);
}

shared interface IGUIElementOpt
{
	IGUIElementOpt@CallbackInit(IGUIElementCallbackInit@callback);
	IGUIElementOpt@CallbackDraw(IGUIElementCallbackDraw@callback);
	IGUIElementOpt@CallbackMouseClick(IGUIElementCallbackMouseClick@callback);
	IGUIElementOpt@CallbackKeyPress(IGUIElementCallbackKeyPress@callback);
	IGUIElementOpt@Position(int x,int y);
	IGUIElementOpt@Position(int x,int y,int w,int h);
	IGUIElementOpt@Position(string&iniKey);
	IGUIElementOpt@DownPic(string@sprName);
	IGUIElementOpt@Text(string@text,int font,uint color,uint downColor,int flags);
	IGUIElementOpt@TextInput(bool enabled,uint maxLen,uint colorFocused);
	IGUIElementOpt@Switch(bool enabled); 
	
	IGUIElementOpt@SetVisible(bool enabled);
	IGUIElementOpt@Realese();
	IGUIElementOpt@SetElementType(uint8 type);
	IGUIElementOpt@SetDescription(string desc);
	IGUIElementOpt@SetElementBtnNum(uint8 btnNum);
	IGUIElementOpt@SetElementFastPanelType(uint8 type);
	IGUIElementOpt@SetElementFastPanelId(uint16 id);
	IGUIElementOpt@UpPic(string@sprName);
	IGUIElementOpt@Pic(string@sprName,int path);
	IGUIElementOpt@SetLayer(uint8 layer);
	IGUIElementOpt@SetSpecialValue(uint value);
	IGUIElementOpt@SetRenderLayer(uint8 layer);
	IGUIElementOpt@PicSetFrmCount(uint16 count);   
	
	int GetPosX();
	int GetPosY();
	string@GetText(); 
	
	bool GetVisible();
	uint8 GetLayer();
	uint8 GetType();
	uint8 GetBtnNum();
	uint8 GetFastPanelType();
	uint16 GetFastPanelId();
	string GetDescription();
	uint16 GetSurfaceHeight();
	uint16 GetSurfaceWidth();
	uint GetSpecValue();
	uint8 GetRenderLayer(); 
	
}              

uint __GetColor(int r,int g,int b)
{
	r=(((r)>(255))?(255):(((r)<(0))?(0):(r)));
	g=(((g)>(255))?(255):(((g)<(0))?(0):(g)));
	b=(((b)>(255))?(255):(((b)<(0))?(0):(b)));
	return(uint((0xFF<<24)|(((r)&0xFF)<<16)|(((g)&0xFF)<<8)|((b)&0xFF)));
}

uint __GetGradient(uint colorStart,uint colorEnd,uint8 pos)
{
	pos=(((pos)>(100))?(100):(((pos)<(1))?(1):(pos)));
	
	int aS=(colorStart>>24)&0xFF,
	rS=((colorStart>>16)&0xFF),
	gS=((colorStart>>8)&0xFF),
	bS=((colorStart)&0xFF),
	
	aE=(colorEnd>>24)&0xFF,
	rE=((colorEnd>>16)&0xFF),
	gE=((colorEnd>>8)&0xFF),
	bE=((colorEnd)&0xFF); 
	
	rS=(((rE-int(rS*(pos*0.01)))>0)?(rE-int(rS*(pos*0.01))):-(rE-int(rS*(pos*0.01))));
	gS=(((gE-int(gS*(pos*0.01)))>0)?(gE-int(gS*(pos*0.01))):-(gE-int(gS*(pos*0.01))));
	bS=(((bE-int(bS*(pos*0.01)))>0)?(bE-int(bS*(pos*0.01))):-(bE-int(bS*(pos*0.01))));
	
	return __GetColor(rS,gS,bS);
}

uint __GetColor(uint8&a,uint8&r,uint8&g,uint8&b,uint color){
	a=(color>>24)&0xFF;
	r=((color>>16)&0xFF);
	g=((color>>8)&0xFF);
	b=((color)&0xFF);
	
	return 0;
}

string codeText="";

class ScreenMain:IGUIScreenCallbackShow,IGUIScreenCallbackHide
{
	IGUIScreenOpt@screenOpt;
	InputCode@Code;
	NumberButton@Button;
	uint doorId;
	uint8 codeLength;
	bool codeSet;
	bool text;
	
	void OnShow(int p0,int p1,int p2)
	{
		
		codeLength=p1+1;
		doorId=p0;
		codeSet=(p2!=0?true:false);
		SetCode(codeText);
		text=true;
	}
	
	void OnHide(int p0,int p1,int p2)
	{}
	
	uint8 GetCodeLegth()
	{
		return Code.GetCode().length();
	}
	
	void EraseCode()
	{
		Code.EraseCode();
	}
	
	void SetCode(string code)
	{
		Code.SetCode(code);
	}
	
	uint GetDoorId()
	{
		return doorId;
	}
	
	uint16 GetCode()
	{
		int code=0;
		StrToInt(Code.GetCode(),code);
		return code;
	} 
	
}

class InputCode:IGUIElementCallbackInit
{
	IGUIElementOpt@elementOpt;
	ScreenMain@Instance;
	
	InputCode(ScreenMain&instance)
	{
		@Instance=instance;
		@Instance.Code=this;
		
	}
	
	void OnInit()
	{
		@elementOpt=GUI_GetElementOptions();
		
	}
	
	void EraseCode()
	{
		string sTemp=elementOpt.GetText();
		sTemp.resize(sTemp.length()-1);
		elementOpt.Text(sTemp,(5),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),0,(0x0004)|(0x0008)|(0x0200));
	}
	
	void SetCode(string code)
	{
		string sTemp=elementOpt.GetText()+code;
		
		if(sTemp.length()>Instance.codeLength)
		sTemp=code;
		elementOpt.Text(""+sTemp,(5),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),0,(0x0004)|(0x0008)|(0x0200));
		Instance.text=false;
	}
	
	string GetCode()
	{
		return elementOpt.GetText();
	}
	
	uint8 GetCodeLegth()
	{
		return elementOpt.GetText().length();
	}
}

class NumberButton:IGUIElementCallbackInit,IGUIElementCallbackMouseClick
{
	
	ScreenMain@Instance;
	InputCode@Code;
	
	uint8 ButtonClass;
	uint8 ButtonNumber;
	
	NumberButton(ScreenMain&instance)
	{
		@Instance=instance;
		@Instance.Button=this;
	}
	
	void OnInit()
	{}
	
	void OnMouseClick(int click)
	{
		switch(ButtonClass)
		{
			case(0):
			if(Instance.GetCodeLegth()>0&&!Instance.text)
			Instance.EraseCode();
			break;
			case(1):
			if(Instance.GetCodeLegth()<Instance.codeLength||Instance.text)
			Instance.SetCode(""+ButtonNumber);
			break;
			case(2):
			if(!Instance.text)
			RunServerScriptUnsafe("general_unsafe@unsafe_openCodeDoor",Instance.GetDoorId(),Instance.GetCode(),Instance.codeSet?1:0,"",null);
			break;
			case(3):
			::HideScreen(0,2,2,2);
			break;
		}
	}
}

class TestScreenButtonShow:IGUIElementCallbackMouseClick
{
	void OnMouseClick(int click)
	{
		
		::ShowScreen((48),30,3,3);
	}
}

void ShowScreen(int p0,int p1,int p2,string@+p3,int[]@+p4)
{
	codeText=p3;
	ShowScreen((48),p0,p1,p2);
}

void HideScreen(int p0,int p1,int p2,string@+p3,int[]@+p4)
{
	GUI_HideScreen((48),0,0,0);
}

void InitCodedoorScreen()
{
	ScreenMain screenMain();
	GUI_CreateScreen((48),"codeScreen.png")
	.CallbackHide(screenMain)
	.CallbackShow(screenMain)
	.CloseOnMiss(true)
	.AutoCursor(true,(0));
	
	InputCode InputCodeB(screenMain);
	GUI_AddScreenElement((48),"keyCodeEnter.png",0,0)
	.CallbackInit(InputCodeB)
	.TextInput(true,5,((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xFF)&0xFF)<<8)|((0)&0xFF)))));
	
	NumberButton ButtonErase(screenMain);
	GUI_AddScreenElement((48),"keyCodeKey_new.png",155,265)
	.CallbackInit(ButtonErase)
	.CallbackMouseClick(ButtonErase)
	.Text("<",(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),0,(0x0004)|(0x0008)|(0x0200))
	.DownPic("keyCodeKeyDown_new.png");
	ButtonErase.ButtonClass=(0);
	
	NumberButton ButtonOpen(screenMain);
	GUI_AddScreenElement((48),"keyCodeKey_new.png",15,265)
	.CallbackInit(ButtonOpen)
	.CallbackMouseClick(ButtonOpen)
	.Text("OP",(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),0,(0x0004)|(0x0008)|(0x0200))
	.DownPic("keyCodeKeyDown_new.png");
	ButtonOpen.ButtonClass=(2);        
	
	uint16 axistX=0,axistY=0;
	
	for(uint8 i=0;i<=9;i++)
	{ 
		
		NumberButton ButtonNumber(screenMain);
		GUI_AddScreenElement((48),"keyCodeKey_new.png",i!=0?15+axistX:85,i!=0?85+axistY:265)
		.CallbackInit(ButtonNumber)
		.CallbackMouseClick(ButtonNumber)
		.Text(""+i,(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),0,(0x0004)|(0x0008)|(0x0200))
		.DownPic("keyCodeKeyDown_new.png");
		ButtonNumber.ButtonClass=(1);
		ButtonNumber.ButtonNumber=i;
		
		if(i%3==0&&i!=0)
		{
			axistX=0;
			axistY+=60;
		}
		else
		{
			i!=0?axistX+=70:0;
		}
		
	}
}
