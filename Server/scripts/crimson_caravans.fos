// crimson caravans
// pm

#include "_macros.fos"
#include "_defines.fos"
#include "_itempid.fos"
#include "npc_planes.fos"

import uint  GetCellMap( uint16 x, uint16 y ) from "world";
import void SetDeterioration( Item& item, int deteriorationProcent ) from "repair";
import void FindTransitHex( Map& map, uint16& hexX, uint16& hexY, uint8 radius, uint8& side ) from "world";
import void unsafe_ExitGridClick( Critter& cr, int hexX, int hexY, int protoId, string@ param3, int[] @ param4 ) from "world";

#define CARAVANS_FILE       "./caravans/caravans"
#define TOKEN_CARAVAN       ";"
// #define TOKEN_CARAVAN		"*"
#define TOKEN_NAME          "="

#define LINE_ID             "Id"
#define LINE_FROMTOWN       "FromTown"
#define LINE_TYPE           "Type"
#define LINE_ITEM           "Item"
#define LINE_DUDE           "Dude"

#define CARAVAN_TOWN_MAX    ( 4 )
#define CARAVAN_TYPE_MAX    ( 4 )

#define FROM_JUNK           ( 0 )

#define ROLE_BRAHMIN        ( 0 )

#define MAP_SIZE            ( 148 )

Caravan[] caravans;

class Caravan
{
    uint8 Id;
    uint8 FromTown;
    uint8 CaravanType;
    uint[] CaravanInvs;
    uint[] CaravanDudes;

    Caravan()
    {
        Id = caravans.length();
        FromTown = 0;
        CaravanType = 0;
        CaravanInvs.resize( 0 );
        CaravanDudes.resize( 0 );
    }

    Caravan( uint8 from, uint[] & items, uint[] & dudes )
    {
        FromTown = from;
        CaravanInvs = items;
        CaravanDudes = dudes;
    }

    void GetItem( uint id )
    {
        // Item@ item = GetItem(id);
        // if(item !is null) {CaravanInvs.insertLast(item);}
        CaravanInvs.insertLast( id );
    }

    void GetCritter( uint id )
    {
        // Critter@ cr = GetCritter(id);
        // if(cr !is null) {CaravanDudes.insertLast(cr);}
        CaravanDudes.insertLast( id );
    }
}

uint FindCaravanCreatePos( uint8& side )
{
    side = Random( 0, 7 );

	Location@ modoc_center = GetLocationByPid(LOCATION_Modoc_Center, 0);
    uint8 lX = modoc_center.WorldX * 0.1, lY = modoc_center.WorldY * 0.1;
    int   tempX = lX, tempY = lY, x = 0, y = 0;

    while( GetCellMap( tempX, tempY ) != 0 )
    {
        x = tempX;
        y = tempY;

        switch( side )
        {
        case 0:
            tempY -= 1;
            break;
        case 1:
            tempX += 1;
            tempY -= 1;
            break;
        case 2:
            tempX += 1;
            break;
        case 3:
            tempX += 1;
            tempY += 1;
            break;
        case 4:
            tempY += 1;
            break;
        case 5:
            tempX -= 1;
            tempY += 1;
            break;
        case 6:
            tempX -= 1;
            break;
        case 7:
            tempX -= 1;
            tempY -= 1;
            break;
        default:
            break;
        }

        Log( "search point: x " + x + ":" + y );
    }
	
    Log( "create point: x " + lX + x + ":" + lY + y );
    return GetCellMap( ( lX + x ) * 10, ( lY + y ) * 10 );
}

bool LoadCaravansFromFile( string& text, bool read )
{
    file f;

    if( f.open( CARAVANS_FILE, ( read ? "r" : "w" ) ) != 0 )
        return false;

    if( read )
    {
        text = "";
        while( !f.isEndOfFile() )
        {
            string tempText = "";
            f.readLine( tempText );

            text += tempText;
        }
        ;
    }
    else
    {
        f.writeString( text );
    }

    return true;
}

int WriteCaravans()
{
    string saveData = "";
    for( uint8 i = 0, j = caravans.length(); i < j; ++i )
    {
        saveData += LINE_ID + TOKEN_NAME + caravans[ i ].Id + "\n";
        saveData += LINE_FROMTOWN + TOKEN_NAME + caravans[ i ].FromTown + "\n";
        saveData += LINE_TYPE + TOKEN_NAME + caravans[ i ].CaravanType + "\n";

        for( uint8 ii = 0, jj = caravans[ i ].CaravanInvs.length(); ii < jj; ++i )
        {
            saveData += LINE_ITEM + TOKEN_NAME + caravans[ i ].CaravanInvs[ ii ] + "\n";
        }

        for( uint8 ii = 0, jj = caravans[ i ].CaravanInvs.length(); ii < jj; ++i )
        {
            saveData += LINE_DUDE + TOKEN_NAME + caravans[ i ].CaravanDudes[ ii ] + "\n";
        }

        saveData += TOKEN_CARAVAN;

    }

    if( saveData != "" )
    {
        if( !LoadCaravansFromFile( saveData, false ) )
            return -1;
    }

    return 0;
}

int ReadCaravans()
{
    string outputText = "";

    if( !LoadCaravansFromFile( outputText, true ) || outputText == "" )
        return -1;

    caravans.resize( 0 );

    string@[] caravanText = split( outputText, TOKEN_CARAVAN );

    for( uint8 i = 0, j = caravanText.length(); i < j; ++i )
    {
        string@[] caravanLine = split( caravanText[ i ], TOKEN_NAME );
        uint16  tempUint = 0;
        Caravan tempCaravan;

        for( uint8 ii = 0, jj = caravanLine.length(); ii < jj; ++ii )
        {
            if( @caravanLine[ ii ] is null || @caravanLine[ ii++ ] is null )
                continue;

            /*switch(caravanLine[ii])
               /{
                    case LINE_ID	        : {StrToInt(tempUint, caravanLine[ii++]); tempCaravan.Id = tempUint; break;}
                    case LINE_FROMTOWN  : {StrToInt(tempUint, caravanLine[ii++]); tempCaravan.FromTown = tempUint; break;}
                    case LINE_TYPE		: {StrToInt(tempUint, caravanLine[ii++]); tempCaravan.CaravanType = tempUint; break;}
                    case LINE_ITEM		: {StrToInt(tempUint, caravanLine[ii++]); tempCaravan.GetItem(tempUint); break;}
                    case LINE_DUDE		: {StrToInt(tempUint, caravanLine[ii++]); tempCaravan.GetCritter(tempUint); break;}
                    default             : tempUint = uint16(-1); break;
               }*/

            StrToInt( caravanLine[ ii++ ], int(tempUint) );

            if( caravanLine[ ii ] == LINE_ID )
            {
                tempCaravan.Id = tempUint;
            }
            else if( caravanLine[ ii ] == LINE_FROMTOWN )
            {
                tempCaravan.FromTown = tempUint;
            }
            else if( caravanLine[ ii ] == LINE_TYPE )
            {
                tempCaravan.CaravanType = tempUint;
            }
            else if( caravanLine[ ii ] == LINE_ITEM )
            {
                tempCaravan.GetItem( tempUint );
            }
            else if( caravanLine[ ii ] == LINE_DUDE )
            {
                tempCaravan.GetCritter( tempUint );
            }

        }

        if( tempUint != uint16( -1 ) )
            caravans.insertLast( tempCaravan );
    }

    Log( "caravans loaded : " + caravans.length() );

    return 0;
}
void InitCrimsonCaravans()
{
    // caravans.insertLast
    // ReadCaravans();
}

void SaveCaravans()
{
    WriteCaravans();
}

bool Regen( Caravan& caravan )
{
    for( uint8 i = 0, j = caravan.CaravanDudes.length(); i < j; ++i )
    {
        CaravanItemTable( caravan.CaravanDudes[ i ], caravan.FromTown );
    }

    return true;
}

void AddItemToInv( Critter& cr, uint16 pid, uint16 count, uint8 damage, uint8 chance )
{
    uint8 rnd = Random( 0, 95 ), rnd_ = Random( chance, 100 );

    rnd = CLAMP( rnd + chance, 0, 95 );
    if( rnd < rnd_ )
        return;

    Item@ item = cr.AddItem( pid, count );
    if( item is null )
        return;

    SetDeterioration( item, damage );
}

void CaravanItemTable( uint id, uint8 fromTown )
{
    Critter@ cr = GetCritter( id );
    if( cr is null )
        return;

    switch( fromTown )
    {
    case FROM_JUNK:
    {
        AddItemToInv( cr, PID_BEER, 10, 10, 100 );
        break;
    }

    default:
        break;
    }
}

void SpawnCritter( Map& map, uint16 pid, uint8 count, uint8 side, uint8 caravanId )
{
    if( caravanId >= caravans.length() )
        return;

    for( uint8 i = 0; i < count; ++i )
    {
        uint8  dir = 0;
        uint16 hexX = 0, hexY = 0;
        map.GetEntireCoords( 255, 0, hexX, hexY );
        // {
        uint8 x = Random( 3, 7 ), y = Random( 3, 7 );

        switch( side )
        {
        case 0:
            hexX += Random( 1, ( MAP_SIZE - 1 ) );
            hexY += y + Random( -2, 3 );
            dir = ( Random( 0, 1 ) > 0 ? 2 : 3 );
            break;
        case 1:
            hexX += Random( 1, ( MAP_SIZE - 1 ) );
            hexY += y + Random( -2, 3 );
            dir = 3;
            break;
        case 2:
            hexY += Random( 1, ( MAP_SIZE - 1 ) );
            hexX += x + Random( -2, 3 );
            dir = 4;
            break;
        case 3:
            hexX += x + Random( -2, 3 );
            hexY += Random( 1, MAP_SIZE - 1 );
            dir = 5;
            break;
        case 4:
            hexX += x + Random( -2, 3 );
            hexY += MAP_SIZE - y + Random( -2, 3 );
            dir = ( Random( 0, 1 ) > 0 ? 0 : 5 );
            break;
        case 5:
            hexX += Random( 1, ( MAP_SIZE - 1 ) );
            hexY += MAP_SIZE - y + Random( -2, 3 );
            dir = 0;
            break;
        case 6:
            hexX += MAP_SIZE - x + Random( -2, 3 );
            hexY += y + Random( 1, ( MAP_SIZE - 1 ) );
            dir = ( Random( 0, 1 ) > 0 ? 0 : 1 );
            break;
        case 7:
            hexX += MAP_SIZE - x + Random( -2, 3 );
            hexY += y - Random( 2, 3 );
            dir = 2;
            break;
        default:
            break;
        }
        // }while(map.IsHexPassed(hexX, hexY));


        uint8 role = 0;

        if( pid == 10 )
            role = ROLE_BRAHMIN;
        else if( pid == 11 )
            role = 1;

        string initFunc = "";

        switch( role )
        {
        case ROLE_BRAHMIN:
            initFunc = "_InitCaravanChief";
            break;
        default:
            break;
        }

        Critter @ cr = map.AddNpc( pid, hexX, hexY, dir, null, null, initFunc );
        if( cr is null )
            continue;

        cr.StatBase[ ST_NPC_ROLE ] = role;
        cr.StatBase[ ST_VAR7 ] = caravanId;
        cr.StatBase[ MODE_NO_HOME ] = 1;
        caravans[ caravanId ].GetCritter( cr.Id );

        Log( "critter spawned " + cr.Id + " role " + role + " caravan id" + caravanId + " hex " + cr.HexX + ":" + cr.HexY );
    }
}

void FindLocalMapPath( Caravan& caravan, uint16& hexX, uint16& hexY )
{
    uint8 len = caravan.CaravanDudes.length();

    if( len == 0 )
        return;

    Critter@ cr = GetCritter( caravan.CaravanDudes[ 0 ] );
    if( cr is null )
        return;

    Location@ modoc_center = GetLocationByPid(LOCATION_Modoc_Center, 0);
    Map @ caravanMap = cr.GetMap();

    if( modoc_center is null || caravanMap is null )
        return;

    int    x = ( modoc_center.WorldX * 0.1 ) - ( caravanMap.GetLocation().WorldX * 0.1 ), y = ( modoc_center.WorldY * 0.1 ) - ( caravanMap.GetLocation().WorldY * 0.1 );
    uint16 mapHexX = 0, mapHexY = 0;

    caravanMap.GetEntireCoords( 255, 0, mapHexX, mapHexY );

    if( x != 0 )
    {
        if( x > 0 )
        {
            if( cr.HexX < mapHexX + ( MAP_SIZE * 0.5 ) )
            {
                hexX = mapHexX + ( MAP_SIZE * 0.5 );
            }
            else if( cr.HexX > mapHexX + ( MAP_SIZE * 0.5 ) && cr.HexX < mapHexX + ( MAP_SIZE * 0.75 ) )
            {
                hexX = mapHexX + ( MAP_SIZE * 0.75 );
            }
            else if( cr.HexX > mapHexX + ( MAP_SIZE * 0.75 ) && cr.HexX < mapHexX + ( MAP_SIZE * 0.90 ) )
            {
                hexX = mapHexX + ( MAP_SIZE * 0.90 );
            }
            else if( cr.HexY > mapHexX + ( MAP_SIZE * 0.90 ) && cr.HexX < mapHexX + ( MAP_SIZE * 0.99 ) )
            {
                hexX = cr.HexX;
                hexY = cr.HexY;

                uint8 side = 0;

                FindTransitHex( caravanMap, hexX, hexY, 10, side );

                unsafe_ExitGridClick( cr, hexX, hexY, EXIT_GRID_PID, null, null );
            }
        }
        else if( x < 0 )
        {
            if( cr.HexX > mapHexX + ( MAP_SIZE * 0.5 ) )
            {
                hexX = mapHexX + ( MAP_SIZE * 0.5 );
            }
            else if( cr.HexX < mapHexX + ( MAP_SIZE * 0.5 ) && cr.HexX > mapHexX + ( MAP_SIZE * 0.75 ) )
            {
                hexX = mapHexX + ( MAP_SIZE * 0.75 );
            }
            else if( cr.HexX < mapHexX + ( MAP_SIZE * 0.75 ) && cr.HexX > mapHexX + ( MAP_SIZE * 0.90 ) )
            {
                hexX = mapHexX + ( MAP_SIZE * 0.90 );
            }
            else if( cr.HexY < mapHexX + ( MAP_SIZE * 0.90 ) && cr.HexX > mapHexX + ( MAP_SIZE * 0.99 ) )
            {
                hexX = cr.HexX;
                hexY = cr.HexY;

                uint8 side = 0;

                FindTransitHex( caravanMap, hexX, hexY, 10, side );

                unsafe_ExitGridClick( cr, hexX, hexY, EXIT_GRID_PID, null, null );
            }
        }
    }

    if( y != 0 )
    {
        if( y > 0 )
        {
            if( cr.HexY < mapHexY + ( MAP_SIZE * 0.5 ) )
            {
                hexY = mapHexY + ( MAP_SIZE * 0.5 );
            }
            else if( cr.HexY > mapHexY + ( MAP_SIZE * 0.5 ) && cr.HexY < mapHexY + ( MAP_SIZE * 0.75 ) )
            {
                hexY = mapHexY + ( MAP_SIZE * 0.75 );
            }
            else if( cr.HexY > mapHexY + ( MAP_SIZE * 0.75 ) && cr.HexY < mapHexY + ( MAP_SIZE * 0.90 ) )
            {
                hexY = mapHexY + ( MAP_SIZE * 0.90 );
            }
            else if( cr.HexY > mapHexY + ( MAP_SIZE * 0.90 ) && cr.HexY < mapHexY + ( MAP_SIZE * 0.99 ) )
            {
                hexX = cr.HexX;
                hexY = cr.HexY;

                uint8 side = 0;

                FindTransitHex( caravanMap, hexX, hexY, 10, side );

                unsafe_ExitGridClick( cr, hexX, hexY, EXIT_GRID_PID, null, null );
            }
        }
        else if( y < 0 )
        {
            if( cr.HexY > mapHexY + ( MAP_SIZE * 0.5 ) )
            {
                hexY = mapHexY + ( MAP_SIZE * 0.5 );
            }
            else if( cr.HexY < mapHexY + ( MAP_SIZE * 0.5 ) && cr.HexY > mapHexY + ( MAP_SIZE * 0.75 ) )
            {
                hexY = mapHexY + ( MAP_SIZE * 0.75 );
            }
            else if( cr.HexY < mapHexY + ( MAP_SIZE * 0.75 ) && cr.HexY > mapHexY + ( MAP_SIZE * 0.90 ) )
            {
                hexY = mapHexY + ( MAP_SIZE * 0.90 );
            }
            else if( cr.HexY < mapHexY + ( MAP_SIZE * 0.90 ) && cr.HexY > mapHexY + ( MAP_SIZE * 0.99 ) )
            {
                hexX = cr.HexX;
                hexY = cr.HexY;

                uint8 side = 0;

                FindTransitHex( caravanMap, hexX, hexY, 10, side );

                unsafe_ExitGridClick( cr, hexX, hexY, EXIT_GRID_PID, null, null );
            }
        }
    }
}

void MoveCaravan( Caravan& caravan )
{
    uint16 hexX = 0, hexY = 0;
    FindLocalMapPath( caravan, hexX, hexY );

    for( uint8 i = 0, j = caravan.CaravanDudes.length(); i < j; ++i )
    {
        Critter @ cr = GetCritter( caravan.CaravanDudes[ i ] );
        if( cr is null )
            continue;

        AddWalkPlane( cr, 10, hexX, hexY, Random( 0, 5 ), false, 0 );
    }

}

// critter functions

void _InitCaravanChief( Critter& cr, bool firstTime )
{
    cr.SetEvent( CRITTER_EVENT_IDLE, "e_CaravanDudeIdle" );
}

void e_CaravanDudeIdle( Critter& cr )
{
    MoveCaravan( caravans[ cr.StatBase[ ST_VAR7 ] ] );
}


// user run functions

void AddCaravan( Critter& cr, int random, int, int )
{
    Caravan caravan;

    if( random != 0 )
    {
        caravan.FromTown = Random( 0, CARAVAN_TOWN_MAX );
        caravan.CaravanType = Random( 0, CARAVAN_TYPE_MAX );
    }

    caravans.insertLast( caravan );
}

void EditCaravan( Critter& cr, int id, int line, int value )
{
    if( uint( id ) < caravans.length() )
    {
        /*uint8 type = 0;
           switch(line)
           {
                    case 0 : type = LINE_FROMTOWN; break;
                    case 1 : type = LINE_TYPE; break;
                    default: break;
           }*/

        if( line == 0 )
            caravans[ id ].FromTown = value;
        else if( line == 1 )
            caravans[ id ].CaravanType = value;
        // else if(line == 2) {if(caravans.length() > 0) {if(caravans.length() > value) Regen(caravans[id]); caravans.resize(value) for(ui
    }
}

void RegenCaravan( Critter& cr, int id, int, int )
{
    if( uint( id ) < caravans.length() )
        Regen( caravans[ id ] );
}

void SpawnCaravan( Critter& cr, int id, int membersCount, int mapId )
{
    if( uint( id ) < caravans.length() && caravans[ id ].CaravanDudes.length() == 0 )
    {
        uint8 side = 0;

        Map @ map = GetMap( mapId != 0 ? mapId : FindCaravanCreatePos( side ) );
        if( map is null )
        {
            cr.Say( SAY_NETMSG, "spawn map !valid" );
            return;
        }

        SpawnCritter( map, 10, 1, side, id );
        Regen( caravans[ id ] );
    }
}

void InfoCaravan( Critter& cr, int id, int membersCount, int )
{
    for( uint8 i = 0, j = caravans.length(); i < j; ++i )
    {
        cr.Say( SAY_NETMSG, "caravan #" + i + " from " + caravans[ i ].FromTown + " crts " + caravans[ i ].CaravanDudes.length() + " itms " + caravans[ i ].CaravanInvs.length() );
    }
}
