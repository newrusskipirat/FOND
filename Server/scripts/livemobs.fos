// live mod
// ErlKing, pm

/*
   void _PatrMobInit(Critter& npc, bool firstTime)
   {
        npc.ModeBase[MODE_NO_HOME] = 1;

        uint16 locPid=npc.GetMap().GetLocation().GetProtoId();
        if(LOCATION_IS_CITY(locPid))
                //npc.StatBase[ST_REPLICATION_TIME]= 6 * 60 * __TimeMultiplier; // 6 real hours
                npc.StatBase[ST_REPLICATION_TIME]= __FullSecond+REAL_MINUTE(5);
        else
                npc.StatBase[ST_REPLICATION_TIME]= 0; // Newer

        ResetVars(npc);

        npc.ShowCritterDist1 = DISTANCE_ATTACK;
        npc.SetEvent(CRITTER_EVENT_SHOW_CRITTER_1, "_ShowPlayer");
        npc.SetEvent(CRITTER_EVENT_HIDE_CRITTER  , "_HidePlayer");// отсутствие "_1" это не ошибка, так надо.

        npc.SetEvent(CRITTER_EVENT_IDLE,        "_Patrol");
        npc.SetEvent(CRITTER_EVENT_MESSAGE,     "_OnMessage");
        npc.SetEvent(CRITTER_EVENT_PLANE_BEGIN, "_PlaneBegin");
        npc.SetEvent(CRITTER_EVENT_SMTH_DEAD,   "_Death");
        npc.SetEvent(CRITTER_EVENT_DEAD,        "_PatrMyDeath");
        npc.SetEvent(CRITTER_EVENT_ATTACKED,    "_Attacked");
   }

   void _MinionMobInit(Critter& npc, bool firstTime)
   {
        npc.ModeBase[MODE_NO_HOME] = 1;

        uint16 locPid=npc.GetMap().GetLocation().GetProtoId();
        if(LOCATION_IS_CITY(locPid))
                //npc.StatBase[ST_REPLICATION_TIME]= 6 * 60 * __TimeMultiplier; // 6 real hours
                npc.StatBase[ST_REPLICATION_TIME]= __FullSecond+REAL_MINUTE(5);
        else
                npc.StatBase[ST_REPLICATION_TIME]= 0; // Newer

        ResetVars(npc);

        npc.ShowCritterDist1 = DISTANCE_ATTACK;
        npc.SetEvent(CRITTER_EVENT_SHOW_CRITTER_1, "_ShowPlayer");
        npc.SetEvent(CRITTER_EVENT_HIDE_CRITTER  , "_HidePlayer");// отсутствие "_1" это не ошибка, так надо.

        npc.SetEvent(CRITTER_EVENT_IDLE,        "_Idle");
        npc.SetEvent(CRITTER_EVENT_MESSAGE,     "_OnMessage");
        npc.SetEvent(CRITTER_EVENT_PLANE_BEGIN, "_PlaneBegin");
        npc.SetEvent(CRITTER_EVENT_SMTH_DEAD,   "_Death");
        npc.SetEvent(CRITTER_EVENT_DEAD,        "_MinionMyDeath");
        npc.SetEvent(CRITTER_EVENT_ATTACKED,    "_Attacked");
   }



   // PATROL_CRITTER_EVENT_DEAD
   void _PatrMyDeath (Critter& dead, Critter@ killer)
   {
        if(dead.StatBase[ST_VAR2]!=0)
        //npc.StatBase[ST_VAR2], npc.StatBase[ST_VAR3], npc.StatBase[ST_VAR4], npc.StatBase[ST_VAR5]};
        dead.AddTimeEvent("cte_deleteCorpse",60*6,0);
   }


   // PATROL_LEADER_CRITTER_EVENT_IDLE
   void _Patrol(Critter& npc)
   {
        if(npc.GetMap().GetCritters(0, FIND_LIFE_AND_KO|FIND_ONLY_PLAYERS, null)==0) return;
        int rnd = Random(1,10);
        if(rnd <= 5) npc.MoveRandom(); //40% просто бродить
        else if(npc.Stat[ST_VAR1]!=0)
                {
                Map@ map=npc.GetMap();
                Item @[] checkpoints;
                Item@ checkpoint=map.GetItem(npc.StatBase[ST_VAR1]);
                if (!valid(checkpoint))
                        {
                        uint16 mobtype = npc.GetProtoId();
                        uint16 CheckType = 0;
                        switch(mobtype)
                        {
                        case NPC_PID_GoldenGecko:
                        case NPC_PID_ToughGoldenGecko:
                        case NPC_PID_SmallSilverGecko:
                        case NPC_PID_ToughSilverGecko: CheckType = 0; break;
                        case NPC_PID_MirelurkWeak:
                        case NPC_PID_MirelurkTough: CheckType = 0; break;
                        case NPC_PID_MutatedMolerat:
                        case NPC_PID_Molerat:
                        case NPC_PID_GreaterMolerat: CheckType = 0; break;
                        case NPC_PID_Mantis:
                        case NPC_PID_MediumMantis: CheckType = 0; break;
                        case NPC_PID_Alien:
                        case NPC_PID_ToughAlien: CheckType = 0; break;
                        case NPC_PID_Centaur:
                        case NPC_PID_MeanCentaur:
                        case NPC_PID_Floater:
                        case NPC_PID_NastyFloater: CheckType = 0; break;
                        case NPC_PID_SmallRadscorpion:
                        case NPC_PID_SmallRadscorpion2:
                        case NPC_PID_LargeRadscorpion:
                        case NPC_PID_LargeRadscorpion2:
                        case NPC_PID_LargeRadscorpion3: CheckType = 0; break;
                        case NPC_PID_Brahmin:
                        case NPC_PID_Brahmin2:
                        case NPC_PID_Brahmin3:
                        case NPC_PID_WeakBrahmin:
                        case NPC_PID_WildBrahmin: CheckType = 0; break;
                        case NPC_PID_Rat: CheckType = 0; break;
                        }
                        if (CheckType!=0) map.GetItems(CheckType,checkpoints);
                        @checkpoint=checkpoints[Random(0, checkpoints.length())];
                        }
                if(GetDistantion(checkpoint.HexX, checkpoint.HexY, npc.HexX, npc.HexY) > DISTANCE_ATTACK) // если делеко от чекпоинта
                        {
                        npc.SetHomePos(checkpoint.HexX + Random(0,5), checkpoint.HexY + Random(0,5), Random(0, 5));
                        TryGoHome(npc);
                        }
                else
                        {
                        uint[] vals = {checkpoint.Val1, checkpoint.Val2, checkpoint.Val3, checkpoint.Val4, checkpoint.Val5, checkpoint.Val6, checkpoint.Val7, checkpoint.Val8};
                        if (checkpoint.Val1!=0)
                                {
                                if (rnd>=9) @checkpoint=map.GetItem(vals[1]);
                                else { rnd = Random(1,8); if (vals[rnd]!=0) @checkpoint=map.GetItem(vals[rnd]); }
                                TryGoHome(npc);
                                }
                        else
                                {
                                DeleteNpc(GetCritter(npc.StatBase[ST_VAR2]));
                                DeleteNpc(GetCritter(npc.StatBase[ST_VAR3]));
                                DeleteNpc(GetCritter(npc.StatBase[ST_VAR4]));
                                DeleteNpc(GetCritter(npc.StatBase[ST_VAR5]));
                                DeleteNpc(npc);
                                }
                        }
                if(valid(npc) && npc.StatBase[ST_VAR2]!=0)
                        {
                        uint[] minions = {npc.StatBase[ST_VAR2], npc.StatBase[ST_VAR3], npc.StatBase[ST_VAR4], npc.StatBase[ST_VAR5]};
                                for(uint i=0,ii=minions.length();i<ii;i++)
                                {
                                if (minions[i]==0 || !valid(GetCritter(minions[i]))
                                        {
                                        if(i<ii)
                                                {
                                                minions[i]=minions[i+1];
                                                minions[i+1]=0;
                                                }
                                        else minions[i]=0;
                                        }
                                Critter@ minion = GetCritter(minions[i]);
                                if (!valid(minion) || minion.IsKnockout() || minion.IsDead()) continue;
                                else
                                        {
                                        if (npc.StatBase[ST_VAR1]!=npc.Id) continue;
                                        minion.SetHomePos(checkpoint.HexX + Random(0,5), checkpoint.HexY + Random(0,5), Random(0, 5));
                                        TryGoHome(minion);
                                        }
                                }
                        npc.StatBase[ST_VAR2]=minions[0];
                        npc.StatBase[ST_VAR3]=minions[1];
                        npc.StatBase[ST_VAR4]=minions[2];
                        npc.StatBase[ST_VAR5]=minions[3];
                        }
                }
   }

   void PopSpawn(Map& map) // спавн популяции мобов
   {
        GameVar@ rats=GetGlobalVar(GVAR_rats_population);
        GameVar@ molerats=GetGlobalVar(GVAR_molerats_population);
        GameVar@ gecko=GetGlobalVar(GVAR_gecko_population);
        GameVar@ scorpions=GetGlobalVar(GVAR_scorpions_population);
        GameVar@ dogs=GetGlobalVar(GVAR_dogs_population);

        GameVar@ firegecko=GetGlobalVar(GVAR_firegecko_population);
        GameVar@ alien=GetGlobalVar(GVAR_alien_population);
        GameVar@ deathclaw=GetGlobalVar(GVAR_deathclaw_population);
        GameVar@ flocent=GetGlobalVar(GVAR_floaterandcentaur_population);

   Critter@[] Dleaders;
   Critter@[] Dminions;
   Critter@[] Nleaders;
   Critter@[] Nminions;

        uint[] DPop={rats, molerats, gecko, scorpions, dogs} //массив популяций дневных мобов
        uint[] NPop={firegecko, alien, deathclaw, flocent} //массив популяций ночных мобов

   uint16 teamId = 0, popdif = 0; temp = 0; timer= map.GetTime();

    if(timer == 0) // ночь
    {
        Critter@[] Dcritters;
        map.GetCritters(GetCritInfo(map.GetProtoId(),i,0), FIND_LIFE | FIND_ONLY_NPC, Dcritters);  // счет дневных лидеров
        map.GetCritters(GetCritInfo(map.GetProtoId(),i,1), FIND_LIFE | FIND_ONLY_NPC, Dcritters);  // счет дневных миньонов
        for(uint8 i = 0; i < Dcritters.length(); i++)
                {
                if (Random(0;2)==0) sleeptime(Dcritters[i]); // отправка спать трети наличествующих дневных мобов
                }
        for(uint8 i = 0; i < GetCritInfo(map.GetProtoId(),i,3); i++) // запуск проверки популяции на каждый тип ночных мобов
                {
                mobtype=GetCritInfo(map.GetProtoId(),i,3);
                NightLeadersCount = map.GetCritters(GetCritInfo(map.GetProtoId(),i,0), FIND_LIFE | FIND_ONLY_NPC, Nleaders);  // счет ночных лидеров
                NightMinionsCount = map.GetCritters(GetCritInfo(map.GetProtoId(),i,1), FIND_LIFE | FIND_ONLY_NPC, Nminions);  // счет ночных миньонов
                popdif = map.GetCritters(GetCritInfo(map.GetProtoId(),i,0), FIND_LIFE | FIND_ONLY_NPC, NCritters)
 + map.GetCritters(GetCritInfo(map.GetProtoId(),i,0), FIND_LIFE | FIND_ONLY_NPC, NCritters)
                         - NPop[i]*GetCritInfo(map.GetProtoId(),i,0)/100)  // разница текущего населения и процента популяции, который должен быть на локе
                if (popdif >1)  // перенаселение
                        {
                        for(uint8 i = 0; i < popdif; i++)
                                {
                                (Random(0;2)!=0)?sleeptime(Nminions[Random(0;NightMinionsCount)]):sleeptime(Nleaders[NightLeadersCount]);
                                }
                        }
                else if (popdif <-1)  // недостаток населения
                {
                for(uint8 i = 0; i < popdif; i++)
                {
                Item @[] checkpoints;
                        switch(mobtype)
                        {
                        case NPC_PID_GoldenGecko:
                        case NPC_PID_ToughGoldenGecko:
                        case NPC_PID_SmallSilverGecko:
                        case NPC_PID_ToughSilverGecko: CheckType = 0; break;
                        case NPC_PID_MirelurkWeak:
                        case NPC_PID_MirelurkTough: CheckType = 0; break;
                        case NPC_PID_MutatedMolerat:
                        case NPC_PID_Molerat:
                        case NPC_PID_GreaterMolerat: CheckType = 0; break;
                        case NPC_PID_Mantis:
                        case NPC_PID_MediumMantis: CheckType = 0; break;
                        case NPC_PID_Alien:
                        case NPC_PID_ToughAlien: CheckType = 0; break;
                        case NPC_PID_Centaur:
                        case NPC_PID_MeanCentaur:
                        case NPC_PID_Floater:
                        case NPC_PID_NastyFloater: CheckType = 0; break;
                        case NPC_PID_SmallRadscorpion:
                        case NPC_PID_SmallRadscorpion2:
                        case NPC_PID_LargeRadscorpion:
                        case NPC_PID_LargeRadscorpion2:
                        case NPC_PID_LargeRadscorpion3: CheckType = 0; break;
                        case NPC_PID_Brahmin:
                        case NPC_PID_Brahmin2:
                        case NPC_PID_Brahmin3:
                        case NPC_PID_WeakBrahmin:
                        case NPC_PID_WildBrahmin: CheckType = 0; break;
                        case NPC_PID_Rat: CheckType = 0; break;
                        }
                        if (CheckType!=0) map.GetItems(CheckType,checkpoints);
                if (NightLeadersCount < NightMinionsCount*2)
                        {
                        Critter @ npc = map.AddNpc(GetCritInfo(map.GetProtoId(),i,3), checkpoints.hexX+Random(0,5), checkpoints.hexY+Random(0,5), Random(0,5), null, null, null); // спавн лидера
                        npc.StatBase[ST_AI_ID] = CheckNpcAi(npc.CrType);
                        teamId = Random(24, 33);
                        npc.StatBase[ST_TEAM_ID] = teamId;
                        _PatrMobInit(npc, true);
                        for(uint8 i = 0; i < Nminions.length(); i++) // привязка свободных миньонов к лидеру
                        {
                        if(Nminions[i].StatBase[ST_VAR1]==0)
                                {
                                if (npc.StatBase[ST_VAR5] == 0)
                                        {
                                        Nminions[i].StatBase[ST_TEAM_ID] = teamId;
                                        Nminions[i].StatBase[ST_VAR1] = npc.Id;
                                        if (npc.StatBase[ST_VAR2] == 0) npc.StatBase[ST_VAR2] = Nminions[i].Id;
                                        else if (npc.StatBase[ST_VAR3] == 0)
                                                {
                                                npc.StatBase[ST_VAR3] = npc.StatBase[ST_VAR2];
                                                npc.StatBase[ST_VAR2] = Nminions[i].Id;
                                                }
                                        else if (npc.StatBase[ST_VAR4] == 0)
                                                {
                                                npc.StatBase[ST_VAR4] = npc.StatBase[ST_VAR3];
                                                npc.StatBase[ST_VAR3] = npc.StatBase[ST_VAR2];
                                                npc.StatBase[ST_VAR2] = Nminions[i].Id;
                                                }
                                        else
                                                {
                                                npc.StatBase[ST_VAR5] = npc.StatBase[ST_VAR4];
                                                npc.StatBase[ST_VAR4] = npc.StatBase[ST_VAR3];
                                                npc.StatBase[ST_VAR3] = npc.StatBase[ST_VAR2];
                                                npc.StatBase[ST_VAR2] = Nminions[i].Id;
                                                }
                                        }
                                }
                        }
                        }
                else
                        {
                        Critter @ npc = map.AddNpc(GetCritInfo(map.GetProtoId(),i,3), checkpoints.hexX+Random(0,5), checkpoints.hexY+Random(0,5), Random(0,5), null, null, null); // спавн миньона
                        npc.StatBase[ST_AI_ID] = CheckNpcAi(npc.CrType);
                        _MinionMobInit(npc, true);
                        for(uint8 i = 0; i < Nleaders.length(); i++) // привязка свободных миньонов к лидеру
                        {
                        uint8 j= Random(0, i);
                        if(Nleaders[j].StatBase[ST_VAR5]==0)
                                {
                                npc.StatBase[ST_TEAM_ID] = teamId;
                                npc.StatBase[ST_VAR1] = Nleaders[j].Id;
                                if (Nleaders[j].StatBase[ST_VAR2] == 0) Nleaders[j].StatBase[ST_VAR2] = npc.Id;
                                        else if (npc.StatBase[ST_VAR3] == 0)
                                                {
                                                Nleaders[j].StatBase[ST_VAR3] = Nleaders[j].StatBase[ST_VAR2];
                                                Nleaders[j].StatBase[ST_VAR2] = npc.Id;
                                                }
                                        else if (Nleaders[j].StatBase[ST_VAR4] == 0)
                                                {
                                                Nleaders[j].StatBase[ST_VAR4] = Nleaders[j].StatBase[ST_VAR3];
                                                Nleaders[j].StatBase[ST_VAR3] = Nleaders[j].StatBase[ST_VAR2];
                                                Nleaders[j].StatBase[ST_VAR2] = npc.Id;
                                                }
                                        else
                                                {
                                                Nleaders[j].StatBase[ST_VAR5] = Nleaders[j].StatBase[ST_VAR4];
                                                Nleaders[j].StatBase[ST_VAR4] = Nleaders[j].StatBase[ST_VAR3];
                                                Nleaders[j].StatBase[ST_VAR3] = Nleaders[j].StatBase[ST_VAR2];
                                                Nleaders[j].StatBase[ST_VAR2] = npc.Id;
                                                }
                                        }
                                continue;
                                }
                        }
                        }
    else if(timer != 0) // день
    {


    }





                    }
                }
    }
   }

 */

/* ТЗ
 *
 * система чек поинтов
 *      поиск ближайшего
 *      связки чекпоинтов
 *
 * стаи
 *      спаун стаи
 *      перемещение стаи
 *      переход по локациям
 *      поиск нового лидера
 *      войны разных типов мобов
 *      ночные \ дневные мобы
 *
 * лидер
 *      тип поведения
 *      динамическое количество миньонов
 *
 *
 *
 * тех инфо
 *
 * чекпоинт -   value 0-3 установки перемещения
 *              value 4-5 id следущей точки
 *              //trapValue - тип моба
 *
 * лидер    -	cr.StatBase[ST_VAR9] - critterGroup
 *              cr.StatBase[ST_VAR8] - index
 *
 *
 *
 *
 *
 *
 */


/*		CHECKPOINTS		*/

#include "_macros.fos"
#include "npc_planes.fos"

#define         ITEM_CHECKPOINT     ( 3 )
#define         MAX_MINION_COUNT    ( 5 )
#define         LVAR_MINION_ID      ( LVAR_MinionId0 )

void SetCheckPointPath( Item& item, uint8 index, uint16  value )
{
    if( index >= 0 && index < 4 )
        switch( index )
        {
        case 0:
            item.Val0 = value;
            break;
        case 1:
            item.Val1 = value;
            break;
        case 2:
            item.Val2 = value;
            break;
        case 3:
            item.Val3 = value;
            break;

        default:
            break;
        }
}

void SetCheckPointCritters( Item& item, uint8 index, uint16  critterGroup )
{
    if( index >= 0 && index < 4 )
    {
        uint16 path0 = ( item.Val4 ) & 0xFFFF,
               path1 = ( item.Val4 >> 16 ) & 0xFFFF,
               path2 = ( item.Val5 ) & 0xFFFF,
               path3 = ( item.Val5 >> 16 ) & 0xFFFF,
               pathTemp = 0;

        switch( index )
        {
        case 0:
            !FLAG( path0, critterGroup ) ? SETFLAG( path0, critterGroup ) : UNSETFLAG( path0, critterGroup );
            break;
        case 1:
            !FLAG( path1, critterGroup ) ? SETFLAG( path1, critterGroup ) : UNSETFLAG( path1, critterGroup );
            break;
        case 2:
            !FLAG( path2, critterGroup ) ? SETFLAG( path2, critterGroup ) : UNSETFLAG( path2, critterGroup );
            break;
        case 3:
            !FLAG( path3, critterGroup ) ? SETFLAG( path3, critterGroup ) : UNSETFLAG( path3, critterGroup );
            break;
        default:
            break;
        }

        item.Val4 = ( ( path0 ) & 0xFFFF ) | ( ( path1 << 16 ) & 0xFFFF );
        item.Val5 = ( ( path2 ) & 0xFFFF ) | ( ( path3 << 16 ) & 0xFFFF );
    }
}

bool CheckCritterTypeCheckPoint( Item& item, uint8 index, uint16 critterGroup )
{
    if( index >= 0 && index < 4 )
    {
        uint16 path0 = ( item.Val4 ) & 0xFFFF,
               path1 = ( item.Val4 >> 16 ) & 0xFFFF,
               path2 = ( item.Val5 ) & 0xFFFF,
               path3 = ( item.Val5 >> 16 ) & 0xFFFF,
               pathTemp = 0;

        switch( index )
        {
        case 0:
            pathTemp = path0;
            break;
        case 1:
            pathTemp = path1;
            break;
        case 2:
            pathTemp = path2;
            break;
        case 3:
            pathTemp = path3;
            break;
        default:
            return false;
        }

        /*bool temp = */ if( FLAG( pathTemp, critterGroup ) || pathTemp == 0 )
            return true;
        // temp ? return true : return false;
    }

    return false;
}

Item@ FindNearesCheckPoint( Critter& cr )
{
    uint16 hexX = 0, hexY = 0;

    Item@  checkpoint;
    Item@[] @ points;
    Map@map = cr.GetMap();

    if( map is null )
    {
        cr.Say( SAY_NORM, "map is null" );
        return null;
    }

    cr.Say( SAY_NORM, "" + map.GetItems( ITEM_CHECKPOINT, points ) /*+" "+points[0].GetProtoId()*/ );

    if( points[ 0 ] is null )
    {
        cr.Say( SAY_NORM, "points is null" );
        return null;
    }

    for( uint16 i = 0; i < points.length(); ++i )
    {
        if( points[ i ] !is null )
        {
            int hexXTemp = ABS( points[ i ].HexX - cr.HexX ), hexYTemp = ABS( points[ i ].HexY - cr.HexY );
            if( ( hexX <  hexXTemp && hexY < hexYTemp ) && CheckCritterTypeCheckPoint( points[ i ], cr.StatBase[ ST_VAR8 ], cr.StatBase[ ST_VAR9 ] ) )
            {
                hexX = hexXTemp;
                hexY = hexYTemp;

                @checkpoint = points[ i ];
            }
        }
    }
    /*
       @checkpoint = map.GetItem(hexX, hexY, ITEM_CHECKPOINT);
       return @checkpoint;*/

    return null;
}

/*      TOOLS	*/

void AddCheckPoint( Critter& cr, int index, int hexX, int hexY )
{
    Item @ item = cr.GetMap().AddItem( ( hexX > 0 ? hexX : cr.HexX ), ( hexY > 0 ? hexY : cr.HexY ), ITEM_CHECKPOINT, 1 );
    if( item !is null )
    {
        SetCheckPointPath( item, index, cr.StatBase[ ST_VAR8 ] );
        cr.StatBase[ ST_VAR8 ] = item.Id;
    }
}

void EditLastCheckPoint( Critter& cr, int type, int index, int value )
{
    Item @ item = GetItem( cr.StatBase[ ST_VAR0 ] );
    if( item !is null )
    {
        if( type > 0 )
            SetCheckPointCritters( item, index, value );
        else
            SetCheckPointPath( item, index, value );
    }
}




/*		CRITTERS		*/


void _LeaderInit( Critter& npc, bool firstTime )
{
    npc.SetEvent( CRITTER_EVENT_IDLE,        "_Patrol" );
}

void _Patrol( Critter& npc )
{
    Item @ item = FindNearesCheckPoint( npc );
    if( item !is null )
    {
        SetCritterMove( npc, item.HexX, item.HexY );
    }
}

void SetCritterMove( Critter& leader, uint16 hexX, uint16 hexY )
{
    GameVar @ minionId;

    for( uint8 i = 0; i < MAX_MINION_COUNT; ++i )
    {
        @minionId = GetLocalVar( LVAR_MINION_ID + i, leader.Id );
        Critter @ minion = GetCritter( minionId.GetValue() );
        if( minion !is null )
        {
            AddWalkPlane( minion, 10, hexX, hexY, Random( 0, 5 ), false, 0 );
        }
    }
}

void SetLeaderMinion( Critter& leader, Critter& minion )
{
    GameVar @ minionId;

    for( uint8 i = 0; i < MAX_MINION_COUNT; ++i )
    {
        @minionId = GetLocalVar( LVAR_MINION_ID + i, leader.Id );
        if( minionId.GetValue() == 0 && uint( minionId.GetValue() ) != minion.Id )
            minionId = minion.Id;
    }
}


/*		DEBUG		*/
void test( Critter& cr, int pointsCount, int mobCout, int radius )
{
    for( uint8 i = 0; i < pointsCount; ++i )
    {
        uint16 hexX = cr.HexX + Random( radius - ( radius * radius ), radius ), hexY = cr.HexY + Random( radius - ( radius * radius ), radius );

        AddCheckPoint( cr, 0, hexX, hexY );

        Critter @ leader = cr.GetMap().AddNpc( 64, hexX + Random( 0, 4 ), hexY + Random( 0, 4 ), Random( 0, 5 ), null, null, null );
        if( leader is null )
        {
            cr.Say( SAY_NORM, "null leader" );
            continue;
        }
        leader.SetScript( "livemobs@_LeaderInit" );
        for( uint8 i = 0; i < MAX_MINION_COUNT; ++i )
        {
            Critter @ minion = cr.GetMap().AddNpc( 63, hexX + Random( 0, 4 ), hexY + Random( 0, 4 ), Random( 0, 5 ), null, null, null );
            SetLeaderMinion( leader, minion );
        }
    }
}

void test1( Critter& cr, int pointsCount, int mobCout, int radius )
{
    for( uint8 i = 0; i < pointsCount; ++i )
    {
        uint16 hexX = cr.HexX + Random( radius - ( radius * radius ), radius ), hexY = cr.HexY + Random( radius - ( radius * radius ), radius );

        AddCheckPoint( cr, 0, hexX, hexY );
    }
}

void test2( Critter& cr, int pointsCount, int mobCout, int radius )
{
    Item @ item = FindNearesCheckPoint( cr );
}
