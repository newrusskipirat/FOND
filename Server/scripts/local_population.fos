// sacramento population script

#include "_ai.fos"
#include "_macros.fos"
#include "_math.fos"
#include "_maps.fos"
#include "npc_planes.fos"

#include "cimp.fos"

// import void ChangeBrokeAndAmmo(Item& item) from "mapgen_paste_items.fos";
import void ActivateMobScript( Map& map ) from "mob";
import void SetDeterioration( Item& item, int wearProcent ) from "repair";


#define START_ENT         ( 30 )
#define END_ENT           ( 38 )
#define POPUL_MOD         ( 10 )
#define MAP_SACR_ID       ( 100 )
#define ITEM_ACCESSORY    ( 0 )

#define RESPAWN_TIME      ( 60 * 60 * 60 * __TimeMultiplier )

/*	    #define MAP_SUTTER_11					(60)
   #define MAP_SUTTER_11_DN				(61)
   #define MAP_SUTTER_12					(63)
   #define MAP_SUTTER_12_DN				(64)
   #define MAP_SUTTER_13					(65)
   #define MAP_SUTTER_13_DN				(66)
   #define MAP_SUTTER_14					(67)
   #define MAP_SUTTER_14_DN				(68)

   #define MAP_SUTTER_21					(69)
   #define MAP_SUTTER_21_DN				(70)
   #define MAP_SUTTER_24					(71)
   #define MAP_SUTTER_24_DN				(72)
   #define MAP_SUTTER_31					(73)
   #define MAP_SUTTER_31_DN				(74)
   #define MAP_SUTTER_34					(75)
   #define MAP_SUTTER_34_DN				(76)

   #define MAP_SUTTER_41					(77)
   #define MAP_SUTTER_41_DN				(78)
   #define MAP_SUTTER_42					(79)
   #define MAP_SUTTER_42_DN				(80)
   #define MAP_SUTTER_43					(81)
   #define MAP_SUTTER_43_DN				(82)
   #define MAP_SUTTER_44					(83)
   #define MAP_SUTTER_44_DN				(84)

   #define MAP_SUTTER_CENTER				(88)
   #define MAP_SUTTER_CENTER_DN				(89)
   #define MAP_SUTTER_CENTER_UP				(90)
 #define MAP_SUTTER_CENTER_UP_1				(91)*/

uint8 timeNum = 0;
/************
   debug
************/

uint8 CheckNpcAi( uint16 crType )
{
    uint8 retn = 0;
    switch( crType )
    {
    case 5:
        retn = AIPACKET_SCORPION;
        break;
    case 9:
        retn = AIPACKET_GENERIC_DOG;
        break;
    case 11:
        retn = AIPACKET_RAT;
        break;
    case 80:
        retn = AIPACKET_GECKO;
        break;
    case 83:
        retn = AIPACKET_GECKO;
        break;
    case 85:
        retn = AIPACKET_DEATHCLAW;
        break;
    case 113:
        retn = AIPACKET_RAT;
        break;
    case 117:
        retn = AIPACKET_RAT;
        break;
    case 119:
        retn = AIPACKET_SUPER_MUTANT;
        break;
    case 177:
        retn = AIPACKET_FLOATER;
        break;
    case 249:
        retn = AIPACKET_CENTAUR;
        break;
    default:
        retn = 0;
        break;
    }
    return retn;
}


void TeleportNpcToMap( Critter& npc )
{
    // Location @ loc = npc.GetMap().GetLocation();
    // Map @ map = loc.GetMapByIndex(0);
    // npc.TransitToMap(map.Id, 1);
    // Map @ map = GetMapByPid(GetCritInfo(npc.GetMap().GetProtoId(),0,4), 0);
    // npc.TransitToMap(map.Id, 1);
}

void runmobspawn( Critter& player, int param0, int param1, int param2 )
{
    Map @ map = player.GetMap();
    AddCritter( map );
}

void runitemspawn( Critter& player, int param0, int param1, int param2 )
{
    Map @ map = player.GetMap();
    FillContainer( map );
}

void ChangeBrokeAndAmmo( Item& item )
{
    if( item.IsDeteriorable() )                                         // check for detoirable weapon
    {
        SetDeterioration( item, Random( 30, 90 ) );                     // detoirate weapon to 30-90 percents
        if( item.AmmoCount > 0 )
        {
            item.AmmoCount = 0;
        }
    }
}

void testspawn( Critter& cr, int, int, int )
{
    _MapInit( cr.GetMap(), true );
}

void _MapInit( Map& map, bool firstTime )
{
    /* uint[] values = {map.Id};
       timeNum = CreateTimeEvent(__FullSecond+RESPAWN_TIME, "e_SpawnStuff", values, false);
       map.SetData(MAP_DATA_TIME, timeNum);
       timeNum = 0;*/
}

uint e_SpawnStuff( uint[] @ values )
{
//   uint8 itemPid = 0;
    Map @ map = GetMap( values[ 0 ] );
    if( !valid( map ) )
        return 0;
    FillContainer( map );
    SpawnLO( map );  //disabled by ErlKing
    // AddCritter(map);
    EraseTimeEvent( map.GetData( MAP_DATA_TIME ) );
    timeNum = CreateTimeEvent( __FullSecond + RESPAWN_TIME, "e_SpawnStuff", values, false );
    map.SetData( MAP_DATA_TIME, timeNum );
    timeNum = 0;
    return 0;
}

string msg;

void FillContainer( Map& map )  // filling containers with random items
{
    Item@[] containers;
    uint16 itemPid = 0;
    map.GetItemsByType( ITEM_TYPE_CONTAINER, containers );
    if( valid( containers ) && containers.length() != 0 )
    {
        Item @ item;
        for( uint16 i = 0; i < containers.length(); i++ )
        {
            Item@[] contBag;

            if( containers[ i ] is null )
                continue;
            if( containers[ i ].GetProtoId() == PID_LO_CONTAINER )
            {
                DeleteItem( containers[ i ] );
                continue;
            }

            containers[ i ].GetItems( ITEM_ACCESSORY, contBag );
            if( valid( contBag ) && contBag.length() == 0 )
            {
                itemPid = Random( 0, (sutterGroup.length()/3) - 1 );
		if(sutterGroup[itemPid*3]>Random(0,9))
			{
			@item = containers[ i ].AddItem( sutterGroup[ itemPid*3 + 2 ], Random( 1, sutterGroup[ itemPid*3 + 1 ] ), ITEM_ACCESSORY );
	                i += Random( 0, Random( 1, 4 ) );
			}
                if( valid( item ) )	ChangeBrokeAndAmmo( item );
            }
        }
    }
}


/*
   void AddCritter(Map& map) //310			//old spawn
   {
   Critter@[] npcs;
   uint16 hexX = 0, hexY = 0, crCount = 0, teamId = 0, temp = 0;
   //   msg = "critterTypes[i]";
   for(uint8 i = 0; i < GetCritInfo(map.GetProtoId(),i,3); i++)
   {/*
    hexX = Random(60, 140);
    hexY = Random(60, 140);//
    crCount = map.GetCritters(GetCritInfo(map.GetProtoId(),i,0), FIND_LIFE | FIND_ONLY_NPC, npcs);
   //     temp = ABS();
    if(crCount < ABS(GetCritInfo(map.GetProtoId(),i,1) / 5))
    {
      for(uint8 j = 0; j < map.CountEntire(GetCritInfo(map.GetProtoId(),i,2)); j++)
      {
        teamId = Random(24, 33);
        if(map.GetEntireCoords(GetCritInfo(map.GetProtoId(),i,2), j, hexX, hexY))
        {
          for(uint8 jj = GetCritInfo(map.GetProtoId(),i,1); jj > Random(GetCritInfo(map.GetProtoId(),i,1) / 2, GetCritInfo(map.GetProtoId(),i,1) - crCount); jj--)
          {
            if(map.IsHexPassed(hexX, hexY))
            {
              Critter @ npc = map.AddNpc(GetCritInfo(map.GetProtoId(),i,0), hexX, hexY, Random(0,5), null, null, null);
              npc.StatBase[ST_AI_ID] = CheckNpcAi(npc.CrType);
              npc.StatBase[ST_TEAM_ID] = teamId;
   //         if(valid(npc)) {msg = "hexX= "+npc.HexX+" hexY= "+npc.HexY; Log(msg);}
              hexX += Random(1,4);
              hexY -= Random(1,4);
            }
            else
            {
              hexX -= Random(1,4);
              hexY += Random(1,4);
            }
          }
        }
        else {msg =  GetCritInfo(map.GetProtoId(),i,2); Log(msg);}
      }
      ActivateMobScript(map);
    }
    /*
    else
     {

   //   crs[i].
   //   for(uint8 j = 0; j < map.CountEntire(critterSpawn[i]); j++)
        if(map.GetEntireCoords(1, 0, hexX, hexY))
        {
         for(uint8 ii = 0; ii < npcs.length(); ii++)
          {
            hexX = Random(60, 140);
            hexY = Random(60, 140);
            AddWalkPlane(npcs[ii], AI_PLANE_WALK_PRIORITY , hexX, hexY, Random(0,5), false, 0);
            AddMiscPlane(npcs[ii], AI_PLANE_WALK_PRIORITY-1, 0, "TeleportNpcToMap");
            AddWalkPlane(npcs[ii], AI_PLANE_WALK_PRIORITY-2 , hexX, hexY, Random(0,5), false, 0);
   //       msg = "crCount = "+crCount;
   //       Log(msg);

          }
        }
      }*
    }
   }*/

/****************************************
   /***********************GROUPS***********
   /***************************************/
/*int16 GetCritInfo(uint16 mapProto, uint16 i, uint8 type)			//old
   {
   switch(mapProto)
   {
    case 20: switch(type)
              {
                case 0: return critterTypes_20[i];
                case 1: return critterPopul_20[i];
                case 2: return critterSpawn_20[i];
                case 3: return critterTypes_20.length();
                case 4: return 18;
              }
    case 101: switch(type)
              {
                case 0: return critterTypes_101[i];
                case 1: return critterPopul_101[i];
                case 2: return critterSpawn_101[i];
                case 3: return critterTypes_101.length();
                case 4: return 100;
              }
    case 103: switch(type)
              {
                case 0: return critterTypes_101[i];
                case 1: return critterPopul_101[i];
                case 2: return critterSpawn_101[i];
                case 3: return critterTypes_101.length();
                case 4: return 100;
              }
   }
   return 0;
   }*/

#define CRITTER_FIELD_PID             ( 1 )
#define CRITTER_FIELD_POP             ( 2 )
#define CRITTER_FIELD_PNT             ( 3 )

#define CRITTER_FIELD_COUNT           ( 3 )

#define CRITTER_MAP_COUNT             ( 32 )
#define CRITTER_MAP_START             ( 60 )
/*						!!!use maps const from _maps.fos!!!
   #define CRITTER_MAP_SAT_11		(1)
   #define CRITTER_MAP_SAT_12		(2)
   #define CRITTER_MAP_SAT_13		(3)
   #define CRITTER_MAP_SAT_14		(4)

   #define CRITTER_MAP_SAT_CN		(5)
   #define CRITTER_MAP_SAT_CN_DN		(6)
 */

// //////////////////////////////////////////

#define CRITTER_COUNT                 ( 32 )
#define CRITTER_SPAWN_START           ( 200 )
#define CRITTER_PID_START             ( 310 )

#define CRITTER_RAT_SPAWN             ( 200 ) //	310	Крыса
#define CRITTER_MANTIS_SPAWN          ( 201 ) //	311	Мантис
#define CRITTER_ANT_SPAWN             ( 202 ) //	312	Муравей
#define CRITTER_PIGRAT_SPAWN          ( 203 ) //	313	Кротокрыс
#define CRITTER_GRIZZRAT_SPAWN        ( 204 ) //	314	Крот Гриззли
#define CRITTER_PIGRATM_SPAWN         ( 205 ) //	315	Кротокрыс мутант
#define CRITTER_GECKO_SPAWN           ( 206 ) //	316	Обычный геккон
#define CRITTER_GECKO_GOLD_SPAWN      ( 207 ) //	317	Золотой геккон
#define CRITTER_DOG_SPAWN             ( 208 ) //	318	Собака
#define CRITTER_SCORP_SLAMLL_SAPWN    ( 209 ) //	319	Скорпион
#define CRITTER_SCORP_BIG             ( 210 ) //	320	Большой скорпион
#define CRITTER_BRAHMIN               ( 211 ) //	321	Брамин
#define CRITTER_EVILPLANT_SPAWN       ( 212 ) //	322	Хищное растение
#define CRITTER_ALIEN_SPAWN           ( 213 ) //	323	Чужой
#define CRITTER_CLAW_SMAL_SPAWN       ( 214 ) //	324	Маленький коготь смерти
#define CRITTER_CLAW_SPAWN            ( 215 ) //	325	Коготь смерти
#define CRITTER_CLAW_GRAY_SPAWN       ( 216 ) //	326	Серый коготь смерти
#define CRITTER_GECKO_FIRE_SPAWN      ( 217 ) //	327	Огнедышащий геккон
#define CRITTER_CENTAUR_SPAWN         ( 218 ) //	328	Псевдо-кентавр
#define CRITTER_FLOATER_SPAWN         ( 219 ) //	329	Летатель
#define CRITTER_SWEMPER_SPAWN         ( 220 ) //	330	Болотник
#define CRITTER_RIPPER_M_SPAWN        ( 221 ) //	335	Потрошитель
#define CRITTER_RIPPER_F_SPAWN        ( 222 ) //	336	Потрошительница
#define CRITTER_RAIDER_M_SPAWN        ( 223 ) //	337	Бандит
#define CRITTER_RAIDER_F_SPAWN        ( 224 ) //	338	Бандитка
#define CRITTER_RAIDER_A_SPAWN        ( 225 ) //	339	Мародер //A == alien :D
#define CRITTER_RAIDER_B_SPAWN        ( 226 ) //	340	Рейдер //just abc :D
#define CRITTER_RAIDER_C_SPAWN        ( 227 ) //	341	Рейдерша
#define CRITTER_SLAVER_SPAWN          ( 228 ) //	342	Работорговец
#define CRITTER_RAIDER_D_SPAWN        ( 229 ) //	343	Мародер
#define CRITTER_RAIDER_E_SPAWN        ( 230 ) //	344	Налетчик
#define CRITTER_RAIDER_F_SPAWN        ( 231 ) //	345	Налетчица

#define CRITTER_RAT_PID               ( 310 ) //	Крыса
#define CRITTER_MANTIS_PID            ( 311 ) //	Мантис
#define CRITTER_ANT_PID               ( 312 ) //	Муравей
#define CRITTER_PIGRAT_PID            ( 313 ) // Кротокрыс
#define CRITTER_GRIZZRAT_PID          ( 314 ) //	Крот Гриззли
#define CRITTER_PIGRATM_PID           ( 315 ) //	Кротокрыс мутант
#define CRITTER_GECKO_PID             ( 316 ) //	Обычный геккон
#define CRITTER_GECKO_GOLD_PID        ( 317 ) //	Золотой геккон
#define CRITTER_DOG_PID               ( 318 ) //	Собака
#define CRITTER_SCORP_SLAMLL_SAPWN    ( 319 ) //	Скорпион
#define CRITTER_SCORP_BIG             ( 320 ) //	Большой скорпион
#define CRITTER_BRAHMIN               ( 321 ) //	Брамин
#define CRITTER_EVILPLANT_PID         ( 322 ) //	Хищное растение
#define CRITTER_ALIEN_PID             ( 323 ) //	Чужой
#define CRITTER_CLAW_SMAL_PID         ( 324 ) //	Маленький коготь смерти
#define CRITTER_CLAW_PID              ( 325 ) //	Коготь смерти
#define CRITTER_CLAW_GRAY_PID         ( 326 ) //	Серый коготь смерти
#define CRITTER_GECKO_FIRE_PID        ( 327 ) //	Огнедышащий геккон
#define CRITTER_CENTAUR_PID           ( 328 ) //	Псевдо-кентавр
#define CRITTER_FLOATER_PID           ( 329 ) //	Летатель
#define CRITTER_SWEMPER_PID           ( 330 ) //	Болотник
#define CRITTER_RIPPER_M_PID          ( 335 ) //	Потрошитель
#define CRITTER_RIPPER_F_PID          ( 336 ) //	Потрошительница
#define CRITTER_RAIDER_M_PID          ( 337 ) //	Бандит
#define CRITTER_RAIDER_F_PID          ( 338 ) //	Бандитка
#define CRITTER_RAIDER_A_PID          ( 339 ) //	Мародер //A == alien :D
#define CRITTER_RAIDER_B_PID          ( 340 ) //	Рейдер //just abc :D
#define CRITTER_RAIDER_C_PID          ( 341 ) //	Рейдерша
#define CRITTER_SLAVER_PID            ( 342 ) //	Работорговец
#define CRITTER_RAIDER_D_PID          ( 343 ) //	Мародер
#define CRITTER_RAIDER_E_PID          ( 344 ) //	Налетчик
#define CRITTER_RAIDER_F_PID          ( 345 ) //	Налетчица

#define CRITTER_RAT_COUNT             ( 5 ) //	Крыса
#define CRITTER_MANTIS_COUNT          ( 6 ) //	Мантис
#define CRITTER_ANT_COUNT             ( 6 ) //	Муравей
#define CRITTER_PIGRAT_COUNT          ( 4 ) // Кротокрыс
#define CRITTER_GRIZZRAT_COUNT        ( 1 ) //	Крот Гриззли
#define CRITTER_PIGRATM_COUNT         ( 1 ) //	Кротокрыс мутант
#define CRITTER_GECKO_COUNT           ( 4 ) //	Обычный геккон
#define CRITTER_GECKO_GOLD_COUNT      ( 2 ) //	Золотой геккон
#define CRITTER_DOG_COUNT             ( 3 ) //	Собака
#define CRITTER_SCORP_SLAMLL_SAPWN    ( 3 ) //	Скорпион
#define CRITTER_SCORP_BIG             ( 2 ) //	Большой скорпион
#define CRITTER_BRAHMIN               ( 3 ) //	Брамин
#define CRITTER_EVILPLANT_COUNT       ( 5 ) //	Хищное растение
#define CRITTER_ALIEN_COUNT           ( 1 ) //	Чужой
#define CRITTER_CLAW_SMAL_COUNT       ( 2 ) //	Маленький коготь смерти
#define CRITTER_CLAW_COUNT            ( 1 ) //	Коготь смерти
#define CRITTER_CLAW_GRAY_COUNT       ( 1 ) //	Серый коготь смерти
#define CRITTER_GECKO_FIRE_COUNT      ( 1 ) //	Огнедышащий геккон
#define CRITTER_CENTAUR_COUNT         ( 2 ) //	Псевдо-кентавр
#define CRITTER_FLOATER_COUNT         ( 3 ) //	Летатель
#define CRITTER_SWEMPER_COUNT         ( 2 ) //	Болотник
#define CRITTER_RIPPER_M_COUNT        ( 3 ) //	Потрошитель
#define CRITTER_RIPPER_F_COUNT        ( 3 ) //	Потрошительница
#define CRITTER_RAIDER_M_COUNT        ( 2 ) //	Бандит
#define CRITTER_RAIDER_F_COUNT        ( 2 ) //	Бандитка
#define CRITTER_RAIDER_A_COUNT        ( 2 ) //	Мародер //A == alien :D
#define CRITTER_RAIDER_B_COUNT        ( 2 ) //	Рейдер //just abc :D
#define CRITTER_RAIDER_C_COUNT        ( 2 ) //	Рейдерша
#define CRITTER_SLAVER_COUNT          ( 2 ) //	Работорговец
#define CRITTER_RAIDER_D_COUNT        ( 2 ) //	Мародер
#define CRITTER_RAIDER_E_COUNT        ( 2 ) //	Налетчик
#define CRITTER_RAIDER_F_COUNT        ( 2 ) //	Налетчица


bool critters_inited = false;

uint16[][] CritterInfo( ( CRITTER_MAP_COUNT + 1 )* CRITTER_FIELD_COUNT );

bool CritterInfoInit()
{

    uint16[] @ data0;
    uint16[] @ data1;
    uint16[] @ data2;

    uint16[] pids( 0 );
    uint16[] count( 0 );
    uint16[] spawns( 0 );

//	Log("len "+CritterInfo.length());
    // CritterInfo.resize((CRITTER_MAP_COUNT + 1) * CRITTER_FIELD_COUNT);

    for( uint16 i = 0; i < CRITTER_COUNT; ++i )
    {
        pids.insertLast( CRITTER_PID_START + i );
        count.insertLast( 6 );      /*CRITTER_PID_START+i*/
        spawns.insertLast( CRITTER_SPAWN_START + i );
    }


    for( uint8 i = 0; i < CRITTER_MAP_COUNT; i++ )
    {

        @data0 = CritterInfo[ i * CRITTER_FIELD_COUNT + CRITTER_FIELD_PID ];
        // data = pids;

        @data1 = CritterInfo[ i * CRITTER_FIELD_COUNT + CRITTER_FIELD_POP ];
        // data = spawns;

        @data2 = CritterInfo[ i * CRITTER_FIELD_COUNT + CRITTER_FIELD_COUNT ];
        // data = count;

        for( uint16 i = 0; i < CRITTER_COUNT; ++i )
        {
            data0.insertLast( CRITTER_PID_START + i );
            data1.insertLast( CRITTER_SPAWN_START + i );
            data2.insertLast( 6 );          /*CRITTER_PID_START+i*/
        }

    }
    // critter proto id section
    // data.insertLast();

    critters_inited = true;

    return true;

}
/*
   int	GetMapIndexByPid(uint16 pid){
        if(pid <= 0) return -1;

        int index;

        switch(pid){
                case MAP_SUTTER_11	:	index = CRITTER_MAP_SAT_11; break;

        }
   }
 */
void AddCritter( Map& map )
{

    if( !critters_inited )
        CritterInfoInit();

    if( map.GetProtoId() < MAP_SUTTER_11 || map.GetProtoId() > MAP_SUTTER_CENTER_UP_1 )
        return;

    uint16 index = ( map.GetProtoId() - CRITTER_MAP_START );
    // Log("index "+index+" pr "+map.GetProtoId()+" s "+CRITTER_MAP_START);
    uint16[] @pids = CritterInfo[ index * CRITTER_FIELD_COUNT + CRITTER_FIELD_PID ];
    uint16[] @counts = CritterInfo[ index * CRITTER_FIELD_COUNT + CRITTER_FIELD_PNT ];
    uint16[] @spawns = CritterInfo[ index * CRITTER_FIELD_COUNT + CRITTER_FIELD_POP ];

    // Log("lens "+pids.length()+" "+counts.length()+" "+spawns.length());

    if( pids.length() != counts.length() || pids.length() != spawns.length() || spawns.length() != counts.length() )
    {
        Log( "len error" );
        return;
    }

	uint16[] max_count = {GetLocalVar( LMVAR_CRITTER_RegularRat, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_Mantis, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_Ant, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_RegularPigRat, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_Molerat, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_MutatedMolerat, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_SmallSilverGecko, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_GoldenGecko, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_WildDog, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_SmallRadscorpion, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_LargeRadscorpion, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_Brahmin, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_SporePlant, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_Alien, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_SmDeathclaw, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_Deathclaw, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_ToughDeathclaw, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_FireGecko, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_Centaur, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_Floater, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_MirelurkWeak, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_RipperMale, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_RipperFemale, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_BanditMale, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_BanditFemale, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_MauraderMale, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_RaiderMale, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_RaiderFemale, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_MaleSlaver, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_MaleSlaver2, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_ToughMaleThug, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_ToughFemaleThug, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_MaleTrapper, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_GreenGhoul, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_WhiteGhoul, map.Id ).GetValue(),
	GetLocalVar( LMVAR_CRITTER_Supermutant, map.Id ).GetValue()};

    for( uint8 i = 0, j = pids.length(); i < j; ++i )
    {
        uint8  jj = map.CountEntire( spawns[ i ] );
        uint8  entNum = spawns[ i ];
        uint16 pid = pids[ i ];
		uint16 cur_count = map.GetCritters( pid, FIND_LIFE_AND_KO | FIND_ONLY_NPC, null );

		if ( cur_count >= max_count[i] ) continue;
        // Log(" ent "+entNum);
        uint8  teamId = Random( 24, 33 );

        for( uint8 ii = 0; ii < jj; ++ii )
        {

            uint16 hexX = 0, hexY = 0, tempX = 0, tempY = 0;

            map.GetEntireCoords( entNum, ii, hexX, hexY );

            tempX = hexX;
            tempY = hexY;

            uint8 count = counts[ i ];

            for( uint8 iii = 0; iii < count; ++iii )
            {

                while( !map.IsHexPassed( tempX, tempY ) )
                {
                    tempX = hexX + Random( -10, 10 );
                    tempY = hexY + Random( -10, 10 );

                }
                ;

                if ( cur_count < max_count[i] )
				{
				Critter @ npc = map.AddNpc( pid, tempX, tempY, Random( 0, 5 ), null, null, "mob@_MobInit" );
				cur_count++;

                if( npc is null )
                    continue;

                npc.StatBase[ ST_AI_ID ] = CheckNpcAi( npc.CrType );
                npc.StatBase[ ST_TEAM_ID ] = teamId;
				}

                // Log("aad");
            }
        }
    }
}
/*
   int16 GetCritInfo(uint16 mapProto, uint16 index, uin)
   {
   switch(mapProto)
   {
    case 20: switch(type)
              {
                case 0: return critterTypes_20[i];
                case 1: return critterPopul_20[i];
                case 2: return critterSpawn_20[i];
                case 3: return critterTypes_20.length();
                case 4: return 18;
              }
    case 101: switch(type)
              {
                case 0: return critterTypes_101[i];
                case 1: return critterPopul_101[i];
                case 2: return critterSpawn_101[i];
                case 3: return critterTypes_101.length();
                case 4: return 100;
              }
    case 103: switch(type)
              {
                case 0: return critterTypes_101[i];
                case 1: return critterPopul_101[i];
                case 2: return critterSpawn_101[i];
                case 3: return critterTypes_101.length();
                case 4: return 100;
              }
   }
   return 0;
   }
 */
// modoc ghost farm mobs

const uint16[] critterTypes_20 =
{
    80,                 // gold gecko
    83                  // silv gecko
};

const uint8[] critterPopul_20 =
{
    10,                 // gold gecko
    10                  // silv gecko
};

const uint8[] critterSpawn_20 =
{
    52,                 // gold gecko
    151                 // silv gecho
};


// sutter east mobs

const uint16[] critterTypes_101 =
{
    5,                  // radscorpion
    9,                  // dog
    11,                 // rat
    85,                 // little deathclow
    113,                // bigrat
    117,                // verybig rat =)
    119,                // supermutant
    246,                // floater
    249                 // centaurus
};

const uint8[] critterPopul_101 =
{
    20,                 // radscorpion
    20,                 // dog
    40,                 // rat
    5,                  // little deathclow
    20,                 // bigrat
    7,                  // verybig rat =)
    5,                  // supermutant
    5,                  // floater
    5                   // centaurus
};

const uint8[] critterSpawn_101 =
{
    34,                 // radscorpion
    30,                 // dog
    31,                 // rat
    38,                 // little deathclow
    32,                 // bigrat
    33,                 // verybig rat =)
    37,                 // supermutant
    35,                 // floater
    36                  // centaurus
};

const uint16[] sutterGroup =
{
/*1- шанс от 0 до 10,
	макс количество спавна,
		прототип итема*/
10,	1,	PID_FLARE,	//фонарик
10,	2,	PID_ROCK,	//камень
10,	5,	PID_FLARE,
10,	5,	PID_ROCK,
10,	5,	PID_PLANT_SPIKE,
1,	1,	PID_STIMPAK,
1,	1,	PID_ANTIDOTE,
5,	1,	PID_ROT_GUT,
10,	50,	PID_REAL_BOTTLE_CAPS,
7,	1,	PID_KNIFE,
4,	2,	PID_ROPE,
10,	9,	PID_CRAFT_L_RAGS,
3,	1,	PID_GECKO_PELT,
10,	1,	PID_GOLDEN_GECKO_PELT,
10,	2,	PID_FLINT,
10,	2,	PID_EMPTY_JET,
10,	2,	PID_BOTTLE_GLASS,
8,	3,	PID_BOTTLE_EMPTY,
10,	10,	PID_PART_OF_ROPE,
9,	3,	PID_CRAFT_M_BARS,
8,	3,	PID_METAL_ORE,
7,	2,	PID_MINERAL,
7,	1,	PID_TUBE,
5,	1,	PID_CRAFT_M_STEL,
1,	1,	PID_BRAHMIN_SKIN,
4,	1,	PID_CIGARETTES,
1,	1,	PID_SHOVEL,
3,	1,	PID_PLANK,
2,	1,	PID_AXE,
3,	1,	PID_LIGHTER,
4,	1,	PID_ZIP_GUN,
10,	10,	PID_10mm_LOW,
7,	10,	PID_044mag_LOW,
3,	12,	PID_14mm_LOW,
5,	15,	PID_12g_LOW,
3,	10,	PID_223_LOW,
1,	1,	PID_CUENCELL_LOW,
10,	7,	PID_MUSH_LOW,
1,	1,	PID_RAD_LOW,
10,	1,	PID_RAD_MEAT,
10,	1,	PID_IRON_PROD,
8,	1,	PID_WOOD_PLANK,
5,	1,	PID_WATER_TUBE,
1,	1,	PID_SPEARTHROWER1,
10,	1,	PID_CHAIN,
1,	1,	PID_REVOLVER_LOW,
1,	1,	PID_PISTOL_LOW,
3,	1,	PID_IRON_PLATE,
6,	1,	PID_IRON_BAR,
2,	1,	PID_IRON_DETALS,
5,	1,	PID_PB_PLATE,
5,	2,	PID_PB_FOR_AMMO,
6,	3,	PID_KOSYAK,
8,	1,	PID_PERED_MEH,
5,	1,	PID_SOED_MEH,
4,	1,	PID_OHLAD_MEH,
8,	1,	PID_DETAL_MEH,
1,	1,	PID_EMKOCT_MEH,
4,	1,	PID_HLAM_MEH,
7,	1,	PID_HLAM2_MEH,
9,	1,	PID_BANKA_MEH,
4,	1,	PID_SPIKE_MEH,
3,	1,	PID_ELECTO_MEH,
3,	1,	PID_CRAFT_L_HIDE,
1,	1,	PID_MAG_LENTA,
1,	1,	PID_SAMURAI_MAG,
4,	1,	PID_DVIGAT_MEH,
7,	1,	PID_METAL_LIST_MEH,
2,	1,	PID_PILLS,
1,	1,	PID_ANTISEPTIC,
6,	3,	PID_HEALING_POWDER,
1,	1,	PID_HYPODERMIC_NEEDLE,
5,	2,	PID_BANDAGE,
1,	1,	PID_MEDCLIP,
1,	1,	PID_MEDSPLINT,
2,	1,	PID_MEDTHREAD,
4,	1,	PID_MEDNEEDLE,
1,	1,	PID_ANESTETIC
};

void additemsrndpic( Critter& cr, int id, int x, int y )
{
    Map @ map = cr.GetMap();
    if( map is null )
    {
        cr.Say( SAY_NETMSG, "map" );
        return;
    }

    for( uint8 i = 0; i < x; ++i )
    {
        Item @ item = map.AddItem( cr.HexX + ( Random( -10, 10 ) ), cr.HexY + ( Random( -10, 10 ) ), 2004, 1 );
        if( item is null )
            continue;
        /*
           string = "";
           brl1000.frm
         * brl2000.frm
         * tirs002.frm
         * weed05.frm
         * weed08.frm
         * boxes1.frm
         * boxes2.frm
         * boxes3.frm
         * boxes4.frm
         * car2.frm
         * car4.frm
         * chair1.frm
         * chair3.frm
         * njunk5.frm
         * njunk6.frm
         * trash3.frm
         * trash1.frm
         */

        uint hash = GetStrHash( "art\\scenery\\corpse1.png" );


        item.SetMapPic( hash );

        cr.Say( SAY_NETMSG, "add " + hash );
    }

}



void setpic( Critter& cr, int id, int x, int y )
{
    Item @ item = GetItem( id );
    if( item is null )
        return;
    string temp = "art\\scenery\\";
    temp += "boxes3.frm";
    item.SetMapPic( GetLOHash( GROUP_TRASH ) );
    item.Update();
}

void itemrndpic( Critter& cr, int id, int x, int y )
{
    // Item @ item = GetItem(id);
    // if(item is null) return;

    // uint hash = GetStrHash("art\\scenery\\corpse1.png");
    // item.SetMapPic(hash);

    CLO @ clo = CLO( GROUP_TRASH, 100, false );
    Map @ map = cr.GetMap();
    if( clo is null )
    {
        cr.Say( SAY_NETMSG, "clo null" );
    }
    if( map is null )
    {
        cr.Say( SAY_NETMSG, "map null" );
    }

    string msg_ = "fail.";

    if( clo.Add( map ) )
    {
        msg_ = ( "succesfull " + clo.HexX + ":" + clo.HexY + "\n clo : " + clo.Hash );

        if( !cr.TransitToHex( clo.HexX, clo.HexY, 1 ) )
        {
            cr.ShowContainer( cr, clo.object, 0 );
        }
    }

    cr.Say( SAY_NETMSG, msg_ );
}
void forcespawn( Critter& cr, int id, int x, int y )
{
    Map @ map = ( id <= 0 ? cr.GetMap() : GetMap( id ) );
    if( map is null )
    {
        cr.Say( SAY_NETMSG, "null map" );
        return;
    }
    if( x > 0 )
    {
        FillContainer( map );
    }
    SpawnLO( map );
}




bool SpawnLO( Map& map )
{
    int rechLvl = MAX_RECH_LEVEL;
    for( uint16 i = 0; i < MAX_LO_COUNT; ++i )
    {
        uint8 temp = Random( 1, 99 );
        rechLvl -= temp;
        if( rechLvl > 0 )
            CLO( Random( 0, GROUP_LENGTH - 1 ), temp, false ).Add( map );
    }
    return true;
}

void SpawnItemCell( Map& map )
{
	FillContainer( map );
	SpawnLO( map );
}
