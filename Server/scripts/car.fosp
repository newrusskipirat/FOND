

bool LocIsModoc(uint locPid)
{
	return(locPid<=(1253));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(32)||locPid==(1216)||locPid==(43)||locPid==96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(42));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

shared interface Project
{
	string@get_Name();
	void Build();
	void SetAssociation(string@ex,string@className,string@classModule);
}

shared interface FileObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	void FormatStringData(string&nameData,string&data);
	FileObject@get_Pattern(string&name)const;
	FileObject@get_Copy(string&name); 
	
	void set_GlobalData(string@name,string@value);          
	
	string@get_GlobalData(string@name);            
	
}

shared class TimeLog
{
	uint tick;
	
	TimeLog()
	{
		refresh();
	}
	
	void refresh()
	{
		tick=GetTick();
	}
	
	bool check(uint count)
	{
		return(GetTick()-tick>=count);
	}
	
	uint get()
	{
		uint old=tick;
		refresh();
		return(tick-old);
	}
	
	void Log(string&in message)
	{
		::ClearLog(message+" ["+(GetTick()-tick)+"ms]");
	}
}

shared interface AnyDataObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	uint[]@get_SaveData();
	void InitData(uint[]&data);
}

shared interface ManagerObject
{
	FileObject@get_ProtoObject(string@name);
	void ParseProtoTypes(const string&ex,const FileObject&pattern,const string@search);
	FileObject@ParseProtoTypeFile(string&name,const string&ex,const FileObject&pattern,const string@search);
	FileObject@AddPrototype(FileObject@proto);
	FileObject@StringToFileObject(string&name,string&txt,const FileObject&pattern);
}

shared interface ValueAPI{}
shared class SettingsAPI
{
	string Name;
	bool IsDebug;
} 

shared class GlobalData
{
	uint Hash;
	string Value;
	
	GlobalData(string@name)
	{
		Hash=GetStrHash(name);
		Value="";
	} 
	
	void SaveData(uint[]&outArray,uint&position)
	{
		uint len=Value.length();
		
		outArray.resize(position+2+len/2);
		
		outArray[position++]=Hash;
		outArray[position++]=len;
		
		for(uint i=0;i<len;i++)
		{
			outArray[position]|=Value[i++]<<24;
			outArray[position]|=Value[i++]<<16;
			outArray[position]|=Value[i++]<<8;
			outArray[position++]|=Value[i];
		}
	} 
	
	void LoadData(uint[]&in outArray,uint&position)
	{
		Hash=outArray[position++];
		uint len=outArray[position++];
		Value.resize(len);
		
		for(uint i=0;i<len;i++)
		{
			Value[i++]=(outArray[position]>>24)&0xFF;
			Value[i++]=(outArray[position]>>16)&0xFF;
			Value[i++]=(outArray[position]>>8)&0xFF;
			Value[i]=outArray[position++]&0xFF;
			
		}
	}
} 

shared class Hexagonal
{
	Hexagonal(){Reset();}
	Hexagonal(const uint16&in x,const uint16&in y){Set(x,y);}
	Hexagonal(const Hexagonal&master){Set(master);}
	
	Hexagonal(const Critter&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Item&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Scenery&master){Set(master.HexX,master.HexY);}
	
	bool Entire(Map&map,int entNum){return map.GetEntireCoords(entNum,0,X,Y);}
	bool IsPassed(Map&map){return ValidPosition(map)&&map.IsHexPassed(X,Y);}
	bool IsPassed(Map&map,Hexagonal&begin,Hexagonal&end){return ValidPosition(map,begin,end)&&map.IsHexPassed(X,Y);}
	
	bool ValidPosition(Map&map)
	{
		Hexagonal end,begin;
		if(end.Entire(map,0)&&begin.Entire(map,255))
		return ValidPosition(map,begin,end);
		return false;
	}
	
	bool ValidPosition(Map&map,Hexagonal&begin,Hexagonal&end)
	{
		return(X>=begin.X&&Y>=begin.Y
		&&X<=end.X&&Y<=end.Y);
	}
	
	bool Transit(Critter&critter,Map&map){return Transit(critter,map,critter.Dir);}
	bool Transit(Critter&critter,Map&map,uint8 direction)
	{
		if(!IsPassed(map))return false;
		return critter.TransitToMap(map.Id,X,Y,direction);
	}
	
	bool Transit(Critter&critter,uint mapId){return Transit(critter,mapId,critter.Dir);}
	bool Transit(Critter&critter,uint mapId,uint8 direction)
	{
		if(mapId==0)return false;
		Map@map=GetMap(mapId);
		if(@map is null)return false;
		return Transit(critter,map,direction);
	} 
	
	void Set(const uint16&in x,const uint16&in y){X=x;Y=y;}
	void Set(const Hexagonal&in other){Set(other.X,other.Y);}
	void Reset(){X=Y=0;}
	uint Distantion(Hexagonal&other){return GetDistantion(X,Y,other.X,other.Y);}
	
	uint16 X;
	uint16 Y;
	
	bool opEquals(const Hexagonal&in other){return(other.X==X&&other.Y==Y);}
	Hexagonal&opAssign(const Hexagonal&in other)
	{
		Set(other);
		return this;
	}
	
	const uint get_UID(const uint w)const{return X+Y*w;}
	string get_Debug(){return"X:"+X+"Y:"+Y;}
	void Log(string&str){::Log(str+":"+Debug);}
}    

shared class MapHash
{
	MapHash(const uint16&in protoId)
	{
		ProtoId=protoId;
		@Min=null;
		@Max=null;
	}
	
	MapHash&opAssign(Map&map)
	{
		@Min=Hexagonal(0,0);
		@Max=Hexagonal(0,0);
		map.GetEntireCoords(0,0,Max.X,Max.Y);
		map.GetEntireCoords((255),0,Min.X,Min.Y);
		return this;
	}
	
	uint16 ProtoId;
	Hexagonal@Min;
	Hexagonal@Max;
} 

shared class Line
{
	Line(Hexagonal&a,Hexagonal&b){@A=a;@B=b;}
	
	uint get_Length()
	{
		return B.Distantion(A);
	}
	
	uint get_Point(Hexagonal&point)
	{
		return B.Distantion(point);
	}
	
	float get_Module(Hexagonal&point)
	{
		return Point[point]/Length;
	}
	
	Hexagonal@get_opIndex(const uint&in size)
	{
		
		const float mod=float(size/Length);
		return@Hexagonal(A.X+(B.X-A.X)*mod,A.Y+(B.Y-A.Y)*mod);
	} 
	
	Line(Map&map,uint16 grid,MapHash@hash)
	{
		if(@hash is null)
		{
			Hexagonal min,max;
			map.GetTransferParams(min.X,min.Y,max.X,max.Y,grid);
			
			@A=@Hexagonal(min.X,min.Y);
			@B=@Hexagonal(max.X,max.Y);
		}
		else
		{
			if(@hash.Min is null||@hash.Max is null)
			map.GetTransferParams(hash.Min.X,hash.Min.Y,hash.Max.X,hash.Max.Y,grid);
			
			@A=@Hexagonal(hash.Min.X,hash.Min.Y);
			@B=@Hexagonal(hash.Max.X,hash.Max.Y);
		}
	} 
	
	string get_Debug(){return"A<"+A.Debug+">B<"+B.Debug+">";}
	void Log(string&str){::Log(str+":"+Debug);}
	
	Hexagonal@A;
	Hexagonal@B;
}  

import MapHash@GetMapHash(const uint16&in pid)from"world";
import uint CreateLocation(Hexagonal&coordinate,uint16 locationPid)from"world"; 

import ManagerObject@get_objectManager()from"world"; 

import EventTree@get_EventRoot()from"world"; 

import Project@CreateProject(string@name,string@path)from"main";
import Project@get_Project(string@name)from"main

import bool IsKeyAviable(Critter&cr,uint lockerId)from"lockers";   

uint GetCarCost(uint16 protoCar)
{
	uint count=WorldItemCount(protoCar);
	ProtoItem@car=GetProtoItem(protoCar);
	if((@car!=null))
	return car.Cost+car.Cost*count;
	return 0;
}

bool UseItemOnCar(Critter&cr,Item&car,Item&item)
{
	uint16 pid=item.GetProtoId(); 
	
	bool isEnergo=(pid==(38)||pid==(39));
	bool isBio=(pid==(124)||pid==(125)||pid==(310)||pid==(469)||pid==(311));
	
	if(not isEnergo&&not isBio)
	return false;
	
	if(isBio&&not((car.Val0&(0x0001))!=0))
	{
		cr.SayMsg((11),(3),(10254));
		return true;
	}
	
	int octane=100;
	if(pid==(124)||pid==(310))
	octane=30;
	else if(pid==(38))
	octane=100;
	else if(pid==(39))
	octane=150;
	else
	octane=70;
	
	int need=int(car.Proto.Car_TankVolume)-car.Charge;
	int count=item.GetCount()*octane;
	if(count>need)
	count=need;
	
	if(count<=0)
	{
		cr.SayMsg((11),(3),(10251));
	}
	else
	{
		int newCount=item.GetCount()-count/octane;
		if(newCount<=0)
		DeleteItem(item);
		else
		item.SetCount(newCount);
		car.Charge+=count;
		cr.SayMsg((11),(3),(10250));
	}
	
	return true;
}

bool UseSkillOnCar(Critter&cr,Item&car,int skill)
{
	if(skill==(-1))
	{
		if(not IsKeyAviable(cr,car.LockerId))
		{
			cr.SayMsg((11),(3),(10100));
		}
		else if((@cr.GetMap()!=null))
		{
			if(cr.Timeout[(239)]>0)
			cr.SayMsg((11),(3),(790));
			else if(cr.Timeout[(238)]>0)
			cr.SayMsg((11),(3),(791));
			else
			DriveToGlobal(cr,car,true);
		}
	}
	else if(skill==(212))
	{
		cr.SayMsg((11),(0),(2100),"$number"+car.LockerId+
		"$fuel"+(car.Charge/100)+"$fuel_tank"+(car.Proto.Car_TankVolume/100)+
		"$wear"+(car.Deterioration*100/car.Proto.Car_MaxDeterioration));
	}
	else if(skill==(213))
	{
		if(car.Deterioration==0)
		cr.SayMsg((11),(3),(10253));
		else if(cr.IsPlayer()&&cr.Timeout[(232)]>0)
		cr.SayMsg((11),(3),(3401));
		else
		{
			int fix=car.Deterioration-(cr.Skill[(213)]>0?cr.Skill[(213)]:1)*100;
			if(fix<0)
			fix=0;
			car.Deterioration=fix;
			cr.SayMsg((11),(3),(10252));
			cr.TimeoutBase[(232)]=(__FullSecond+((20)*__TimeMultiplier));
			cr.StatBase[(76)]+=10;
			cr.PlaySound("CARREPAR.ACM",true);
		}
	}
	else if(skill==(209))
	{
		if(cr.Timeout[(234)]>0)
		{
			cr.SayMsg((11),(3),(3401));
			return true;
		}
		
		if(((car.Val0&(0x0002))!=0))
		{
			cr.SayMsg((11),(3),(3440));
			return true;
		}
		
		int base=cr.Skill[(209)]-200;
		uint8 mode=0;
		uint16 activePid=cr.GetSlotProto((1),mode).ProtoId;
		if(activePid==(84))
		{
			base+=25;
			if(Random(0,30)==0)
			cr.DeleteItem((84),1);
		}
		else if(activePid==(410))
		{
			base+=50;
			if(Random(0,30)==0)
			cr.DeleteItem((410),1);
		}
		
		int minChance=cr.Stat[(6)]/2;
		base=(((base)>(95))?(95):(((base)<(minChance))?(minChance):(base)));
		if(base>=Random(1,100)&&car.LockerId!=1)
		{
			DriveToGlobal(cr,car,true);
			cr.StatBase[(76)]+=200;
			cr.AddScore((18),1);
			
			Item@key=cr.GetItem((82),(1));
			if(not(@key!=null))
			@key=cr.GetItem((82),(2));
			if((@key!=null))
			key.LockerId=car.LockerId;
		}
		else
		{
			cr.SayMsg((11),(3),(3440));
		}
		
		cr.TimeoutBase[(234)]=(__FullSecond+((30)*__TimeMultiplier));
	}
	else
	{
		cr.SayMsg((11),(3),(10202));
	}
	return true;
}

void DriveToGlobal(Critter&cr,Item&car,bool requestGroup)
{
	
	for(uint i=0;i<3;i++)
	{
		Item@bag=car.GetChild(i);
		if((@bag!=null))
		{
			(bag.Flags=(bag.Flags)|((0x00000001)));
			MoveItem(bag,0,cr);
		}
	}
	(car.Flags=(car.Flags)|((0x00000001)));
	MoveItem(car,0,cr);
	cr.TransitToGlobal(true);
}
