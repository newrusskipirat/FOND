                                                     

string[]__critterHistoryInfo;                                                                                                                                                                                                                                                                                                                                                                                                                                            

import IGUIScreenOpt@GUI_CreateScreen(int screenIndex,string@sprName)from"client_gui";

import void GUI_DeleteScreen(int screenIndex)from"client_gui";

import IGUIElementOpt@GUI_AddScreenElement(int screenIndex,string@sprName,int x,int y)from"client_gui";

import IGUIScreenOpt@GUI_GetScreenOptions(int screenIndex)from"client_gui";

import IGUIScreenOpt@GUI_GetScreenOptions()from"client_gui";

import IGUIElementOpt@GUI_GetElementOptions()from"client_gui";
import void GUI_HideScreen(int screenIndex,int p0,int p1,int p2)from"client_gui";

import void GUI_DeleteScreenElements(int screenIndex)from"client_gui"; 

import IGUIScreenOpt@GUI_CreateScreenIni(int screenIndex,string@iniKey)from"client_gui";
import IGUIElementOpt@GUI_AddScreenElementIni(int screenIndex,string@ini,int defx,int defy)from"client_gui";
import IGUIElementOpt@GUI_AddScreenElementIni(int screenIndex,string@ini,int defx,int defy,string@defSpr)from"client_gui";      

shared interface IGUIScreenCallbackShow
{
	void OnShow(int p0,int p1,int p2);
}
shared interface IGUIScreenCallbackHide
{
	void OnHide(int p0,int p1,int p2);
}
shared interface IGUIScreenCallbackMove
{
	void OnMove(int posX,int posY);
}

shared interface IGUIScreenCallbackInit{
	void OnInit();
}

shared interface IGUIScreenOpt
{
	IGUIScreenOpt@CallbackShow(IGUIScreenCallbackShow@callback);
	IGUIScreenOpt@CallbackHide(IGUIScreenCallbackHide@callback);
	IGUIScreenOpt@CallbackMove(IGUIScreenCallbackMove@callback);
	IGUIScreenOpt@Position(int x,int y);
	IGUIScreenOpt@CanMove(bool enabled);
	IGUIScreenOpt@Modal(bool enabled);
	IGUIScreenOpt@Multiinstance(bool enabled);
	IGUIScreenOpt@IgnoreBorders(bool enabled);
	IGUIScreenOpt@CloseOnMiss(bool enabled);
	IGUIScreenOpt@AutoCursor(bool enabled,int cursorType);
	IGUIScreenOpt@SetElementCount(int8 ElementCount);
	IGUIScreenOpt@Pic(string@sprName,int path);  
	
	int GetPosX();
	int GetPosY();
	uint16 GetElementsLength();
	IGUIElementOpt@GetElement(uint16 index);
	
}    

shared interface IGUIElementCallbackInit
{
	void OnInit();
}
shared interface IGUIElementCallbackDraw
{
	void OnDraw(int posX,int posY,int w,int h);
}
shared interface IGUIElementCallbackMouseClick
{
	void OnMouseClick(int click);
}
shared interface IGUIElementCallbackKeyPress
{
	void OnKeyPress(uint8 key,uint8 letter);
}

shared interface IGUIElementOpt
{
	IGUIElementOpt@CallbackInit(IGUIElementCallbackInit@callback);
	IGUIElementOpt@CallbackDraw(IGUIElementCallbackDraw@callback);
	IGUIElementOpt@CallbackMouseClick(IGUIElementCallbackMouseClick@callback);
	IGUIElementOpt@CallbackKeyPress(IGUIElementCallbackKeyPress@callback);
	IGUIElementOpt@Position(int x,int y);
	IGUIElementOpt@Position(int x,int y,int w,int h);
	IGUIElementOpt@Position(string&iniKey);
	IGUIElementOpt@DownPic(string@sprName);
	IGUIElementOpt@Text(string@text,int font,uint color,uint downColor,int flags);
	IGUIElementOpt@TextInput(bool enabled,uint maxLen,uint colorFocused);
	IGUIElementOpt@Switch(bool enabled); 
	
	IGUIElementOpt@SetVisible(bool enabled);
	IGUIElementOpt@Realese();
	IGUIElementOpt@SetElementType(uint8 type);
	IGUIElementOpt@SetDescription(string desc);
	IGUIElementOpt@SetElementBtnNum(uint8 btnNum);
	IGUIElementOpt@SetElementFastPanelType(uint8 type);
	IGUIElementOpt@SetElementFastPanelId(uint16 id);
	IGUIElementOpt@UpPic(string@sprName);
	IGUIElementOpt@Pic(string@sprName,int path);
	IGUIElementOpt@SetLayer(uint8 layer);
	IGUIElementOpt@SetSpecialValue(uint value);
	IGUIElementOpt@SetRenderLayer(uint8 layer);
	IGUIElementOpt@PicSetFrmCount(uint16 count);   
	
	int GetPosX();
	int GetPosY();
	string@GetText(); 
	
	bool GetVisible();
	uint8 GetLayer();
	uint8 GetType();
	uint8 GetBtnNum();
	uint8 GetFastPanelType();
	uint16 GetFastPanelId();
	string GetDescription();
	uint16 GetSurfaceHeight();
	uint16 GetSurfaceWidth();
	uint GetSpecValue();
	uint8 GetRenderLayer(); 
	
}              

uint __GetColor(int r,int g,int b)
{
	r=(((r)>(255))?(255):(((r)<(0))?(0):(r)));
	g=(((g)>(255))?(255):(((g)<(0))?(0):(g)));
	b=(((b)>(255))?(255):(((b)<(0))?(0):(b)));
	return(uint((0xFF<<24)|(((r)&0xFF)<<16)|(((g)&0xFF)<<8)|((b)&0xFF)));
}

uint __GetGradient(uint colorStart,uint colorEnd,uint8 pos)
{
	pos=(((pos)>(100))?(100):(((pos)<(1))?(1):(pos)));
	
	int aS=(colorStart>>24)&0xFF,
	rS=((colorStart>>16)&0xFF),
	gS=((colorStart>>8)&0xFF),
	bS=((colorStart)&0xFF),
	
	aE=(colorEnd>>24)&0xFF,
	rE=((colorEnd>>16)&0xFF),
	gE=((colorEnd>>8)&0xFF),
	bE=((colorEnd)&0xFF); 
	
	rS=(((rE-int(rS*(pos*0.01)))>0)?(rE-int(rS*(pos*0.01))):-(rE-int(rS*(pos*0.01))));
	gS=(((gE-int(gS*(pos*0.01)))>0)?(gE-int(gS*(pos*0.01))):-(gE-int(gS*(pos*0.01))));
	bS=(((bE-int(bS*(pos*0.01)))>0)?(bE-int(bS*(pos*0.01))):-(bE-int(bS*(pos*0.01))));
	
	return __GetColor(rS,gS,bS);
}

uint __GetColor(uint8&a,uint8&r,uint8&g,uint8&b,uint color){
	a=(color>>24)&0xFF;
	r=((color>>16)&0xFF);
	g=((color>>8)&0xFF);
	b=((color)&0xFF);
	
	return 0;
}                                             

class Sprite
{
	Sprite()
	{
		Id=0;
		Hash=0;
		Width=0;
		Height=0;
		FrmCount=0;
		DrawFrame=-1;
	}
	
	void Load(string&name,int path)
	{
		if(name.length()>0)
		Id=LoadSprite(name,path);
		else
		Id=0;
		RefreshData();
	}
	
	void Load(uint nameHash,uint8 dir)
	{
		Id=LoadSprite(nameHash,dir);
		Hash=nameHash;
		RefreshData();
	}
	
	void LoadByIni(string&iniKey,int path)
	{
		string@name=GetIfaceIniStr(iniKey);
		if(@name!=null&&name.length()>0)
		Id=LoadSprite(name,path);
		else
		Id=0;
		RefreshData();
	}
	
	void Draw(int x,int y)
	{
		if(Id!=0)
		DrawSprite(Id,DrawFrame,x,y,0);
	}
	
	void Draw(int x,int y,uint8 sprIndex)
	{
		if(Id!=0)
		DrawSprite(Id,DrawFrame,x,y,0);
	}
	
	uint GetHashName()
	{
		return Hash;
	}
	
	private void RefreshData()
	{
		if(Id!=0)
		{
			Width=GetSpriteWidth(Id,0);
			Height=GetSpriteHeight(Id,0);
			FrmCount=GetSpriteCount(Id);
			DrawFrame=-1;
		}
		else
		{
			Width=0;
			Height=0;
			FrmCount=0;
			DrawFrame=-1;
		}
	}
	
	uint Id;
	uint Hash;
	int Width;
	int Height;
	uint FrmCount;
	int DrawFrame;
}

bool LocIsModoc(uint locPid)
{
	return(locPid<=(1253));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(32)||locPid==(1216)||locPid==(43)||locPid==96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(42));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

shared interface Project
{
	string@get_Name();
	void Build();
	void SetAssociation(string@ex,string@className,string@classModule);
}

shared interface FileObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	void FormatStringData(string&nameData,string&data);
	FileObject@get_Pattern(string&name)const;
	FileObject@get_Copy(string&name);                           
	
}

shared class TimeLog
{
	uint tick;
	
	TimeLog()
	{
		refresh();
	}
	
	void refresh()
	{
		tick=GetTick();
	}
	
	bool check(uint count)
	{
		return(GetTick()-tick>=count);
	}
	
	uint get()
	{
		uint old=tick;
		refresh();
		return(tick-old);
	}
	
	void Log(string&in message)
	{
		::ClearLog(message+" ["+(GetTick()-tick)+"ms]");
	}
}

shared interface AnyDataObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	uint[]@get_SaveData();
	void InitData(uint[]&data);
}

shared interface ManagerObject
{
	FileObject@get_ProtoObject(string@name);
	void ParseProtoTypes(const string&ex,const FileObject&pattern,const string@search);
	FileObject@ParseProtoTypeFile(string&name,const string&ex,const FileObject&pattern,const string@search);
	FileObject@AddPrototype(FileObject@proto);
	FileObject@StringToFileObject(string&name,string&txt,const FileObject&pattern);
}

shared interface ValueAPI{}
shared class SettingsAPI
{
	string Name;
	bool IsDebug;
}                                                  

shared class Hexagonal
{
	Hexagonal(){Reset();}
	Hexagonal(const uint16&in x,const uint16&in y){Set(x,y);}
	Hexagonal(const Hexagonal&master){Set(master);}                                       
	
	void Set(const uint16&in x,const uint16&in y){X=x;Y=y;}
	void Set(const Hexagonal&in other){Set(other.X,other.Y);}
	void Reset(){X=Y=0;}
	uint Distantion(Hexagonal&other){return GetDistantion(X,Y,other.X,other.Y);}
	
	uint16 X;
	uint16 Y;
	
	bool opEquals(const Hexagonal&in other){return(other.X==X&&other.Y==Y);}
	Hexagonal&opAssign(const Hexagonal&in other)
	{
		Set(other);
		return this;
	}
	
	const uint get_UID(const uint w)const{return X+Y*w;}
	string get_Debug(){return"X:"+X+"Y:"+Y;}
	void Log(string&str){::Log(str+":"+Debug);}
}                            

shared class Line
{
	Line(Hexagonal&a,Hexagonal&b){@A=a;@B=b;}
	
	uint get_Length()
	{
		return B.Distantion(A);
	}
	
	uint get_Point(Hexagonal&point)
	{
		return B.Distantion(point);
	}
	
	float get_Module(Hexagonal&point)
	{
		return Point[point]/Length;
	}
	
	Hexagonal@get_opIndex(const uint&in size)
	{
		
		const float mod=float(size/Length);
		return@Hexagonal(A.X+(B.X-A.X)*mod,A.Y+(B.Y-A.Y)*mod);
	}                      
	
	string get_Debug(){return"A<"+A.Debug+">B<"+B.Debug+">";}
	void Log(string&str){::Log(str+":"+Debug);}
	
	Hexagonal@A;
	Hexagonal@B;
}

class ScreenInventory:IGUIScreenCallbackShow,IGUIScreenCallbackHide
{
	IGUIScreenOpt@screenOpt;
	InvItemList@ItemList;
	InventoryItemShow@ItemShow;
	InventoryItemButton@[]InventoryButtons;
	
	ScreenInventory()
	{}
	
	void OnShow(int p0,int p1,int p2)
	{
		@screenOpt=GUI_GetScreenOptions();
	}
	
	void OnHide(int p0,int p1,int p2)
	{}
}

class InvItemList:IGUIElementCallbackInit
{
	IGUIElementOpt@Options;
	ScreenInventory@Instance;
	InventoryItem[]InventoryItems;
	
	uint8 prevIndex;
	
	InvItemList(ScreenInventory&instance)
	{
		@Instance=instance;
		prevIndex=uint8(-1);
	}
	
	void OnInit()
	{
		@Options=GUI_GetElementOptions();
		@Instance.ItemList=this;
		
		LoadInventory();
		ShowList();
		
	}    
	
	bool LoadInventory()
	{
		CritterCl@choo=GetChosen();
		if(choo is null)
		return false;
		
		ItemCl@[]invItems;
		choo.GetItems(-1,invItems);
		
		InventoryItems.resize(0);
		
		Message("length items "+invItems.length());
		
		uint16 itemsLen=invItems.length();
		uint16[]ids;
		uint16[]count;
		uint16[]protos;   
		
		for(uint16 i=0;i<itemsLen;++i)
		{
			uint16 protoIndex=uint16(protos.find(invItems[i].GetProtoId()));
			if(protoIndex!=uint16(-1))
			{  
				
				protos.insertAt(protoIndex,invItems[i].GetProtoId());
				ids.insertAt(protoIndex,invItems[i].Id);
				count.insertAt(protoIndex,invItems[i].GetCount());
			}
			
			else
			{
				protos.insertLast(invItems[i].GetProtoId());
				ids.insertLast(invItems[i].Id);
				count.insertLast(invItems[i].GetCount());
			} 
			
			Message(""+invItems[i].Id);
			ItemCl@test=GetItem(invItems[i].Id);
			if(test!is null)
			Message("successful");
			
		}             
		
		uint16 index=count[0],
		whileI=0,
		protoId=0;
		do
		{
			
			uint16[]tempIds;
			uint16[]tempCounts;      
			
			protoId=protos[0];  
			
			while(protoId==protos[0])
			{ 
				
				tempIds.insertLast(ids[0]);
				tempCounts.insertLast(count[0]);
				
				protos.removeAt(0);
				ids.removeAt(0);
				count.removeAt(0);     
				
			}
			;
			
			InventoryItem tempInvItem(tempIds,tempCounts,GetMsgStr((2),protos[0]*100));
			InventoryItems.insertLast(tempInvItem);
			
			tempIds.resize(0);
			tempCounts.resize(0);     
			
		}
		while(ids.length()>1);
		return true;
	}
	
	bool ShowList()
	{
		uint16 itemsLen=InventoryItems.length(),
		index=0;    
		
		for(uint16 i=0,j=(20);i<j;++i)
		{
			uint16 itemsCout=0;
			string name="";
			if(i<itemsLen)
			{
				for(uint16 ii=0,jj=InventoryItems[i].Id.length();ii<jj;++ii)
				{
					itemsCout+=InventoryItems[i].Count[ii];
				}
				
				index=(InventoryItems[i].Child?index:i);
				name=(" "+(InventoryItems[i].Child?"\\-- ":"+ ")+InventoryItems[i].Name);
				
				for(uint16 ii=InventoryItems[i].Name.length();ii<60;++ii)
				{
					name+=" ";
				}
				
				name+=" x"+itemsCout; 
				
			}
			
			name=(name==""?"no item":name);
			if(Instance.InventoryButtons[i]is null)
			{
				Message("null button");
				continue;
			}
			Instance.InventoryButtons[i].Options.Text(""+name,(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0008));
			Instance.InventoryButtons[i].InvItemIndex=index;     
			
		}
		
		return true;
	}
	
	void SelectItem(uint8 index)
	{
		if(prevIndex!=uint8(-1))
		Instance.InventoryButtons[prevIndex].PressPic(false);
		Instance.InventoryButtons[index].PressPic(true);
		
		if(index<InventoryItems.length())
		{
			ItemCl@item=GetItem(InventoryItems[index].Id[0]);
			Message(""+InventoryItems[index].Id[0]);
			if(item!is null)
			{
				uint spriteHash=item.Proto.PicInv;
				Message(" "+spriteHash);
			}
		}
		
		prevIndex=index;
	}
	
	void DropItem(uint8 index)
	{ 
		
		if(!InventoryItems[index].Child)
		{
			uint16 invItemIndex=Instance.InventoryButtons[index].InvItemIndex;
			uint16 dropLen=InventoryItems[invItemIndex].Id.length(); 
			
			Message(""+dropLen+" "+invItemIndex);  
			
			for(uint16 i=0;i<dropLen;++i)
			{
				InventoryItem tempInvItem(InventoryItems[invItemIndex].Id[i],InventoryItems[invItemIndex].Count[i],InventoryItems[invItemIndex].Name);
				InventoryItems.insertAt(index+i+1,tempInvItem);    
				
			}
			ShowList();
		}    
		
	}
	
	void RollUpItem(uint8 index)
	{ 
		
		Message("index "+index);
		if(!InventoryItems[index].Child&&InventoryItems[index+1].Child)
		{
			index++;
			Message("index "+index);
			while(index<InventoryItems.length()&&InventoryItems[index].Child)
			{
				Message("index "+index+" "+InventoryItems.length());
				InventoryItems.removeAt(index);
				
			}
			;
			
			ShowList();
		}
		
	}
	
}

class InventoryItemButton:IGUIElementCallbackInit,IGUIElementCallbackMouseClick
{
	IGUIElementOpt@Options;
	ScreenInventory@Instance;
	
	bool Rolled;
	
	uint8 Index;
	uint16 InvItemIndex;
	
	InventoryItemButton(ScreenInventory&instance,uint8 index)
	{
		@Instance=instance;
		Index=index;
		Rolled=false;
	}
	
	void OnInit()
	{
		@Options=GUI_GetElementOptions();
		
		Instance.InventoryButtons.insertAt(Index,this); 
		
	}
	
	void OnMouseClick(int click)
	{
		Instance.ItemList.SelectItem(Index);
		
		if(click==(0))
		{
			!Rolled?Instance.ItemList.DropItem(Index):Instance.ItemList.RollUpItem(Index);
			Rolled=(Rolled?false:true);
		}    
		
	}
	
	void PressPic(bool press)
	{
		Options.UpPic(press?"invItemDown.png":"invItemUp.png");
	}
}

class InventoryItemShow:IGUIElementCallbackInit
{
	IGUIElementOpt@Options;
	ScreenInventory@Instance;
	
	InventoryItemShow(ScreenInventory&instance)
	{
		@Instance=instance;
	}
	
	void OnInit()
	{
		@Options=GUI_GetElementOptions();
		@Instance.ItemShow=this;
	}   
	
}

class InventoryItem
{
	InventoryItem()
	{
		Child=false;
	}
	
	InventoryItem(uint16 id,uint16 count,string name)
	{
		Id.resize(1);
		Count.resize(1);
		
		Id[0]=id;
		Count[0]=count;
		Name=name;
		
		Child=true;
	}
	
	InventoryItem(uint16[]id,uint16[]count,string name)
	{
		Id=id;
		Count=count;
		Name=name;
		
		Child=false;
	}
	
	uint16[]Id;
	uint16[]Count;
	string Name;
	bool Child;
}

void InitInventoryTnfScreen()
{
	ScreenInventory screenInventory();
	GUI_CreateScreen((-6),"invScreen.png")
	.CallbackShow(screenInventory)
	.CallbackHide(screenInventory)
	.CanMove(true)
	
	.Modal(false)
	.Multiinstance(true); 
	
	uint16 y=0;
	
	for(uint8 i=0;i<(20);++i)
	{
		InventoryItemButton TempInvButt(screenInventory,i);
		GUI_AddScreenElement((-6),"invItemUp.png",0,y)
		.CallbackInit(TempInvButt)
		.CallbackMouseClick(TempInvButt); 
		
		y+=20;
	}
	
	InvItemList itemList(screenInventory);
	GUI_AddScreenElement((-6),"invItemList.png",0,0)
	.CallbackInit(itemList)
	.SetVisible(false);  
	
	InventoryItemShow itemShow(screenInventory);
	GUI_AddScreenElement((-6),"invItemShow.png",550,0)
	.CallbackInit(itemList);
}
