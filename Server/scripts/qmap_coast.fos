#include "_macros.fos"
#include "qmap_defines.fos"

// Export:
// import uint8 checkCoast(Map& map, uint16 tx, uint16 ty) from "qmap_coast";



bool hashes_inited = false;

// сторона света обозначает в какую сторону от тайла побережья расположена вода
// порядок расположение углов: северо-запад, северо-восток, юго-восток, юго-запад
uint[][] hashes_coast( 6 );



void init_hashes()
{
    string dir = "art/tiles/",
           seas0 = "seas0",
           SHORE = "SHORE",
           shor = "shor",
           frm = ".frm";

    uint[] @ data = null;

    @data = hashes_coast[ HASHES_COAST_WEST ];
    data.resize( 0 );
    for( uint i = 1; i <= 7; i++ )
        data.insertLast( GetStrHash( dir + SHORE + "0" + i + frm ) );               // AddHashCoast(HASHES_COAST_WEST, GetStrHash(dir+SHORE+"0"+i+frm));

    for( uint i = 1; i <= 9; i++ )
        data.insertLast( GetStrHash( dir + "brick0" + i + ".frm" ) );               // pm added
    for( uint i = 10; i <= 16; i++ )
        data.insertLast( GetStrHash( dir + "brick" + i + ".frm" ) );
//	#ifdef TNF_DLL_INIT_HASHES_COAST
//	InitHashesCoast(HASHES_COAST_WEST, data, data.length());
//	#endif

    @data = hashes_coast[ HASHES_COAST_NORTH ];
    data.resize( 0 );
    data.insertLast( GetStrHash( dir + shor + 22 + frm ) );
    for( uint i = 10; i <= 18; i++ )
        data.insertLast( GetStrHash( dir + seas0 + i + frm ) );

    for( uint i = 1; i <= 9; i++ )
        data.insertLast( GetStrHash( dir + "brick0" + i + ".frm" ) );               // pm added
    for( uint i = 10; i <= 16; i++ )
        data.insertLast( GetStrHash( dir + "brick" + i + ".frm" ) );

//	#ifdef TNF_DLL_INIT_HASHES_COAST
//	InitHashesCoast(HASHES_COAST_NORTH, data, data.length());
//	#endif

    @data = hashes_coast[ HASHES_COAST_EAST ];
    data.resize( 0 );
    for( uint i = 5; i <= 11; i++ )
        data.insertLast( GetStrHash( dir + shor + ( ( i < 10 ) ? "0" : "" ) + i + frm ) );

    for( uint i = 1; i <= 9; i++ )
        data.insertLast( GetStrHash( dir + "brick0" + i + ".frm" ) );               // pm added
    for( uint i = 10; i <= 16; i++ )
        data.insertLast( GetStrHash( dir + "brick" + i + ".frm" ) );

//	#ifdef TNF_DLL_INIT_HASHES_COAST
//	InitHashesCoast(HASHES_COAST_EAST, data, data.length());
//	#endif

    @data = hashes_coast[ HASHES_COAST_SOUTH ];
    data.resize( 0 );
    for( uint i = 1; i <= 3; i++ )
        data.insertLast( GetStrHash( dir + shor + "0" + i + frm ) );

    for( uint i = 1; i <= 9; i++ )
        data.insertLast( GetStrHash( dir + "brick0" + i + ".frm" ) );               // pm added
    for( uint i = 10; i <= 16; i++ )
        data.insertLast( GetStrHash( dir + "brick" + i + ".frm" ) );

//	#ifdef TNF_DLL_INIT_HASHES_COAST
//	InitHashesCoast(HASHES_COAST_SOUTH, data, data.length());
//	#endif

    @data = hashes_coast[ HASHES_COAST_OUT ];
    data.resize( 0 );
    data.insertLast( GetStrHash( dir + shor + "19" + frm ) );
    data.insertLast( GetStrHash( dir + shor + "21" + frm ) );
    data.insertLast( GetStrHash( dir + shor + "04" + frm ) );
    data.insertLast( GetStrHash( dir + shor + "20" + frm ) );

    for( uint i = 1; i <= 9; i++ )
        data.insertLast( GetStrHash( dir + "brick0" + i + ".frm" ) );               // pm added
    for( uint i = 10; i <= 16; i++ )
        data.insertLast( GetStrHash( dir + "brick" + i + ".frm" ) );

//	#ifdef TNF_DLL_INIT_HASHES_COAST
//	InitHashesCoast(HASHES_COAST_OUT, data, data.length());
//	#endif

    @data = hashes_coast[ HASHES_COAST_IN ];
    data.resize( 0 );
    data.insertLast( GetStrHash( dir + shor + "16" + frm ) );
    data.insertLast( GetStrHash( dir + shor + "18" + frm ) );
    data.insertLast( GetStrHash( dir + shor + "15" + frm ) );
    data.insertLast( GetStrHash( dir + shor + "17" + frm ) );

    for( uint i = 1; i <= 9; i++ )
        data.insertLast( GetStrHash( dir + "brick0" + i + ".frm" ) );               // pm added
    for( uint i = 10; i <= 16; i++ )
        data.insertLast( GetStrHash( dir + "brick" + i + ".frm" ) );

//	#ifdef TNF_DLL_INIT_HASHES_COAST
//	InitHashesCoast(HASHES_COAST_IN, data, data.length());
//	#endif

    hashes_inited = true;
}

// проверка на соответствие одному из хэшей, загруженных в массив тайлов побережья
uint8 checkCoast( Map& map, uint16 tx, uint16 ty )
{
    if( !hashes_inited )
        init_hashes();

    #ifdef TNF_DLL_CHECKCOAST
    return map.CheckCoast( tx, ty );
    #endif

    uint hash = map.GetTile( tx, ty );
    if( hash == 0 )
        return 0;

    uint8 answer = 0;

    for( uint i = 0; i < 6; i++ )
    {
        uint[] @ data = hashes_coast[ i ];
        for( uint k = 0, len = data.length(); k < len; k++ )
        {
            if( data[ k ] != hash )
                continue;
            answer |= ( ( 0x01 ) << i );
            if( i > 3 && len < 5 )
            {
                answer |= ( ( 0x01 ) << ( k | 0x01 ) ) | ( ( 0x01 ) << ( ( k + 1 ) & 0x02 ) );
            }
            return answer;
        }
    }
    return 0;
}
