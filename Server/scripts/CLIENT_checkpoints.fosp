

bool LocIsModoc(uint locPid)
{
	return(locPid<=(1253));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(32)||locPid==(1216)||locPid==(43)||locPid==96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(42));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

shared interface Project
{
	string@get_Name();
	void Build();
	void SetAssociation(string@ex,string@className,string@classModule);
}

shared interface FileObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	void FormatStringData(string&nameData,string&data);
	FileObject@get_Pattern(string&name)const;
	FileObject@get_Copy(string&name);                           
	
}

shared class TimeLog
{
	uint tick;
	
	TimeLog()
	{
		refresh();
	}
	
	void refresh()
	{
		tick=GetTick();
	}
	
	bool check(uint count)
	{
		return(GetTick()-tick>=count);
	}
	
	uint get()
	{
		uint old=tick;
		refresh();
		return(tick-old);
	}
	
	void Log(string&in message)
	{
		::ClearLog(message+" ["+(GetTick()-tick)+"ms]");
	}
}

shared interface AnyDataObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	uint[]@get_SaveData();
	void InitData(uint[]&data);
}

shared interface ManagerObject
{
	FileObject@get_ProtoObject(string@name);
	void ParseProtoTypes(const string&ex,const FileObject&pattern,const string@search);
	FileObject@ParseProtoTypeFile(string&name,const string&ex,const FileObject&pattern,const string@search);
	FileObject@AddPrototype(FileObject@proto);
	FileObject@StringToFileObject(string&name,string&txt,const FileObject&pattern);
}

shared interface ValueAPI{}
shared class SettingsAPI
{
	string Name;
	bool IsDebug;
}                                                  

shared class Hexagonal
{
	Hexagonal(){Reset();}
	Hexagonal(const uint16&in x,const uint16&in y){Set(x,y);}
	Hexagonal(const Hexagonal&master){Set(master);}                                       
	
	void Set(const uint16&in x,const uint16&in y){X=x;Y=y;}
	void Set(const Hexagonal&in other){Set(other.X,other.Y);}
	void Reset(){X=Y=0;}
	uint Distantion(Hexagonal&other){return GetDistantion(X,Y,other.X,other.Y);}
	
	uint16 X;
	uint16 Y;
	
	bool opEquals(const Hexagonal&in other){return(other.X==X&&other.Y==Y);}
	Hexagonal&opAssign(const Hexagonal&in other)
	{
		Set(other);
		return this;
	}
	
	const uint get_UID(const uint w)const{return X+Y*w;}
	string get_Debug(){return"X:"+X+"Y:"+Y;}
	void Log(string&str){::Log(str+":"+Debug);}
}                            

shared class Line
{
	Line(Hexagonal&a,Hexagonal&b){@A=a;@B=b;}
	
	uint get_Length()
	{
		return B.Distantion(A);
	}
	
	uint get_Point(Hexagonal&point)
	{
		return B.Distantion(point);
	}
	
	float get_Module(Hexagonal&point)
	{
		return Point[point]/Length;
	}
	
	Hexagonal@get_opIndex(const uint&in size)
	{
		
		const float mod=float(size/Length);
		return@Hexagonal(A.X+(B.X-A.X)*mod,A.Y+(B.Y-A.Y)*mod);
	}                      
	
	string get_Debug(){return"A<"+A.Debug+">B<"+B.Debug+">";}
	void Log(string&str){::Log(str+":"+Debug);}
	
	Hexagonal@A;
	Hexagonal@B;
}

class CWaypoint
{    
	
	ItemCl@Waypoint;
	
	uint[]Waypoints;
	uint[]Groups;
	
	CWaypoint(){}    
	
	CWaypoint(ItemCl&waypoint)
	
	{
		@Waypoint=waypoint;
		
		Waypoints.resize(5);
		Groups.resize(5);
		
		Waypoints[0]=waypoint.Val0;
		Waypoints[1]=waypoint.Val2;
		Waypoints[2]=waypoint.Val4;
		Waypoints[3]=waypoint.Val6;
		Waypoints[4]=waypoint.Val8;
		
		Groups[0]=waypoint.Val1;
		Groups[1]=waypoint.Val3;
		Groups[2]=waypoint.Val5;
		Groups[3]=waypoint.Val7;
		Groups[4]=waypoint.Val9;
	}                                            
	
	uint GetWaypointId()
	{
		return Waypoint.Id;
	}
	
	bool IsWaypointGroupFlag(uint8 wayNum,uint flag)
	{
		return(((Groups[wayNum])&(flag))!=0);
	}
	
	int GetFirstWaypointIndex(uint flag)
	{
		for(uint8 i=0,j=Groups.length();i<j;++i)
		{
			if(IsWaypointGroupFlag(i,flag))
			{
				return i;
			}
		}
		
		return-1;
	}     
	
	uint GetNextWaypointId(CritterCl&cr)
	{
		
		uint type=cr.StatBase[(129)];
		
		int index=GetFirstWaypointIndex(type);
		
		if(index!=-1)
		{
			return Waypoints[index];
		}
		
		return 0;
	}       
	
	bool GetNextWaypointHex(CritterCl&cr,uint16&hexX,uint16&hexY)
	{
		uint id=GetNextWaypointId(cr);
		ItemCl@waypoint=GetItem(id); 
		
		if(waypoint is null)
		return false;
		
		hexX=waypoint.HexX;
		hexY=waypoint.HexY;
		return true;
	}     
	
	bool GetAllWaypointsId(CritterCl&cr,uint[]&ids)
	{ 
		
		uint flag=cr.StatBase[(129)];
		uint[]tempIds;
		
		for(uint8 i=0,j=Groups.length();i<j;++i)
		{
			if(IsWaypointGroupFlag(i,flag))
			{
				tempIds.insertLast(Waypoints[i]);
			}
		}
		
		ids=tempIds;
		
		return true;
	}      
	
	bool GetAllWaypointsHex(CritterCl&cr,uint16[]&hexX,uint16[]&hexY)
	{ 
		
		uint flag=cr.StatBase[(129)];
		
		uint16[]tempHexX;
		uint16[]tempHexY;
		
		for(uint8 i=0,j=Groups.length();i<j;++i)
		{
			if(IsWaypointGroupFlag(i,flag))
			{    
				
				ItemCl@waypoint=GetItem(Waypoints[i]);
				
				if(waypoint is null)
				continue;
				
				tempHexX.insertLast(waypoint.HexX);
				tempHexY.insertLast(waypoint.HexY);
				
			}
		}
		
		hexX=tempHexX;
		hexY=tempHexY;
		
		return true;
	}
}                                                                                                 

string[]__critterHistoryInfo;                                                                                                                                                                                                                                                                                                                                                                                                                                            

import IGUIScreenOpt@GUI_CreateScreen(int screenIndex,string@sprName)from"client_gui";

import void GUI_DeleteScreen(int screenIndex)from"client_gui";

import IGUIElementOpt@GUI_AddScreenElement(int screenIndex,string@sprName,int x,int y)from"client_gui";

import IGUIScreenOpt@GUI_GetScreenOptions(int screenIndex)from"client_gui";

import IGUIScreenOpt@GUI_GetScreenOptions()from"client_gui";

import IGUIElementOpt@GUI_GetElementOptions()from"client_gui";
import void GUI_HideScreen(int screenIndex,int p0,int p1,int p2)from"client_gui";

import void GUI_DeleteScreenElements(int screenIndex)from"client_gui"; 

import IGUIScreenOpt@GUI_CreateScreenIni(int screenIndex,string@iniKey)from"client_gui";
import IGUIElementOpt@GUI_AddScreenElementIni(int screenIndex,string@ini,int defx,int defy)from"client_gui";
import IGUIElementOpt@GUI_AddScreenElementIni(int screenIndex,string@ini,int defx,int defy,string@defSpr)from"client_gui";      

shared interface IGUIScreenCallbackShow
{
	void OnShow(int p0,int p1,int p2);
}
shared interface IGUIScreenCallbackHide
{
	void OnHide(int p0,int p1,int p2);
}
shared interface IGUIScreenCallbackMove
{
	void OnMove(int posX,int posY);
}

shared interface IGUIScreenCallbackInit{
	void OnInit();
}

shared interface IGUIScreenOpt
{
	IGUIScreenOpt@CallbackShow(IGUIScreenCallbackShow@callback);
	IGUIScreenOpt@CallbackHide(IGUIScreenCallbackHide@callback);
	IGUIScreenOpt@CallbackMove(IGUIScreenCallbackMove@callback);
	IGUIScreenOpt@Position(int x,int y);
	IGUIScreenOpt@CanMove(bool enabled);
	IGUIScreenOpt@Modal(bool enabled);
	IGUIScreenOpt@Multiinstance(bool enabled);
	IGUIScreenOpt@IgnoreBorders(bool enabled);
	IGUIScreenOpt@CloseOnMiss(bool enabled);
	IGUIScreenOpt@AutoCursor(bool enabled,int cursorType);
	IGUIScreenOpt@SetElementCount(int8 ElementCount);
	IGUIScreenOpt@Pic(string@sprName,int path);  
	
	int GetPosX();
	int GetPosY();
	uint16 GetElementsLength();
	IGUIElementOpt@GetElement(uint16 index);
	
}    

shared interface IGUIElementCallbackInit
{
	void OnInit();
}
shared interface IGUIElementCallbackDraw
{
	void OnDraw(int posX,int posY,int w,int h);
}
shared interface IGUIElementCallbackMouseClick
{
	void OnMouseClick(int click);
}
shared interface IGUIElementCallbackKeyPress
{
	void OnKeyPress(uint8 key,uint8 letter);
}

shared interface IGUIElementOpt
{
	IGUIElementOpt@CallbackInit(IGUIElementCallbackInit@callback);
	IGUIElementOpt@CallbackDraw(IGUIElementCallbackDraw@callback);
	IGUIElementOpt@CallbackMouseClick(IGUIElementCallbackMouseClick@callback);
	IGUIElementOpt@CallbackKeyPress(IGUIElementCallbackKeyPress@callback);
	IGUIElementOpt@Position(int x,int y);
	IGUIElementOpt@Position(int x,int y,int w,int h);
	IGUIElementOpt@Position(string&iniKey);
	IGUIElementOpt@DownPic(string@sprName);
	IGUIElementOpt@Text(string@text,int font,uint color,uint downColor,int flags);
	IGUIElementOpt@TextInput(bool enabled,uint maxLen,uint colorFocused);
	IGUIElementOpt@Switch(bool enabled); 
	
	IGUIElementOpt@SetVisible(bool enabled);
	IGUIElementOpt@Realese();
	IGUIElementOpt@SetElementType(uint8 type);
	IGUIElementOpt@SetDescription(string desc);
	IGUIElementOpt@SetElementBtnNum(uint8 btnNum);
	IGUIElementOpt@SetElementFastPanelType(uint8 type);
	IGUIElementOpt@SetElementFastPanelId(uint16 id);
	IGUIElementOpt@UpPic(string@sprName);
	IGUIElementOpt@Pic(string@sprName,int path);
	IGUIElementOpt@SetLayer(uint8 layer);
	IGUIElementOpt@SetSpecialValue(uint value);
	IGUIElementOpt@SetRenderLayer(uint8 layer);
	IGUIElementOpt@PicSetFrmCount(uint16 count);   
	
	int GetPosX();
	int GetPosY();
	string@GetText(); 
	
	bool GetVisible();
	uint8 GetLayer();
	uint8 GetType();
	uint8 GetBtnNum();
	uint8 GetFastPanelType();
	uint16 GetFastPanelId();
	string GetDescription();
	uint16 GetSurfaceHeight();
	uint16 GetSurfaceWidth();
	uint GetSpecValue();
	uint8 GetRenderLayer(); 
	
}              

uint __GetColor(int r,int g,int b)
{
	r=(((r)>(255))?(255):(((r)<(0))?(0):(r)));
	g=(((g)>(255))?(255):(((g)<(0))?(0):(g)));
	b=(((b)>(255))?(255):(((b)<(0))?(0):(b)));
	return(uint((0xFF<<24)|(((r)&0xFF)<<16)|(((g)&0xFF)<<8)|((b)&0xFF)));
}

uint __GetGradient(uint colorStart,uint colorEnd,uint8 pos)
{
	pos=(((pos)>(100))?(100):(((pos)<(1))?(1):(pos)));
	
	int aS=(colorStart>>24)&0xFF,
	rS=((colorStart>>16)&0xFF),
	gS=((colorStart>>8)&0xFF),
	bS=((colorStart)&0xFF),
	
	aE=(colorEnd>>24)&0xFF,
	rE=((colorEnd>>16)&0xFF),
	gE=((colorEnd>>8)&0xFF),
	bE=((colorEnd)&0xFF); 
	
	rS=(((rE-int(rS*(pos*0.01)))>0)?(rE-int(rS*(pos*0.01))):-(rE-int(rS*(pos*0.01))));
	gS=(((gE-int(gS*(pos*0.01)))>0)?(gE-int(gS*(pos*0.01))):-(gE-int(gS*(pos*0.01))));
	bS=(((bE-int(bS*(pos*0.01)))>0)?(bE-int(bS*(pos*0.01))):-(bE-int(bS*(pos*0.01))));
	
	return __GetColor(rS,gS,bS);
}

uint __GetColor(uint8&a,uint8&r,uint8&g,uint8&b,uint color){
	a=(color>>24)&0xFF;
	r=((color>>16)&0xFF);
	g=((color>>8)&0xFF);
	b=((color)&0xFF);
	
	return 0;
}                                           

string[]labelArray=
{
	"ALL",
	"RATS",
	"DIGRATS",
	"MERCH",
	"SCORPIONS",
	"GECKO",
	"WOLF",
	"DEATHCLAW",
	"FLOATERS"
};

uint[]lastWaypointIds((5)+1);
uint[]lastWaypointFlags((5));

class CWaypointWindow:IGUIScreenCallbackShow,IGUIScreenCallbackHide
{
	IGUIScreenOpt@Options;
	CWaypoint@Waypoint;
	CWaypointElementDoneBtn@[]DoneBtn;
	CWaypointElementInputText@[]InputText;
	CWaypointElementCheckBox@[]CheckBox;
	CWaypointElementMouseSelectBtn@[]SelectBtn;
	uint8 CurrentIndex;
	uint[]Flags;
	
	CWaypointWindow()
	{
		CurrentIndex=0;
	}
	
	void OnShow(int p0,int p1,int p2)
	{
		Message("init2 "+p2);
		ItemCl@item=GetItem(p0);
		if(item is null)
		{
			Message("wrong waypoint.");
			return;
		}
		
		uint[]ids;
		@Waypoint=CWaypoint(item);  
		
		if(p2!=0)
		{
			LoadFlags(Waypoint.Groups);
			LoadWaypoints(Waypoint);
		}
		else
		{
			LoadFlags(lastWaypointFlags);
			LoadWaypoints(lastWaypointIds);
			LoadId(p1,Waypoint.GetWaypointId());
		}
	}
	
	void OnHide(int p0,int p1,int p2){}
	
	void LoadWaypoints(CWaypoint&waypoint)
	{
		for(uint8 i=0,j=InputText.length();i<j;++i)
		{
			uint iWaypoint=waypoint.Waypoints[i];
			InputText[i].SetText(iWaypoint);
			Message(""+iWaypoint);
		}
	}
	
	void LoadWaypoints(uint[]ids)
	{
		for(uint8 i=0,j=InputText.length();i<j;++i)
		{
			uint iWaypoint=ids[i];
			InputText[i].SetText(iWaypoint);
			Message(""+iWaypoint);
		}
	}
	
	void LoadOnce(CWaypoint&waypoint,uint8 index)
	{
		InputText[index].SetText(waypoint.Waypoints[index]); 
		
	}
	
	void LoadId(uint8 index,uint id)
	{
		InputText[index].SetText(id);
	}
	
	void LoadFlags(uint[]flags)
	{
		Flags.resize((5));
		for(uint8 i=0;i<(5);++i)
		{
			Flags[i]=flags[i];
		}
	}
	
	void SetFlag(uint8 index)
	{
		for(uint8 i=0,j=CheckBox.length();i<j;++i)
		{
			CheckBox[i].SetState(Flag(index,CheckBox[i].Flag));
		}
	}
	
	bool Flag(uint8 index,uint flag)
	{
		uint tempFlag=Flags[index]; 
		
		bool isFlag=(((tempFlag)&(flag))!=0);
		
		isFlag?(tempFlag=((tempFlag)&(~(flag)))):(tempFlag=(tempFlag)|(flag));
		
		Flags[index]=tempFlag;
		
		return isFlag;
	}
	
	void SendWaypointToServer()
	{
		int[]send;
		for(uint8 i=0;i<(5);++i)
		{
			int id=0;
			StrToInt(InputText[i].GetText(),id);
			
			send.insertLast(uint(id));
			send.insertLast(Flags[i]);
		}
		
		RunServerScriptUnsafe("checkpoints@unsafe_SaveWaypointInfo",Waypoint.GetWaypointId(),0,0,"",send);
	}
	
	void SaveLocalWaypoint()
	{
		for(uint8 i=0;i<(5);++i)
		{
			int id=0;
			StrToInt(InputText[i].GetText(),id);
			lastWaypointIds[i]=id; 
			
		}
		
		lastWaypointIds[(5)]=Waypoint.GetWaypointId();
	}
	
	void Draw(){}
}

class CWaypointElementInputText:IGUIElementCallbackInit,IGUIElementCallbackKeyPress,IGUIElementCallbackMouseClick
{
	CWaypointWindow@Instance;
	IGUIElementOpt@Options;
	uint8 Type;
	
	CWaypointElementInputText(CWaypointWindow&instance,uint8 type)
	{
		@Instance=instance;
		Type=type;
	}
	
	void OnInit()
	{
		@Options=GUI_GetElementOptions();
		@Instance.InputText[Type]=this;
	}
	
	void OnMouseClick(int click)
	{
		Instance.CurrentIndex=Type;
		Instance.SetFlag(Type);
		Message("flags click"+Instance.Flags[Type]);
	}
	
	void OnKeyPress(uint8 key,uint8 letter)
	{
		Instance.CurrentIndex=Type;
		string@text=Options.GetText();
		if(key!=0x0E)
		{
			text+=letter;
		}
		Options.Text(text,(5),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008));
	}
	
	void SetText(uint id)
	{
		Options.Text(""+id,(5),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008));
	}
	
	string GetText()
	{
		return Options.GetText();
	}
}

class CWaypointElementCheckBox:IGUIElementCallbackInit,IGUIElementCallbackMouseClick
{
	
	CWaypointWindow@Instance;
	IGUIElementOpt@Options;
	
	uint8 Type;
	uint16 Flag;
	
	CWaypointElementCheckBox(CWaypointWindow&instance,uint8 type,uint16 flag)
	{
		@Instance=instance;
		Type=type;
		Flag=flag;
	}
	
	void OnInit()
	{
		@Options=GUI_GetElementOptions();
		@Instance.CheckBox[Type]=this;
		Message("chkbox "+Flag);
	}
	
	void OnMouseClick(int click)
	{
		Message(""+Instance.CurrentIndex);
		
		SetState(!Instance.Flag(Instance.CurrentIndex,Flag)); 
		
	}
	
	void SetState(bool state)
	{
		Options.Switch(state);
	}
}

class CWaypointElementMouseSelectBtn:IGUIElementCallbackInit,IGUIElementCallbackMouseClick
{
	
	CWaypointWindow@Instance;
	IGUIElementOpt@Options;
	
	uint8 Type;
	
	CWaypointElementMouseSelectBtn(CWaypointWindow&instance,uint8 type)
	{
		@Instance=instance;
		Type=type;
	}
	
	void OnInit()
	{
		@Options=GUI_GetElementOptions();
		@Instance.SelectBtn[Type]=this;
	}
	
	void OnMouseClick(int click)
	{
		__isSelectWaypoint=true;
		__WaypointWayNum=Type;
		Instance.CurrentIndex=Type;
		Instance.SaveLocalWaypoint();
		::HideScreen(0,0,0,0);
	}
}

class CWaypointElementDoneBtn:IGUIElementCallbackInit,IGUIElementCallbackMouseClick
{
	uint8 Type;
	CWaypointWindow@Instance;
	IGUIElementOpt@Options;
	
	CWaypointElementDoneBtn(CWaypointWindow&instance,uint8 type)
	{
		@Instance=instance;
		Type=type;
	}
	
	void OnInit()
	{
		@Options=GUI_GetElementOptions();
		@Instance.DoneBtn[Type]=this;
	}
	
	void OnMouseClick(int click)
	{
		if(Type>0)
		{
			Instance.SendWaypointToServer();
		}
		::HideScreen(0,0,0,0);
	}
}

void InitWaypointScreen()
{
	
	CWaypointWindow window();
	GUI_CreateScreen((-9),"teach_window.png")
	.CallbackHide(window)
	.CallbackShow(window)
	.CloseOnMiss(false)
	.AutoCursor(true,(0));
	
	window.InputText.resize((5));
	window.CheckBox.resize((10));
	window.SelectBtn.resize((5));
	window.DoneBtn.resize(2);
	
	uint16 axistX=0,axistY=0;
	
	for(uint8 i=0;i<(5);++i)
	{
		CWaypointElementInputText inputText(window,i);
		GUI_AddScreenElement((-9),"chosen_tab.png",5,5+axistY)
		.CallbackInit(inputText)
		.CallbackMouseClick(inputText)
		.TextInput(true,5,((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xFF)&0xFF)<<8)|((0)&0xFF)))));
		
		CWaypointElementMouseSelectBtn selectBtn(window,i);
		GUI_AddScreenElement((-9),"waybtselectup.png",130,5+axistY)
		.CallbackInit(selectBtn)
		.CallbackMouseClick(selectBtn)
		.DownPic("waybtselectdn.png");
		
		axistY+=25;
	}
	
	axistX=0;
	axistY=0;
	
	for(uint8 i=0;i<(10);++i)
	{
		CWaypointElementCheckBox checkBox(window,i,pow(2,i));
		GUI_AddScreenElement((-9),"PRFSLDOF.FRM",160+axistX,5+axistY)
		.CallbackInit(checkBox)
		.CallbackMouseClick(checkBox)
		.DownPic("PRFSLDON.FRM");
		
		if(i<labelArray.length())
		{
			GUI_AddScreenElement((-9),"",180+axistX,-505+axistY)
			.Text(""+labelArray[i],(5),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0008));
		}  
		
		if(i==4||i==9)
		{
			axistX+=70;
			axistY=0;
		}
		else
		{
			axistY+=25;
		} 
		
	}
	axistX=0;
	
	for(uint8 i=0;i<2;++i)
	{
		CWaypointElementDoneBtn dontBtn(window,i);
		GUI_AddScreenElement((-9),"PRFSLDOF.FRM",160+axistX,250)
		.CallbackInit(dontBtn)
		.CallbackMouseClick(dontBtn)
		.DownPic("PRFXIN.FRM");
		
		axistX+=50;
	}
}                  

