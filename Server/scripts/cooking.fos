// Скрипт для готовки еды на костре, плите используя зажигалку
// Автор: RainMan
// Дата: 03.04.2012

#include "_itempid.fos"
#include "_macros.fos"
// константы для вставки в _itempid.fos
//#define PID_RAT_MEAT             ( 1551 )
//#define PID_GECKO_MEAT           ( 1552 )
//#define PID_COOKED_MEAT          ( 1553 )
//#define PID_COOKED_RAT_MEAT      ( 1554 )
//#define PID_COOKED_GECKO_MEAT    ( 1555 )
//#define PID_COOKED_FISH          ( 1556 )   // порция жареной рыбы
//#define PID_FLAPJACK             ( 1557 )   // кукурузная лепешка
//#define PID_FLOUR                ( 1558 )   // мука
//#define PID_COOKED_MOLERAT_STOMATCH( 1559 ) // фаршированный желудок
//#define PID_SALAD                ( 1560 )   // салат
//#define PID_CABBAGE              ( 1615 )
//#define PID_CORN                 ( 1626 )
//#define PID_RAGOUT               ( 1563 )   // рагу
//#define PID_MUSH_GREEN           ( 1564 )   // грибы-звездочки
// PID_MUTATED_FRUIT
// PID_IGUANA_ON_A_STICK
// PID_MEAT_ON_A_STICK
// PID_COOKIE
// PID_MANTIS_SHELL
// PID_XANDER_ROOT
// PID_MOLERAT_STOMATCH
// PID_CORN
// PID_BROC_FLOWER
bool s_InitCook( Critter& cr, Scenery& scen, int skill, Item@ item )
{
    if( item is null )
    {
        Log( "itemnull" );
        return false;
    }
    LighterOnFire( cr, item, scen );

    return true;
}

bool ShowMenu(Critter& cr) {
	cr.ShowScreen( SCREEN_DIALOGBOX, 4, "cooking@answer_COOKING" );
	cr.Say( SAY_DIALOGBOX_TEXT, "Выберите действие" );
	cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "погреться" );
	cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "пожарить мясо" );
	cr.Say( SAY_DIALOGBOX_BUTTON( 2 ), "пожарить рыбу" );
	cr.Say( SAY_DIALOGBOX_BUTTON( 3 ), "приготовить еду" );
	return true;
}

bool UseCookingStuff( Scenery& fire, Critter& cr )
{
    if( !CanCook( fire ) )
    {
        return false;
    }
    else
    {
        ShowMenu(cr);
    }

    return true;
}

bool CanCook( Scenery@ fire ) // проверка на костер/бочку/плиту
{
    if( !valid( fire ) )
        return false;
    uint16 pid = fire.ProtoId;
    return pid == 2001 || pid == 2612 || pid == 3823 || pid ==  3824 ||
           pid == 3825 || pid ==  2682 || pid == 2683 || pid == 2684 ||
           pid == 2685 || pid == 3822;
}

bool IsMeat( Item@ meat ) // проверка на мясо, мясо геккона/крысы
{
    if( !valid( meat ) )
        return false;
    uint16 pid = meat.GetProtoId();
    return pid == PID_MEAT || pid == PID_RAT_MEAT || pid == PID_GECKO_MEAT;
}

bool IsFish( Item@ fish ) // проверка на рыбу
{
    if( !valid( fish ) )
        return false;
    uint16 pid = fish.GetProtoId();
    return pid == PID_FISH_SMALLEST || pid == PID_FISH_SMALL ||
           pid == PID_FISH || pid == PID_FISH_BIG || pid == PID_FISH_BIGGEST;
}

bool LighterOnFire( Critter& cr, Item& lighter, Scenery& fire )
{
    if( lighter.GetProtoId() != PID_LIGHTER )
        return false;
    else if( !CanCook( fire ) )
        return false;
    else
    {
        cr.ShowScreen( SCREEN_DIALOGBOX, 4, "cooking@answer_COOKING" );
        cr.Say( SAY_DIALOGBOX_TEXT, "Выберите действие" );
        cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "погреться" );
        cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "пожарить мясо" );
        cr.Say( SAY_DIALOGBOX_BUTTON( 2 ), "пожарить рыбу" );
        cr.Say( SAY_DIALOGBOX_BUTTON( 3 ), "приготовить еду" );
        return true;
    }
}

string[] foodNames = { "шашлык", "лепешка", "желудок", "салат", "рагу" };

void _WorkplaceWalk( Item& item, Critter& crit, bool entered, uint8 dir )
{
	//crit.Say(SAY_NETMSG,"Огонь горит.");
	Item@[] tokens;
	for(uint i=0, iEnd = crit.GetItems( -1, tokens ); i < iEnd;i++)
		if( tokens[i].GetProtoId() == PID_WORKBENCH_TOKEN || tokens[i].GetProtoId() == PID_FIREPLACE_TOKEN )
			DeleteItem(tokens[i]);
	DeleteItem(item);
}

void answer_COOKING( Critter& cr, uint answerI, string& answerS )
{
    if( answerI == 0 ) {
        cr.Say( SAY_EMOTE, "Греет руки" );
		Item@ token = cr.AddItem( PID_FIREPLACE_TOKEN, 1);
		Item@ holder = cr.GetMap().AddItem(cr.HexX,cr.HexY,PID_POPUP,1);
		holder.SetEvent( ITEM_EVENT_WALK, "_WorkplaceWalk" );
	}

	if( cr.Timeout[ TO_SK_REPAIR ] > REAL_MINUTE( cr.Stat[ ST_ENDURANCE ] ) ) {
		cr.Say( SAY_NETMSG, "Вы слишком устали, что бы готовить." ); return; 
	}
	
    Item@ item = /*GetItem(*/ _CritGetItemHand( cr ) /*)*/;
    if( item is null && answerI >= 1 && answerI <= 2 )
    {
        cr.Say( SAY_NETMSG, "Для этого вам понадобиться мясо в руках." );
        return;
    }

    if( answerI == 1 )
    {
        // проверка на мясо в руке. В зависимости от pid - обжаривается данный тип
        // Item@ meat = _CritGetItemHand(cr);						//move from if block pm
        if( IsMeat( item ) ) // жарим мясо, удаляя мясо и добавляя новое
        {
            // _CritDeleteItem(cr, item.GetProtoId, 1);

            switch( item.GetProtoId() )
            {
            case PID_MEAT:
                _CritAddItem( cr, PID_COOKED_MEAT, 1 );
                break;
            case PID_RAT_MEAT:
                _CritAddItem( cr, PID_COOKED_RAT_MEAT, 1 );
                break;
            case PID_GECKO_MEAT:
                _CritAddItem( cr, PID_COOKED_GECKO_MEAT, 1 );
                break;
            default:
                break;
            }
            cr.Say( SAY_NETMSG, "Вы успешно пожарили мясо" );
            _SubItem( item, 1 );
        }
        else
            cr.Say( SAY_NETMSG, "Даже после обжарки эта вещь будет несъедобна" );
    }
    if( answerI == 2 )
    {
        // Item@ fish = _CritGetItemHand(cr);
        if( IsFish( item ) ) // жарим рыбу
        {
            // _CritDeleteItem(cr, fish.ProtoId, 1);

            switch( item.GetProtoId() )
            {
            case PID_FISH_SMALLEST:
                _CritAddItem( cr, PID_COOKED_FISH, 1 );
                break;
            case PID_FISH_SMALL:
                _CritAddItem( cr, PID_COOKED_FISH, 2 );
                break;
            case PID_FISH:
                _CritAddItem( cr, PID_COOKED_FISH, 3 );
                break;
            case PID_FISH_BIG:
                _CritAddItem( cr, PID_COOKED_FISH, 4 );
                break;
            case PID_FISH_BIGGEST:
                _CritAddItem( cr, PID_COOKED_FISH, 5 );
                break;
            default:
                break;
            }
            cr.Say( SAY_NETMSG, "Вы успешно пожарили рыбу" );

            _SubItem( item, 1 );
        }
        else
            cr.Say( SAY_NETMSG, "Даже после обжарки эта вещь будет несъедобна" );
    }
    if( answerI == 3 )
    {
        // в зависимости от навыка скитальца выводится список доступных рецептов.
        /* рецепты:
         * шашлык: кусок мяса, корень зандера
         * фаршированный желудок: желудок, цветок брока X 2 , кусок мяса
         * мясное рагу: кусок мяса Х 2, корень зандера, цветок брока
         * кукурузная лепешка: кукуруза, корень зандера
         * салат: фрукт, грибы белые X 2
         */
        uint16 count = 0;
        if( cr.Skill[ SK_OUTDOORSMAN ] < 40 )
            cr.Say( SAY_NETMSG, "Вы не знаете ни одного полезного рецепта для готовки" );
        if( cr.Skill[ SK_OUTDOORSMAN ] >= 40 )
            count += 2;
        if( cr.Skill[ SK_OUTDOORSMAN ] >= 60 )
            count += 2;
        if( cr.Skill[ SK_OUTDOORSMAN ] >= 80 )
            ++count;

        cr.ShowScreen( SCREEN_DIALOGBOX, count, "cooking@answer_PATTERN" );
        cr.Say( SAY_DIALOGBOX_TEXT, "Выберите рецепт" );

        for( uint8 i = 0; i < count; i++ )
        {
            cr.Say( SAY_DIALOGBOX_BUTTON( i ), "" + foodNames[ i ] );
        }

        /*cr.Say(SAY_DIALOGBOX_BUTTON(0),"шашлык");
           cr.Say(SAY_DIALOGBOX_BUTTON(1),"кукурузная лепешка");
           cr.Say(SAY_DIALOGBOX_BUTTON(2),"фаршированный желудок");
           cr.Say(SAY_DIALOGBOX_BUTTON(3),"салат");
           cr.Say(SAY_DIALOGBOX_BUTTON(4),"мясное рагу в панцире");*/
    }

}

void answer_PATTERN( Critter& cr, uint answerI, string& answerS )
{
    if( answerI == 0 ) // шашлык
    {
        if( _CritCountItem( cr, PID_MEAT ) > 0 && _CritCountItem( cr, PID_XANDER_ROOT ) > 0 )
        {
            _CritDeleteItem( cr, PID_MEAT, 1 );
            _CritDeleteItem( cr, PID_XANDER_ROOT , 1 );
            _CritAddItem( cr, PID_MEAT_ON_A_STICK, 1 );
            cr.Say( SAY_NETMSG, "Вам удалось приготовить что-то съедобное" );
        }
        else if( _CritCountItem( cr, PID_MEAT ) == 0 )
            cr.Say( SAY_NETMSG, "Все-таки даже для такого шашлыка вам понадобится мясо" );
        else if(_CritCountItem( cr, PID_XANDER_ROOT ) == 0) 
            cr.Say( SAY_NETMSG, "Вам кажется что корень зандера не помешает" );
    }
    if( answerI == 1 )     // кукурузная лепешка
    {
        if( _CritCountItem( cr, PID_CORN) > 0 && _CritCountItem( cr, PID_XANDER_ROOT ) > 0 )
        {
            _CritDeleteItem( cr, PID_CORN, 1 );
            _CritDeleteItem( cr, PID_XANDER_ROOT, 1 );
            _CritAddItem( cr, PID_FLAPJACK, 1 );
            cr.Say( SAY_NETMSG, "Вам удалось приготовить что-то съедобное" );
        }
       else if( _CritCountItem( cr, PID_CORN ) == 0 )
            cr.Say( SAY_NETMSG, "Для начала вам понадобится кукуруза" );
       else if( _CritCountItem( cr, PID_XANDER_ROOT ) == 0 )
            cr.Say( SAY_NETMSG, "Вам кажется что корень зандера не помешает" );
    }
    if( answerI == 2 )     // фаршированный желудок
    {
        if( _CritCountItem( cr, PID_MEAT ) > 0 && _CritCountItem( cr, PID_MOLERAT_STOMATCH ) > 0 && _CritCountItem( cr, PID_BROC_FLOWER ) > 1 )
        {
            _CritDeleteItem( cr, PID_BROC_FLOWER, 2 );
            _CritDeleteItem( cr, PID_MEAT, 1 );
            _CritDeleteItem( cr, PID_MOLERAT_STOMATCH, 1 );
            _CritAddItem( cr, PID_COOKED_MOLERAT_STOMATCH, 1 );
            cr.Say( SAY_NETMSG, "Вам удалось приготовить что-то съедобное" );
        }
       else if( _CritCountItem( cr, PID_MOLERAT_STOMATCH ) == 0 )
            cr.Say( SAY_NETMSG, "Для начала вам понадобится желудок кротокрыса" );
       else if( _CritCountItem( cr, PID_MEAT ) == 0 )
            cr.Say( SAY_NETMSG, "Вам кажется что мясо пойдет как отличное наполнение" );
      else if( _CritCountItem( cr, PID_BROC_FLOWER ) < 2 )
            cr.Say( SAY_NETMSG, "Побольше цветка Брока в виде приправы - лучший выбор выживальца" );

    }
    if( answerI == 3 )     // салат
    {
        if( _CritCountItem( cr, PID_MUSH_LOW ) > 1 && _CritCountItem( cr, PID_MUTATED_FRUIT ) > 0 )
        {
            _CritDeleteItem( cr, PID_MUTATED_FRUIT, 1 );
            _CritDeleteItem( cr, PID_MUSH_LOW, 2 );
            _CritAddItem( cr, PID_SALAD, 1 );
            cr.Say( SAY_NETMSG, "Вам удалось приготовить что-то съедобное" );
        }
      else if( _CritCountItem( cr, PID_MUSH_LOW ) < 2 )
            cr.Say( SAY_NETMSG, "Вы считаете что несколько хороших грибов хорошо пойдет в салат" );
      else if( _CritCountItem( cr, PID_MUTATED_FRUIT ) == 0 )
            cr.Say( SAY_NETMSG, "Вам кажется что мутафрукт будет хорошо сочетаться с грибами" );
    }
    if( answerI == 4 ) // мясное рагу
    {
        if( _CritCountItem( cr, PID_MEAT ) > 1 && _CritCountItem( cr, PID_XANDER_ROOT ) > 0 && _CritCountItem( cr, PID_BROC_FLOWER ) > 0)
        {
            _CritDeleteItem( cr, PID_MEAT, 2 );
            _CritDeleteItem( cr, PID_XANDER_ROOT, 1 );
            _CritDeleteItem( cr, PID_BROC_FLOWER, 1 );
            _CritAddItem( cr, PID_RAGOUT, 1 );
            cr.Say( SAY_NETMSG, "Вам удалось приготовить что-то съедобное" );
        }
       else if( _CritCountItem( cr, PID_MEAT ) < 2 )
            cr.Say( SAY_NETMSG, "Как рагу может быть мясным без пары кусков хорошего мяса?" );
       else if( _CritCountItem( cr, PID_XANDER_ROOT ) == 0 )
            cr.Say( SAY_NETMSG, "Приправа в виде корня Зандера - вы думаете это неплохо" );
      else if( _CritCountItem( cr, PID_BROC_FLOWER ) == 0 )
            cr.Say( SAY_NETMSG, "Немного цветка Брока завершит это блюдо" );
    }

}
