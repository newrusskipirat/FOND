

bool LocIsModoc(uint locPid)
{
	return(locPid<=(1253));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(32)||locPid==(1216)||locPid==(43)||locPid==96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(42));
}

bool LocIsHidden(uint locPid)
{
	return false;
}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

shared interface Project
{
	string@get_Name();
	void Build();
	void SetAssociation(string@ex,string@className,string@classModule);
}

shared interface FileObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	void FormatStringData(string&nameData,string&data);
	FileObject@get_Pattern(string&name)const;
	FileObject@get_Copy(string&name); 
	
	void set_GlobalData(string@name,string@value);          
	
	string@get_GlobalData(string@name);            
	
}

shared class TimeLog
{
	uint tick;
	
	TimeLog()
	{
		refresh();
	}
	
	void refresh()
	{
		tick=GetTick();
	}
	
	bool check(uint count)
	{
		return(GetTick()-tick>=count);
	}
	
	uint get()
	{
		uint old=tick;
		refresh();
		return(tick-old);
	}
	
	void Log(string&in message)
	{
		::ClearLog(message+" ["+(GetTick()-tick)+"ms]");
	}
}

shared interface AnyDataObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	uint[]@get_SaveData();
	void InitData(uint[]&data);
}

shared interface ManagerObject
{
	FileObject@get_ProtoObject(string@name);
	void ParseProtoTypes(const string&ex,const FileObject&pattern,const string@search);
	FileObject@ParseProtoTypeFile(string&name,const string&ex,const FileObject&pattern,const string@search);
	FileObject@AddPrototype(FileObject@proto);
	FileObject@StringToFileObject(string&name,string&txt,const FileObject&pattern);
}

shared interface ValueAPI{}
shared class SettingsAPI
{
	string Name;
	bool IsDebug;
} 

shared class GlobalData
{
	uint Hash;
	string Value;
	
	GlobalData(string@name)
	{
		Hash=GetStrHash(name);
		Value="";
	} 
	
	void SaveData(uint[]&outArray,uint&position)
	{
		uint len=Value.length();
		
		outArray.resize(position+2+len/2);
		
		outArray[position++]=Hash;
		outArray[position++]=len;
		
		for(uint i=0;i<len;i++)
		{
			outArray[position]|=Value[i++]<<24;
			outArray[position]|=Value[i++]<<16;
			outArray[position]|=Value[i++]<<8;
			outArray[position++]|=Value[i];
		}
	} 
	
	void LoadData(uint[]&in outArray,uint&position)
	{
		Hash=outArray[position++];
		uint len=outArray[position++];
		Value.resize(len);
		
		for(uint i=0;i<len;i++)
		{
			Value[i++]=(outArray[position]>>24)&0xFF;
			Value[i++]=(outArray[position]>>16)&0xFF;
			Value[i++]=(outArray[position]>>8)&0xFF;
			Value[i]=outArray[position++]&0xFF;
			
		}
	}
} 

shared class Hexagonal
{
	Hexagonal(){Reset();}
	Hexagonal(const uint16&in x,const uint16&in y){Set(x,y);}
	Hexagonal(const Hexagonal&master){Set(master);}
	
	Hexagonal(const Critter&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Item&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Scenery&master){Set(master.HexX,master.HexY);}
	
	bool Entire(Map&map,int entNum){return map.GetEntireCoords(entNum,0,X,Y);}
	bool IsPassed(Map&map){return ValidPosition(map)&&map.IsHexPassed(X,Y);}
	bool IsPassed(Map&map,Hexagonal&begin,Hexagonal&end){return ValidPosition(map,begin,end)&&map.IsHexPassed(X,Y);}
	
	bool ValidPosition(Map&map)
	{
		Hexagonal end,begin;
		if(end.Entire(map,0)&&begin.Entire(map,255))
		return ValidPosition(map,begin,end);
		return false;
	}
	
	bool ValidPosition(Map&map,Hexagonal&begin,Hexagonal&end)
	{
		return(X>=begin.X&&Y>=begin.Y
		&&X<=end.X&&Y<=end.Y);
	}
	
	bool Transit(Critter&critter,Map&map){return Transit(critter,map,critter.Dir);}
	bool Transit(Critter&critter,Map&map,uint8 direction)
	{
		if(!IsPassed(map))return false;
		return critter.TransitToMap(map.Id,X,Y,direction);
	}
	
	bool Transit(Critter&critter,uint mapId){return Transit(critter,mapId,critter.Dir);}
	bool Transit(Critter&critter,uint mapId,uint8 direction)
	{
		if(mapId==0)return false;
		Map@map=GetMap(mapId);
		if(@map is null)return false;
		return Transit(critter,map,direction);
	} 
	
	void Set(const uint16&in x,const uint16&in y){X=x;Y=y;}
	void Set(const Hexagonal&in other){Set(other.X,other.Y);}
	void Reset(){X=Y=0;}
	uint Distantion(Hexagonal&other){return GetDistantion(X,Y,other.X,other.Y);}
	
	uint16 X;
	uint16 Y;
	
	bool opEquals(const Hexagonal&in other){return(other.X==X&&other.Y==Y);}
	Hexagonal&opAssign(const Hexagonal&in other)
	{
		Set(other);
		return this;
	}
	
	const uint get_UID(const uint w)const{return X+Y*w;}
	string get_Debug(){return"X:"+X+"Y:"+Y;}
	void Log(string&str){::Log(str+":"+Debug);}
}    

shared class MapHash
{
	MapHash(const uint16&in protoId)
	{
		ProtoId=protoId;
		@Min=null;
		@Max=null;
	}
	
	MapHash&opAssign(Map&map)
	{
		@Min=Hexagonal(0,0);
		@Max=Hexagonal(0,0);
		map.GetEntireCoords(0,0,Max.X,Max.Y);
		map.GetEntireCoords((255),0,Min.X,Min.Y);
		return this;
	}
	
	uint16 ProtoId;
	Hexagonal@Min;
	Hexagonal@Max;
} 

shared class Line
{
	Line(Hexagonal&a,Hexagonal&b){@A=a;@B=b;}
	
	uint get_Length()
	{
		return B.Distantion(A);
	}
	
	uint get_Point(Hexagonal&point)
	{
		return B.Distantion(point);
	}
	
	float get_Module(Hexagonal&point)
	{
		return Point[point]/Length;
	}
	
	Hexagonal@get_opIndex(const uint&in size)
	{
		
		const float mod=float(size/Length);
		return@Hexagonal(A.X+(B.X-A.X)*mod,A.Y+(B.Y-A.Y)*mod);
	} 
	
	Line(Map&map,uint16 grid,MapHash@hash)
	{
		if(@hash is null)
		{
			Hexagonal min,max;
			map.GetTransferParams(min.X,min.Y,max.X,max.Y,grid);
			
			@A=@Hexagonal(min.X,min.Y);
			@B=@Hexagonal(max.X,max.Y);
		}
		else
		{
			if(@hash.Min is null||@hash.Max is null)
			map.GetTransferParams(hash.Min.X,hash.Min.Y,hash.Max.X,hash.Max.Y,grid);
			
			@A=@Hexagonal(hash.Min.X,hash.Min.Y);
			@B=@Hexagonal(hash.Max.X,hash.Max.Y);
		}
	} 
	
	string get_Debug(){return"A<"+A.Debug+">B<"+B.Debug+">";}
	void Log(string&str){::Log(str+":"+Debug);}
	
	Hexagonal@A;
	Hexagonal@B;
}  

import MapHash@GetMapHash(const uint16&in pid)from"world";
import uint CreateLocation(Hexagonal&coordinate,uint16 locationPid)from"world"; 

import ManagerObject@get_objectManager()from"world"; 

import EventTree@get_EventRoot()from"world"; 

import Project@CreateProject(string@name,string@path)from"main";
import Project@get_Project(string@name)from"main";                                                                                                                    

bool AddMiscPlane(Critter&npc,uint priority,uint waitSecond,string@funcName)
{
	NpcPlane@plane=CreatePlane();
	plane.Type=(0);
	plane.Priority=(priority==0?(10):priority);
	plane.Misc_WaitSecond=waitSecond;
	if((@funcName!=null)&&not plane.Misc_SetScript(funcName))
	{
		Log("Set script <"+funcName+"> fail");
		return false;
	}
	return npc.AddPlane(plane);
}

bool AddWalkPlane(Critter&npc,uint entire,uint cut,bool run)
{
	uint16 hX=0,hY=0;
	Map@map=npc.GetMap();
	if((@map!=null)&&map.GetEntireCoords(entire,0,hX,hY))
	{
		return AddWalkPlane(npc,0,hX,hY,6,run,cut);
	}
	return false;
}

bool AddWalkPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)
{
	if(not npc.IsCanWalk())
	return false;
	
	NpcPlane@plane=CreatePlane();
	plane.Type=(2);
	plane.Priority=(priority==0?(20):priority);
	plane.Walk_HexX=hexX;
	plane.Walk_HexY=hexY;
	plane.Walk_Dir=dir;
	plane.Run=run;
	plane.Walk_Cut=cut;
	return npc.AddPlane(plane);
}

bool AddWalkPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)
{
	if(not npc.IsCanWalk())
	return false;
	
	NpcPlane@plane=CreatePlane();
	plane.Type=(2);
	plane.Priority=(priority==0?(20):priority);
	plane.Identifier=identifier;
	plane.IdentifierExt=identifierExt;
	plane.Walk_HexX=hexX;
	plane.Walk_HexY=hexY;
	plane.Walk_Dir=dir;
	plane.Run=run;
	plane.Walk_Cut=cut;
	return npc.AddPlane(plane);
}

bool AddAttackPlane(Critter&npc,uint priority,Critter&target)
{
	return AddAttackPlane(npc,priority,target,__DeadHitPoints);
}

bool AddAttackPlane(Critter&npc,uint priority,uint critId)
{
	Critter@target=GetCritter(critId);
	if(not(@target!=null))
	{
		Log("Target not found.");
		return false;
	}
	return AddAttackPlane(npc,priority,target);
}

bool AddAttackPlane(Critter&npc,uint priority,Critter&target,int minHp)
{
	return AddAttackPlane(npc,priority,target,minHp,true);
}

bool AddAttackPlane(Critter&npc,uint priority,uint critId,int minHp)
{
	Critter@target=GetCritter(critId);
	if(not(@target!=null))
	{
		Log("Target not found.");
		return false;
	}
	
	return AddAttackPlane(npc,priority,target,minHp);
}

bool AddAttackPlane(Critter&npc,uint priority,Critter&target,bool run)
{
	return AddAttackPlane(npc,priority,target,__DeadHitPoints,run);
}

bool AddAttackPlane(Critter&npc,uint priority,uint critId,bool run)
{
	Critter@target=GetCritter(critId);
	if(not(@target!=null))
	{
		Log("Target not found.");
		return false;
	}
	
	return AddAttackPlane(npc,priority,target,run);
}

bool AddAttackPlane(Critter&npc,uint priority,Critter&target,int minHp,bool run)
{
	NpcPlane@plane=CreatePlane();
	plane.Type=(1);
	plane.Priority=(priority==0?(50):priority);
	plane.Attack_TargId=target.Id;
	plane.Attack_MinHp=minHp;
	plane.Attack_IsGag=false;
	plane.Attack_GagHexX=0;
	plane.Attack_GagHexY=0;
	plane.Attack_LastHexX=target.HexX;
	plane.Attack_LastHexY=target.HexY;
	plane.Run=run;
	return npc.AddPlane(plane);
}

bool AddAttackPlane(Critter&npc,uint priority,uint critId,int minHp,bool run)
{
	Critter@target=GetCritter(critId);
	if(not(@target!=null))
	{
		Log("Target not found.");
		return false;
	}
	
	return AddAttackPlane(npc,priority,target,minHp,run);
}

bool AddPickPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint16 protoId,uint useItemId,bool toOpen)
{
	NpcPlane@plane=CreatePlane();
	plane.Type=(3);
	plane.Priority=(priority==0?(35):priority);
	plane.Pick_HexX=hexX;
	plane.Pick_HexY=hexY;
	plane.Pick_Pid=protoId;
	plane.Pick_UseItemId=useItemId;
	plane.Pick_ToOpen=toOpen;
	plane.Run=false;
	return npc.AddPlane(plane);
}

bool AddPickPlane(Critter&npc,uint priority,Item@item,uint useItemId,bool toOpen)
{
	NpcPlane@plane=CreatePlane();
	plane.Type=(3);
	plane.Priority=(priority==0?(35):priority);
	plane.Pick_HexX=item.HexX;
	plane.Pick_HexY=item.HexY;
	plane.Pick_Pid=item.GetProtoId();
	plane.Pick_UseItemId=useItemId;
	plane.Pick_ToOpen=toOpen;
	plane.Run=false;
	return npc.AddPlane(plane);
}

uint EraseAttackPlane(Critter&npc,Critter&target)
{
	return EraseAttackPlane(npc,target.Id);
}

uint EraseAttackPlane(Critter&npc,uint critId)
{
	NpcPlane@[]planes;
	uint count=npc.GetPlanes(planes);
	if(count==0)
	return 0;
	
	uint erased=0;
	for(uint i=0;i<count;i++)
	{
		if(planes[i].Attack_TargId==critId&&npc.ErasePlane(i-erased))
		erased++;
	}
	
	return erased;
}
