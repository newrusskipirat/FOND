

bool LocIsModoc(uint locPid)
{
	return(locPid<=(1253));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(32)||locPid==(1216)||locPid==(43)||locPid==96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(42));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

shared interface Project
{
	string@get_Name();
	void Build();
	void SetAssociation(string@ex,string@className,string@classModule);
}

shared interface FileObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	void FormatStringData(string&nameData,string&data);
	FileObject@get_Pattern(string&name)const;
	FileObject@get_Copy(string&name);                           
	
}

shared class TimeLog
{
	uint tick;
	
	TimeLog()
	{
		refresh();
	}
	
	void refresh()
	{
		tick=GetTick();
	}
	
	bool check(uint count)
	{
		return(GetTick()-tick>=count);
	}
	
	uint get()
	{
		uint old=tick;
		refresh();
		return(tick-old);
	}
	
	void Log(string&in message)
	{
		::ClearLog(message+" ["+(GetTick()-tick)+"ms]");
	}
}

shared interface AnyDataObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	uint[]@get_SaveData();
	void InitData(uint[]&data);
}

shared interface ManagerObject
{
	FileObject@get_ProtoObject(string@name);
	void ParseProtoTypes(const string&ex,const FileObject&pattern,const string@search);
	FileObject@ParseProtoTypeFile(string&name,const string&ex,const FileObject&pattern,const string@search);
	FileObject@AddPrototype(FileObject@proto);
	FileObject@StringToFileObject(string&name,string&txt,const FileObject&pattern);
}

shared interface ValueAPI{}
shared class SettingsAPI
{
	string Name;
	bool IsDebug;
}                                                  

shared class Hexagonal
{
	Hexagonal(){Reset();}
	Hexagonal(const uint16&in x,const uint16&in y){Set(x,y);}
	Hexagonal(const Hexagonal&master){Set(master);}                                       
	
	void Set(const uint16&in x,const uint16&in y){X=x;Y=y;}
	void Set(const Hexagonal&in other){Set(other.X,other.Y);}
	void Reset(){X=Y=0;}
	uint Distantion(Hexagonal&other){return GetDistantion(X,Y,other.X,other.Y);}
	
	uint16 X;
	uint16 Y;
	
	bool opEquals(const Hexagonal&in other){return(other.X==X&&other.Y==Y);}
	Hexagonal&opAssign(const Hexagonal&in other)
	{
		Set(other);
		return this;
	}
	
	const uint get_UID(const uint w)const{return X+Y*w;}
	string get_Debug(){return"X:"+X+"Y:"+Y;}
	void Log(string&str){::Log(str+":"+Debug);}
}                            

shared class Line
{
	Line(Hexagonal&a,Hexagonal&b){@A=a;@B=b;}
	
	uint get_Length()
	{
		return B.Distantion(A);
	}
	
	uint get_Point(Hexagonal&point)
	{
		return B.Distantion(point);
	}
	
	float get_Module(Hexagonal&point)
	{
		return Point[point]/Length;
	}
	
	Hexagonal@get_opIndex(const uint&in size)
	{
		
		const float mod=float(size/Length);
		return@Hexagonal(A.X+(B.X-A.X)*mod,A.Y+(B.Y-A.Y)*mod);
	}                      
	
	string get_Debug(){return"A<"+A.Debug+">B<"+B.Debug+">";}
	void Log(string&str){::Log(str+":"+Debug);}
	
	Hexagonal@A;
	Hexagonal@B;
}                                                                                                                                                                                                      

bool hashes_inited=false;

uint[][]hashes_sand((8));

void init_hashes()
{
	string dir="art/tiles/",
	edg="edg",
	frm=".frm";
	
	for(uint type=0;type<(8);type++)
	{
		uint[]@data=hashes_sand[type];
		data.resize(0);
		uint i=0;
		
		switch(type)
		{
			case(0):
			{
				for(i=0;i<=4;i++)
				data.insertLast(GetStrHash(dir+"edgs00"+i+frm));
			}break;
			case(1):
			{
				for(i=1000;i<=1003;i++)
				data.insertLast(GetStrHash(dir+edg+i+frm));
			}break;
			case(2):
			{
				for(i=2000;i<=2003;i++)
				data.insertLast(GetStrHash(dir+edg+i+frm));
			}break;
			case(3):
			{
				for(i=3000;i<=3001;i++)
				data.insertLast(GetStrHash(dir+edg+i+frm));
			}break;
			case(4):
			{
				for(i=4000;i<=4008;i++)
				data.insertLast(GetStrHash(dir+edg+i+frm));
			}break;
			case(5):
			{
				for(i=5000;i<=5008;i++)
				data.insertLast(GetStrHash(dir+edg+i+frm));
			}break;
			case(6):
			{
				for(i=6000;i<=6011;i++)
				data.insertLast(GetStrHash(dir+edg+i+frm));
			}break;
			case(7):
			{
				for(i=7000;i<=7003;i++)
				data.insertLast(GetStrHash(dir+edg+i+frm));
			}break;
		}
	}
	
	hashes_inited=true;
}

uint[][]@GetSandHashes()
{
	if(!hashes_inited)
	init_hashes();
	
	return hashes_sand;
}                                                                                                           

