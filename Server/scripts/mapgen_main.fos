// PowerMagic
// Основной скрипт генерации карт.

#include "_mapgen.fos"
#include "mapgen_tree.fos"
#include "mapgen_city.fos"
#include "mapgen_paste_items.fos"
#include "_macros.fos"
#include "_math.fos"

#define COUNTER_Y       ( 1 )
#define COUNTER_X       ( 2 )
#define COUNTER_Y_FN    ( 3 )
#define COUNTER_X_FN    ( 4 )


void _MapTreasure( Map& map, bool FirstTime )
{
    map.SetEvent( MAP_EVENT_IN_CRITTER, "_critterIn" );
    map.SetEvent( MAP_EVENT_OUT_CRITTER, "_critterOut" );
}
void _MapInit( Map& map, bool FirstTime ) // , Critter& player)
{
    uint16 hexX = 95;
    uint16 hexY = 95;
    string logMsg;
//     Item @ item = map.AddItem(hexX, hexY, 141, 1);
/*
    if(valid(item))
    {
      Log("item add");
      item.LightIntensity = 100;
      item.LightRadius = 10;
      item.LightColor = 00446633;
      item.Update();
    }*/
//    uint8 lenght = 10;

    // MakeStoneRoad(map, Random(ReturnCoord(map, 25, true),ReturnCoord(map,26,true)), ReturnCoord(map, 25, false), ReturnCoord(map, 27, false) - ReturnCoord(map, 25, false));
// map.SetTime(240);
/*
   MakeStoneRoad(map, 94, 89, 64, 47);
   MakeStoneRoad(map, 94, 89, 138, 79);
   MakeStoneRoad(map, 94, 89, 173, 126);
   MakeStoneRoad(map, 94, 89, 97, 163);
   MakeStoneRoad(map, 94, 89, 58, 104);*/
// GetAllItemOnMap(map);
/*
   logMsg = "total pl on map = " +map.GetData(MAP_PLAYERS_COUNT);
   Log(logMsg);*/
    map.SetEvent( MAP_EVENT_IN_CRITTER, "_critterIn" );
    map.SetEvent( MAP_EVENT_OUT_CRITTER, "_critterOut" );
// MakeStoneRoadNew(map, 50,50,30,2,2);
// MakeFewRoads(map);
    PeasteTree( map, 1000, -1 );
}

uint16 ReturnCoord( Map& map, uint8 ent, bool xOrY ) // xOrY - определитель возвращаемой оси x == true , y == false
{
    string msg;
    uint16 hex = 0;
    uint16 dummy = 0;
    if( xOrY == true )
    {
        if( not map.GetEntireCoords( ent, 0, hex, dummy ) )
        {
            msg = "Spec. hex not found" + ent;
            Log( msg );
        }
    }
    else // (Entire nubmer - "); Log(hex); Log(" not found");}}
    {
        if( not map.GetEntireCoords( ent, 0, dummy, hex ) )
        {
            msg = "Spec. hex not found" + ent;
            Log( msg );
        }
    }                                                                                           // (Entire nubmer - "); Log(hex); Log(" not found");}}
    return hex;
}

uint16 GenRandomCoord( uint16 pos1, uint16 pos2 )
{
    uint16 rndPosY = Random( pos1, pos2 );
    return rndPosY;
}

void MakeFloor( Map& map )
{
    for( uint16 i = ReturnCoord( map, 25, false ); i < ReturnCoord( map, 27, false ); i++ )
    {
        for( uint16 j = ReturnCoord( map, 25, true ); j < ReturnCoord( map, 26, true ); j++ )
        {
            PasteTiles( map, j, i, 1999 );
        }
    }
}


// события происходящие при входе игрока на карту
void _critterIn( Map& map, Critter& cr )
{
    if( map.GetData( MAP_PLAYERS_COUNT ) == 0 ) // вход первого игрока
    {
        PasteItems( map, cr );
        AddItemsToCont( map );
        GetItemsOnSecretMap( map, cr );
        FindTreasure( map, cr );
//     MakeManyFrtHouses(map, 1);
//         map.SetLoopTime(4, 2000);
//     map.SetEvent(MAP_EVENT_LOOP_4 , "_Lvl1MapLoop1");
//     MakeFloor(map);
//     TestAddItem(map);
//     MakeHouse(map, Random(5,14), Random(8,18), 90, 60);
//     map.SetData(MAP_PLAYERS_ID, cr.Id);
//     Log("done");
    }

    if( map.GetData( MAP_PLAYERS_COUNT ) >= 0 )
    {
        map.SetData( MAP_PLAYERS_COUNT, map.GetData( MAP_PLAYERS_COUNT ) + 1 );
    }
    // string logMsg;

    // logMsg = ReturnGmapSector(cr, true) + " " + ReturnGmapSector(cr, false);
    // Log(logMsg);
}

void _critterOut( Map& map, Critter& cr )
{
    if( map.GetData( MAP_PLAYERS_COUNT ) > 0 )
    {
        map.SetData( MAP_PLAYERS_COUNT, map.GetData( MAP_PLAYERS_COUNT ) - 1 );
    }
    if( map.GetData( MAP_PLAYERS_COUNT ) == 0 )
    {
//    Log("yep");
        GetAllItemsOnMap( map, cr );
        GetTreasureHoles( map, cr );
    }
    //  string logMsg;
//  PasteItems(map, cr);
//  logMsg = ReturnGmapSector(cr, true) + " " + ReturnGmapSector(cr, false);
//  Log(logMsg);
}

uint8 ReturnGmapSector( Critter& cr, bool xOrY ) // xOrY - определитель возвращаемой оси x == true , y == false
{
    int dummy = 0;
    if( xOrY == true )
    {
        dummy = ABS( cr.WorldX / GLOBAL_MAP_SECTOR_LENGTH );
        return dummy;
    }
    else
    {
        dummy = ABS( cr.WorldY / GLOBAL_MAP_SECTOR_LENGTH );
        return dummy;
    }
    return 0;
}

bool ReturnFindRadius( Critter& pl, Item& item, uint8 radius )
{
    if( ABS( ( pl.WorldX + radius ) - item.Val7 ) >= 0 && ABS( ( pl.WorldY + radius ) - item.Val8 ) >= 0 )
    {
        return true;
    }
    return false;
}


// ********************************* крыши! *****************************//



bool ReturnItemCoord( uint itemId, uint16& hexX, uint16& hexY )
{
    Item @ item = GetItem( itemId );
    if( !valid( item ) )
    {
        return false;
    }
    hexX = item.HexX;
    hexY = item.HexY;
    return true;
}
/*
   void GetMapLoopCoord(Map& map,bool& firstTime)
   {
   if(firstTime)
   {

   }
   }



   void _Lvl1MapLoop1(Map& map)
   {
   //	Log("Loop1");
        //DL("map loop fired");
        int[] shit;
        Item @ roof;
        Critter @[] players;
        Critter @[] npcs;
        if(map.GetCritters(0, FIND_LIFE|FIND_ONLY_PLAYERS, players)==0) return;
        if(map.GetCritters(0, FIND_LIFE|FIND_ONLY_NPC, npcs)==0) return;
        //DL("Before cycle");
        for(uint i = 0, l = players.length();i<l;i++)
        {
                Critter @ player = players[i];
                if(!valid(player)) continue;
   //           DL("loop" + l);
                if(IsCritterInDeadZone(player, map, 0, map.GetData(MAP_DATA_HOUSE_ROOF_HEX), map.GetData(MAP_DATA_HOUSE_ROOF_HEX - 1)))
                {
                        //DL("found wrong player");
                        player.Say(SAY_NETMSG, "work");
                        uint16 counter = 0;
                        for(uint8 jj = 60; jj < 90; jj++)
                        {
                          for(uint8 ii = 60; ii < 90; ii++)
                          {
                            @roof = map.GetItem(ii, jj, MAPGEN_TILE_FRT_0);
                            SETFLAG(roof.Flags, ITEM_HIDDEN);
                            roof.Update();
                            shit[counter] = roof.Id;
                            counter++;
                          }
                        }
   //                       int[]& shit2;
   //                       shit2 = shit;
   //                       player.RunClientScript("__ShowRoof",0, 0, 0, null, shit);
   //                   player.RunClientScript("__ShowRoof", map.GetData(MAP_DATA_HOUSE_ROOF_HEX), 20, 20, null, null);
                        for(uint j=0,ln=npcs.length();j<ln;j++)
                        {
                                Critter @ npc = npcs[j];
                                if(valid(npc))
                                {
                                        //DL("attack plane erased");
                                        //if (npc.CheckEnemyInStack (player.Id)) DL("in stack");
   //                                   EraseAttackPlane(npc, player);
                                }
                        }
                }else{
                        //DL("ok coords");
                }
        }

   }




   //from loc_tech_bunker.fos by rifleman17  взято с разрешения автора ;)
   void _RoofLoop(Map& map) //724
   {
   //   bool firstTime = true;
   Critter @[] players;
   uint8 count = map.GetData(MAP_DATA_HOUSE_ROOF_COUNT);
   //   uint16[] hex;
   //   if(firstTime)
   //   {
   //       for(uint8 i = 0, j = 0; i < count; i++)
   //   {
   //     hex[j] = map.GetData(MAP_DATA_HOUSE_ROOF_HEX - j);
   //     hex[j+1] = map.GetData(MAP_DATA_HOUSE_ROOF_HEX - j - 1);
   //     j+=2;
   //     Log("firstTime true");
   //   }
   //   firstTime = false;
   //   }
   //   else
   //   {
        if(map.GetCritters(0, FIND_LIFE|FIND_ONLY_PLAYERS, players)==0) return;
        for(uint i = 0; i < players.length(); i++)
        {
                Critter @ player = players[i];
                if(!valid(player)) continue;
   //           DL("loop" + l);
   //           for(uint8 i = 0, j = 0; i < count; i++)
   //           {
                  if(IsCritterInDeadZone(player, map, 0, map.GetData(MAP_DATA_HOUSE_ROOF_HEX), map.GetData(MAP_DATA_HOUSE_ROOF_HEX - 1)))
                    {
                        player.Say(SAY_NETMSG, "wow! that's work");
                    }else{
                        //DL("ok coords");
                  }
   //           j+=2;
   //           }
        }
   //   }

   }

   /*
   void TestAddItem(Map& map)
   {
   string logMsg;
   for(uint8 i = 0; i < 10; i++)
   {
    Item @ item = map.AddItem(95, 95, 10,1);
    logMsg = "item id = "+item.Id;
    Log(logMsg);
   }
   }*/






// * ******************************************* Мертвая зона, заданная EntireHex'ами ******************************************* /
/*
   bool IsCritterInDeadZone(Critter & cr)
   {
        DL("npc");
        Map @ map = cr.GetMap();
        if(!valid(map)) return false;
        return IsCritterInDeadZone(cr, map, 0, DEAD_ZONE_ENTIRE_FIRST, DEAD_ZONE_ENTIRE_END);
   }*/

/*
   Всякая простая замкнутая ломаная на плоскости разбивает точки плоскости на две области – внутреннюю и внешнюю.

   из координат игрока пускается горизонтальный луч
   если луч пересекает ломаную закрытой зоны нечетное число раз - он находится во внутренней зоне ломаной, иначе в наружной

   cr - криттер, которого проверяем
   map - карта, на которой имеется мертвая зона
   dir - направление луча (лучше использовать горизонталь по х - dir = 0\
   hexFirst - номер первого из гексов, ограничивающих мертвую зону
   hexEnd - номер последнего гекса, ограничивающего мертвую зону

   номера гексов должны возрастать для каждой последующей точки.
   нельзя поставить общий номер всем гексам, иначе для общего случая (невыпуклого многоугольника мертвой зоны) будет найдено множество решений

 *
   bool IsCritterInDeadZone(Critter & cr, Map & map, uint8 dir, uint hexFirst, uint hexEnd)
   {
   //DL("Critter x ="+cr.HexX+";y="+cr.HexY);
        uint crossNum=0; // число пересечений луча и ломанных, ограничивающих многоугольник мертвой зоны
        for(uint i = hexFirst; i<=hexEnd; i++)
        {
                if(BeamCrossing2Section(map, i, (i==hexEnd?hexFirst:i+1), cr.HexX, cr.HexY, dir))
                {
                        crossNum++;
                        //DL("пересек");
                }
        }
        /*DL("cr Id + |"+cr.Id+"всего: "+crossNum + "returinng "+ crossNum%2);*
        bool inZone = false;
        if(crossNum>0&&(crossNum%2==1)) inZone=true;
        //if(inZone) DL("inzone");
        return inZone;

   }

   // Признак:  луч пересекает некий отрезок между двумя Entire гексами
   // map - карта ~loadscript loc_tech_bunker
   // hexNum1 - начальный гекс отрезка
   // hexNum2 - конечный гекс отрезка
   // beamX - координата начала луча по оси x
   // beamY - координата начала луча по оси у
   // dir - направление луча
   // если не найдены гексы, или нет пересечения луча и отрезка между гексами - вернет false
   // если луч пересекает отрезок - вернет true
   bool BeamCrossing2Section(Map & map, uint hexNum1, uint hexNum2, uint16 beamX, uint16 beamY, uint8 dir)
   {
        // 1. вычисляем координаты конечной точки луча
        int16 hx0 = beamX;
        int16 beamX2 = hx0;
        int16 hy0 = beamY;
        int16 beamY2 = hy0;
        uint steps = 0;
   string logMsg;
        while(hx0!=beamX2||hy0!=beamY2||steps==0)
        {
                steps+=1;
                hx0=beamX2;
                hy0=beamY2;
                map.MoveHexByDir(beamX2, beamY2, dir, steps);
        }

        // координаты конечной точки высчитаны beamX2, beamY2
        int16 hx1 = 0;
        int16 hx2 = 0;
        int16 hy1 = 0;
        int16 hy2 = 0;
        // координаты начальной и конечной точки отрезка между двумя гексами
   //   if (!map.GetEntireCoords(hexNum1, 0, hx1, hy1)) return false;
   //   if (!map.GetEntireCoords(hexNum2, 0, hx2, hy2)) return false;
        if (!ReturnItemCoord(hexNum1, hx1, hy1)) {return false;}
        if (!ReturnItemCoord(hexNum2, hx2, hy2)) {return false;}
        logMsg = "hx1 = "+hx1+" hy1 = "+hy1+" hx2 = "+hx2+" hy2 ="+hy2;
        Log(logMsg);
   //	 DL(	"x "+	beamX2+"y "+beamY2 + "всего гексов№"+hexNum1+": "+ map.CountEntire(hexNum1) + "Первый гекс: "+hx1+":"+hy1+"; второй: "+ hx2+":"+hy2);
        // уравнение прямой для отрезка выглядит так
        // а*x + b*y + c = 0
        // уравнение прямой для луча
        /*Известно, что система:
                a1 x + b1 y = c1
                a2 x + b2 y = c2
                имеет следующее решение:
                x = dx/d
                y = dy/d,
                где d - определитель матрицы,
                d = a1b2 - a2b1,
                dx = c1b2 - c2b1,
                dy = a1c2 - a2c1.
                В нашей системе
                a1 = hx1 - hx2
                b1 = beamX2 - beamX
                c1 = hx1 - beamX

                a2 = hy1 - hy2
                b2 = beamY2 - beamY
                c2 = hy1 - beamY
                d = (hx1-hx2)*(beamY2-beamY) - (hy1-hy2)*(beamX2-beamX)
                dx1 = (hx1 - beamX)*(beamY2-beamY) - (hy1-beamY)*(beamX2-beamX)
                dy = (hx1-hx2)*(hy1-beamY)-(hy1-hy2)*(hx1-beamX)
 *

        // Знаменатель
        float z = (hx1-hx2)*(beamY2-beamY)-(hy1-hy2)*(beamX2-beamX);
        // числитель 1
        float ch = (hx1 - beamX)*(beamY2-beamY)-(hy1-beamY)*(beamX2-beamX);
        // числитель 2
        float cbeam = (hx1-hx2)*(hy1-beamY)-(hy1-hy2)*(hx1-beamX);
        // если числители и знаменатель = 0, прямые совпадают, считаем что это не пересечение
        if(z==0&&ch==0&&cbeam==0) return false;
        // если знаменатель = 0, отрезок и луч = параллельны, не пересекаются
        if(z==0) return false;
        // точка пересечения на отрезке
        float crossS = ch/z;
        // точка пересечения на луче
        float crossB = cbeam/z;

        // если 0<crossS<1 и 0<crossB<1, точка пересечения в пределах отрезков

        //DL("crossS, crossB "+crossS+";"+crossB +"в инте кроссS"+int(crossS));

        //if((0.0f < crossS*10)&&(crossS < 1.0f)&&(0.0f< crossB*10)&&(crossB <1.0f)) DL("ДА");
        return (0<crossS&&crossS<1&&0<crossB&&crossB<1);
   }


   /*void GetItemsAtMap(Map& map)
   {
   Item@[] items;
   //   for(uint8 i = 1; i < 3; i++)
   //   {
    map.GetItemsByType (ITEM_AMMO, items);
    for (uint16 j = 0; j < items.length(); j++)
    {
      TransitItem(items[j]);
    }
   //   }
   }
 */
/*void TransitItem(Item& item, Map& map)
   {
   Location @ loc;
   loc.Id = 22;
   Map @ mapTrans = loc.GetMap(400);
   Critter @ cr;
   cr.Id = map.GetData(MAP_PLAYERS_ID);
   //   Item @ itemTrans =
   mapTrans.AddItem(ReturnGmapSector(cr, true) + 70, ReturnGmapSector(cr, false) + 70, item.GetProtoId, item.GetCount);
   /*if(itemTrans.IsWeared())
   {
    SetWear(itemTrans, item.BrokenWear);
    if(item.Weapon_AmmoCount > 0)
    {
      itemTrans.Weapon_AmmoCount = item.Weapon_AmmonCount;
    }
   }/
   }
 */
/*void GetAllItemOnMap(Map& map) //, Critter& cr)
   {
   uint16 hexX  = ReturnCoord(map, 25, true);
   uint16 hexY  = ReturnCoord(map, 25, false);
   uint16 hexXFn = ReturnCoord(map, 28, true);
   uint16 hexYFn = ReturnCoord(map, 28, false); //ReturnCoord(map, 27, true) - ReturnCoord(map, 25, false);
   uint16 count	= 100;
   uint16  temp	= 0;
   bool	ck	= true;
   string logMsg;

   map.SetData(COUNTER_Y, hexY);
   map.SetData(COUNTER_X, hexX);
   //   map.SetData(COUNTER_Y_FN, hexYFn);
   map.SetData(COUNTER_X_FN, hexXFn);

   //   for(; hexY < HexYFn; )
   while ((hexY < ReturnCoord(map, 27, false) && hexX < ReturnCoord(map, 26, true)) || count > 1)
   //   for(uint i = 0; i < hexYFn; i++)
   {
   count--;

    hexY = map.GetData(COUNTER_Y);
    hexX = map.GetData(COUNTER_X);
   //  hexYFn = map.GetData(COUNTER_Y_FN);
    hexXFn = map.GetData(COUNTER_X_FN);

    if(ck)
    {
      map.MoveHexByDir(hexX, hexY, 2, 1);
      map.MoveHexByDir(hexXFn, hexYFn, 2, 1);
      ck = false;
    }
    else
    {
      map.MoveHexByDir(hexX, hexY, 3, 1);
      map.MoveHexByDir(hexXFn, hexYFn, 3, 1);
      ck = true;
    }
    logMsg = "hexX = "+hexX+" hexY = "+hexY;
    Log(logMsg);
    map.SetData(COUNTER_Y, hexY);
    map.SetData(COUNTER_X, hexX);
   //  map.SetData(COUNTER_Y_FN, hexYFn);
    map.SetData(COUNTER_X_FN, hexXFn);

    for(; hexX < hexXFn; )
    {
      map.MoveHexByDir(hexX, hexY, 4, 1);
      if(map.IsHexPassed(hexX, hexY))
      {

         map.AddItem(hexX, hexY, 32,1);


      }
     }
    }
   }
 *

   uint16 ReturnAdvCoord(Map& map, uint ent, bool xOrY)
   {
   uint16 hexX = ReturnCoord(map, ent, true);
   uint16 hexY = ReturnCoord(map, ent, false);
   map.MoveHexByDir(hexX, hexY, 4, 1);
   if(xOrY)
   {
    return hexX;
   }
   else
   {
    return hexY;
   }
   return 0;
   }*/
