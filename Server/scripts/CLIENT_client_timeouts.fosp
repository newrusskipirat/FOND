                                                  

string[]__critterHistoryInfo;                                                                                                                                                                                                                                                                                                                                                                                                                                           

uint __GetColor(int r,int g,int b)
{
	r=(((r)>(255))?(255):(((r)<(0))?(0):(r)));
	g=(((g)>(255))?(255):(((g)<(0))?(0):(g)));
	b=(((b)>(255))?(255):(((b)<(0))?(0):(b)));
	return(uint((0xFF<<24)|(((r)&0xFF)<<16)|(((g)&0xFF)<<8)|((b)&0xFF)));
}

uint __GetGradient(uint colorStart,uint colorEnd,uint8 pos)
{
	pos=(((pos)>(100))?(100):(((pos)<(1))?(1):(pos)));
	
	int aS=(colorStart>>24)&0xFF,
	rS=((colorStart>>16)&0xFF),
	gS=((colorStart>>8)&0xFF),
	bS=((colorStart)&0xFF),
	
	aE=(colorEnd>>24)&0xFF,
	rE=((colorEnd>>16)&0xFF),
	gE=((colorEnd>>8)&0xFF),
	bE=((colorEnd)&0xFF); 
	
	rS=(((rE-int(rS*(pos*0.01)))>0)?(rE-int(rS*(pos*0.01))):-(rE-int(rS*(pos*0.01))));
	gS=(((gE-int(gS*(pos*0.01)))>0)?(gE-int(gS*(pos*0.01))):-(gE-int(gS*(pos*0.01))));
	bS=(((bE-int(bS*(pos*0.01)))>0)?(bE-int(bS*(pos*0.01))):-(bE-int(bS*(pos*0.01))));
	
	return __GetColor(rS,gS,bS);
}

uint __GetColor(uint8&a,uint8&r,uint8&g,uint8&b,uint color){
	a=(color>>24)&0xFF;
	r=((color>>16)&0xFF);
	g=((color>>8)&0xFF);
	b=((color)&0xFF);
	
	return 0;
}

class CTimeout
{
	int PositionX;
	int PositionY;
	uint IndentY;
	uint NameColor;
	uint ValueColor;
	uint Font;
	uint FontFlags; 
	
	CTimeout()
	{
		this.PositionX=15;
		this.PositionY=40;
		this.IndentY=10;
		this.NameColor=((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xFF)&0xFF)<<8)|((0)&0xFF))));
		this.ValueColor=((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xFF)&0xFF)<<8)|((0)&0xFF))));
		this.Font=(5);
		this.FontFlags=0;
	}
}
CTimeout Timeouts;

string spelling(uint value,string opt1,string opt2,string opt3)
{
	string result;
	if(value==1||(value%10==1&&value!=11))
	result=opt1;
	else if((value>1&&value<5)||(value>20&&value%10>1&&value%10<5))
	result=opt2;
	else if((value>4&&value<21)||value%10>4||value%10==0)
	result=opt3;
	return result;
}

int draw_timeouts(CritterCl&critter,uint skill,string skillname,int x,int y)
{
	int timeout=critter.Timeout[skill];
	timeout/=__TimeMultiplier;
	
	if(timeout>0)
	{
		string text="";
		
		uint day,hour,minute,second;
		string d="",h="",m="",s="";
		
		day=timeout/86400;
		hour=timeout%86400/3600;
		minute=timeout%86400%3600/60;
		second=timeout%86400%3600%60;
		
		if(second>0)
		s=second+spelling(second," секунда"," секунды"," секунд");
		if(minute>0)
		m=minute+spelling(minute," минута"," минуты"," минут")+(second>0?", ":"");
		if(hour>0)
		h=hour+spelling(hour," час"," часа"," часов")+((minute>0||second>0)?", ":"");
		if(day>0)
		d=day+spelling(day," день"," дня"," дней")+((hour>0||minute>0||second>0)?", ":"");
		
		text=d+h+m+s;
		DrawText(skillname+":    "+text,x,y,__ScreenWidth,10,Timeouts.ValueColor,Timeouts.Font,Timeouts.FontFlags);
		y+=Timeouts.IndentY;
		
	}
	
	return(y);
}

void show_timeouts()
{
	
	CritterCl@critter=GetChosen();
	
	if(GetCurrentMapPid()==0)
	return;
	
	int x=Timeouts.PositionX;
	int y=Timeouts.PositionY;
	
	for(uint i=0;i<8;++i)
	{
		if(i==0&&critter.Timeout[(241)]>0)
		y=draw_timeouts(critter,(241),"Репликация",x,y);
		if(i==1&&critter.Timeout[(238)]>0&&!IsTurnBased())
		y=draw_timeouts(critter,(238),"Боевой",x,y);
		if(i==2&&critter.Timeout[(235)]>0)
		y=draw_timeouts(critter,(235),"Воровство",x,y);
		if(i==3&&critter.Timeout[(234)]>0)
		y=draw_timeouts(critter,(234),"Взлом",x,y);
		if(i==4&&critter.Timeout[(233)]>0)
		y=draw_timeouts(critter,(233),"Наука",x,y);
		if(i==5&&critter.Timeout[(232)]>0)
		y=draw_timeouts(critter,(232),"Ремонт",x,y);
		if(i==6&&critter.Timeout[(231)]>0)
		y=draw_timeouts(critter,(231),"Доктор",x,y);
		if(i==7&&critter.Timeout[(230)]>0)
		y=draw_timeouts(critter,(230),"Санитар",x,y);
	}
}
