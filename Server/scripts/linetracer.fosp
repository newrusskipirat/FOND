

bool LocIsModoc(uint locPid)
{
	return(locPid<=(1253));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(32)||locPid==(1216)||locPid==(43)||locPid==96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(42));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

shared interface Project
{
	string@get_Name();
	void Build();
	void SetAssociation(string@ex,string@className,string@classModule);
}

shared interface FileObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	void FormatStringData(string&nameData,string&data);
	FileObject@get_Pattern(string&name)const;
	FileObject@get_Copy(string&name); 
	
	void set_GlobalData(string@name,string@value);          
	
	string@get_GlobalData(string@name);            
	
}

shared class TimeLog
{
	uint tick;
	
	TimeLog()
	{
		refresh();
	}
	
	void refresh()
	{
		tick=GetTick();
	}
	
	bool check(uint count)
	{
		return(GetTick()-tick>=count);
	}
	
	uint get()
	{
		uint old=tick;
		refresh();
		return(tick-old);
	}
	
	void Log(string&in message)
	{
		::ClearLog(message+" ["+(GetTick()-tick)+"ms]");
	}
}

shared interface AnyDataObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	uint[]@get_SaveData();
	void InitData(uint[]&data);
}

shared interface ManagerObject
{
	FileObject@get_ProtoObject(string@name);
	void ParseProtoTypes(const string&ex,const FileObject&pattern,const string@search);
	FileObject@ParseProtoTypeFile(string&name,const string&ex,const FileObject&pattern,const string@search);
	FileObject@AddPrototype(FileObject@proto);
	FileObject@StringToFileObject(string&name,string&txt,const FileObject&pattern);
}

shared interface ValueAPI{}
shared class SettingsAPI
{
	string Name;
	bool IsDebug;
} 

shared class GlobalData
{
	uint Hash;
	string Value;
	
	GlobalData(string@name)
	{
		Hash=GetStrHash(name);
		Value="";
	} 
	
	void SaveData(uint[]&outArray,uint&position)
	{
		uint len=Value.length();
		
		outArray.resize(position+2+len/2);
		
		outArray[position++]=Hash;
		outArray[position++]=len;
		
		for(uint i=0;i<len;i++)
		{
			outArray[position]|=Value[i++]<<24;
			outArray[position]|=Value[i++]<<16;
			outArray[position]|=Value[i++]<<8;
			outArray[position++]|=Value[i];
		}
	} 
	
	void LoadData(uint[]&in outArray,uint&position)
	{
		Hash=outArray[position++];
		uint len=outArray[position++];
		Value.resize(len);
		
		for(uint i=0;i<len;i++)
		{
			Value[i++]=(outArray[position]>>24)&0xFF;
			Value[i++]=(outArray[position]>>16)&0xFF;
			Value[i++]=(outArray[position]>>8)&0xFF;
			Value[i]=outArray[position++]&0xFF;
			
		}
	}
} 

shared class Hexagonal
{
	Hexagonal(){Reset();}
	Hexagonal(const uint16&in x,const uint16&in y){Set(x,y);}
	Hexagonal(const Hexagonal&master){Set(master);}
	
	Hexagonal(const Critter&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Item&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Scenery&master){Set(master.HexX,master.HexY);}
	
	bool Entire(Map&map,int entNum){return map.GetEntireCoords(entNum,0,X,Y);}
	bool IsPassed(Map&map){return ValidPosition(map)&&map.IsHexPassed(X,Y);}
	bool IsPassed(Map&map,Hexagonal&begin,Hexagonal&end){return ValidPosition(map,begin,end)&&map.IsHexPassed(X,Y);}
	
	bool ValidPosition(Map&map)
	{
		Hexagonal end,begin;
		if(end.Entire(map,0)&&begin.Entire(map,255))
		return ValidPosition(map,begin,end);
		return false;
	}
	
	bool ValidPosition(Map&map,Hexagonal&begin,Hexagonal&end)
	{
		return(X>=begin.X&&Y>=begin.Y
		&&X<=end.X&&Y<=end.Y);
	}
	
	bool Transit(Critter&critter,Map&map){return Transit(critter,map,critter.Dir);}
	bool Transit(Critter&critter,Map&map,uint8 direction)
	{
		if(!IsPassed(map))return false;
		return critter.TransitToMap(map.Id,X,Y,direction);
	}
	
	bool Transit(Critter&critter,uint mapId){return Transit(critter,mapId,critter.Dir);}
	bool Transit(Critter&critter,uint mapId,uint8 direction)
	{
		if(mapId==0)return false;
		Map@map=GetMap(mapId);
		if(@map is null)return false;
		return Transit(critter,map,direction);
	} 
	
	void Set(const uint16&in x,const uint16&in y){X=x;Y=y;}
	void Set(const Hexagonal&in other){Set(other.X,other.Y);}
	void Reset(){X=Y=0;}
	uint Distantion(Hexagonal&other){return GetDistantion(X,Y,other.X,other.Y);}
	
	uint16 X;
	uint16 Y;
	
	bool opEquals(const Hexagonal&in other){return(other.X==X&&other.Y==Y);}
	Hexagonal&opAssign(const Hexagonal&in other)
	{
		Set(other);
		return this;
	}
	
	const uint get_UID(const uint w)const{return X+Y*w;}
	string get_Debug(){return"X:"+X+"Y:"+Y;}
	void Log(string&str){::Log(str+":"+Debug);}
}    

shared class MapHash
{
	MapHash(const uint16&in protoId)
	{
		ProtoId=protoId;
		@Min=null;
		@Max=null;
	}
	
	MapHash&opAssign(Map&map)
	{
		@Min=Hexagonal(0,0);
		@Max=Hexagonal(0,0);
		map.GetEntireCoords(0,0,Max.X,Max.Y);
		map.GetEntireCoords((255),0,Min.X,Min.Y);
		return this;
	}
	
	uint16 ProtoId;
	Hexagonal@Min;
	Hexagonal@Max;
} 

shared class Line
{
	Line(Hexagonal&a,Hexagonal&b){@A=a;@B=b;}
	
	uint get_Length()
	{
		return B.Distantion(A);
	}
	
	uint get_Point(Hexagonal&point)
	{
		return B.Distantion(point);
	}
	
	float get_Module(Hexagonal&point)
	{
		return Point[point]/Length;
	}
	
	Hexagonal@get_opIndex(const uint&in size)
	{
		
		const float mod=float(size/Length);
		return@Hexagonal(A.X+(B.X-A.X)*mod,A.Y+(B.Y-A.Y)*mod);
	} 
	
	Line(Map&map,uint16 grid,MapHash@hash)
	{
		if(@hash is null)
		{
			Hexagonal min,max;
			map.GetTransferParams(min.X,min.Y,max.X,max.Y,grid);
			
			@A=@Hexagonal(min.X,min.Y);
			@B=@Hexagonal(max.X,max.Y);
		}
		else
		{
			if(@hash.Min is null||@hash.Max is null)
			map.GetTransferParams(hash.Min.X,hash.Min.Y,hash.Max.X,hash.Max.Y,grid);
			
			@A=@Hexagonal(hash.Min.X,hash.Min.Y);
			@B=@Hexagonal(hash.Max.X,hash.Max.Y);
		}
	} 
	
	string get_Debug(){return"A<"+A.Debug+">B<"+B.Debug+">";}
	void Log(string&str){::Log(str+":"+Debug);}
	
	Hexagonal@A;
	Hexagonal@B;
}  

import MapHash@GetMapHash(const uint16&in pid)from"world";
import uint CreateLocation(Hexagonal&coordinate,uint16 locationPid)from"world"; 

import ManagerObject@get_objectManager()from"world"; 

import EventTree@get_EventRoot()from"world"; 

import Project@CreateProject(string@name,string@path)from"main";
import Project@get_Project(string@name)from"main";                                                                                                                       

shared interface ITraceContext
{
	bool Exec(Map&map,uint16 hx,uint16 hy);
}                 

float GetDirectionF(uint16 hx,uint16 hy,uint16 tx,uint16 ty)
{
	float nx=3*(float(tx)-float(hx));
	float ny=(3.4641016151f)*(float(ty)-float(hy))-(float(tx%2)-float(hx%2))*(1.732050807568877f);
	return 180.0f+(57.29577951f)*atan2(ny,nx);
}

uint LineTracerHex(uint16 hx,uint16 hy,uint16 tx,uint16 ty,Map&map,uint dist,ITraceContext@context)
{
	if(dist==0)
	dist=GetDistantion(hx,hy,tx,ty);
	float dir=GetDirectionF(hx,hy,tx,ty);
	uint8 dir1,dir2;
	if((30.0f<=dir)&&(dir<90.0f))
	{
		dir1=5;
		dir2=0;
	}
	else if((90.0f<=dir)&&(dir<150.0f))
	{
		dir1=4;
		dir2=5;
	}
	else if((150.0f<=dir)&&(dir<210.0f))
	{
		dir1=3;
		dir2=4;
	}
	else if((210.0f<=dir)&&(dir<270.0f))
	{
		dir1=2;
		dir2=3;
	}
	else if((270.0f<=dir)&&(dir<330.0f))
	{
		dir1=1;
		dir2=2;
	}
	else
	{
		dir1=0;
		dir2=1;
	}
	
	uint16 cx=hx;
	uint16 cy=hy;
	uint16 px=hx;
	uint16 py=hy;
	
	uint16 t1x,t1y,t2x,t2y;
	
	float x1=3*float(hx)+(0.02f);
	float y1=(3.4641016151f)*float(hy)-(float(hx%2))*(1.732050807568877f)+(0.02f);
	
	float x2=3*float(tx)+(0.02f);
	float y2=(3.4641016151f)*float(ty)-(float(tx%2))*(1.732050807568877f)+(0.02f);
	
	float dx=x2-x1;
	float dy=y2-y1;
	
	float c1x,c1y,c2x,c2y;
	float dist1,dist2;
	
	for(uint i=1;i<=dist;i++)
	{
		t1x=cx;
		t2x=cx;
		t1y=cy;
		t2y=cy;
		map.MoveHexByDir(t1x,t1y,dir1,1);
		map.MoveHexByDir(t2x,t2y,dir2,1);
		c1x=3*float(t1x);
		c1y=(3.4641016151f)*float(t1y)-(float(t1x%2))*(1.732050807568877f);
		c2x=3*float(t2x);
		c2y=(3.4641016151f)*float(t2y)-(float(t2x%2))*(1.732050807568877f);
		dist1=dx*(y1-c1y)-dy*(x1-c1x);
		dist2=dx*(y1-c2y)-dy*(x1-c2x);
		dist1=((dist1>0)?dist1:-dist1);
		dist2=((dist2>0)?dist2:-dist2);
		if(dist1<=dist2)
		{
			cx=t1x;
			cy=t1y;
		}
		else
		{
			cx=t2x;
			cy=t2y;
		} 
		
		if((cx==px)&&(cy==py))
		return i-1;
		else
		{
			px=cx;
			py=cy;
		}
		
		if(context.Exec(map,cx,cy))
		return i;
		
	}
	return dist;
}

uint LineTracerSquare(uint16 hx,uint16 hy,uint16 tx,uint16 ty,Map&map,uint dist,ITraceContext@context)
{
	float dir=atan2(float(ty-hy),float(tx-hx));
	float dx=cos(dir);
	float dy=sin(dir);
	if(abs(dx)>abs(dy))
	{
		dy/=abs(dx);
		dx=(dx>0?1.0f:-1.0f);
	}
	else
	{
		dx/=abs(dy);
		dy=(dy>0?1.0f:-1.0f);
	}
	uint16 x1=float(hx)+0.5f;
	uint16 y1=float(hy)+0.5f;
	uint16 maxx=map.GetWidth();
	uint16 maxy=map.GetHeight();
	uint16 cx=0,cy=0;
	
	for(uint i=1;i<=dist;i++)
	{
		x1+=dx;
		y1+=dy;
		cx=uint16(floor(x1));
		cy=uint16(floor(y1));
		if(cx>=maxx||cy>=maxy)
		return i-1;
		if(context.Exec(map,cx,cy))
		return i;
	}
	return dist;
}
