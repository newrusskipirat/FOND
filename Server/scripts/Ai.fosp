

bool LocIsModoc(uint locPid)
{
	return(locPid<=(1253));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(32)||locPid==(1216)||locPid==(43)||locPid==96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(42));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

shared interface Project
{
	string@get_Name();
	void Build();
	void SetAssociation(string@ex,string@className,string@classModule);
}

shared interface FileObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	void FormatStringData(string&nameData,string&data);
	FileObject@get_Pattern(string&name)const;
	FileObject@get_Copy(string&name); 
	
	void set_GlobalData(string@name,string@value);          
	
	string@get_GlobalData(string@name);            
	
}

shared class TimeLog
{
	uint tick;
	
	TimeLog()
	{
		refresh();
	}
	
	void refresh()
	{
		tick=GetTick();
	}
	
	bool check(uint count)
	{
		return(GetTick()-tick>=count);
	}
	
	uint get()
	{
		uint old=tick;
		refresh();
		return(tick-old);
	}
	
	void Log(string&in message)
	{
		::ClearLog(message+" ["+(GetTick()-tick)+"ms]");
	}
}

shared interface AnyDataObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	uint[]@get_SaveData();
	void InitData(uint[]&data);
}

shared interface ManagerObject
{
	FileObject@get_ProtoObject(string@name);
	void ParseProtoTypes(const string&ex,const FileObject&pattern,const string@search);
	FileObject@ParseProtoTypeFile(string&name,const string&ex,const FileObject&pattern,const string@search);
	FileObject@AddPrototype(FileObject@proto);
	FileObject@StringToFileObject(string&name,string&txt,const FileObject&pattern);
}

shared interface ValueAPI{}
shared class SettingsAPI
{
	string Name;
	bool IsDebug;
} 

shared class GlobalData
{
	uint Hash;
	string Value;
	
	GlobalData(string@name)
	{
		Hash=GetStrHash(name);
		Value="";
	} 
	
	void SaveData(uint[]&outArray,uint&position)
	{
		uint len=Value.length();
		
		outArray.resize(position+2+len/2);
		
		outArray[position++]=Hash;
		outArray[position++]=len;
		
		for(uint i=0;i<len;i++)
		{
			outArray[position]|=Value[i++]<<24;
			outArray[position]|=Value[i++]<<16;
			outArray[position]|=Value[i++]<<8;
			outArray[position++]|=Value[i];
		}
	} 
	
	void LoadData(uint[]&in outArray,uint&position)
	{
		Hash=outArray[position++];
		uint len=outArray[position++];
		Value.resize(len);
		
		for(uint i=0;i<len;i++)
		{
			Value[i++]=(outArray[position]>>24)&0xFF;
			Value[i++]=(outArray[position]>>16)&0xFF;
			Value[i++]=(outArray[position]>>8)&0xFF;
			Value[i]=outArray[position++]&0xFF;
			
		}
	}
} 

shared class Hexagonal
{
	Hexagonal(){Reset();}
	Hexagonal(const uint16&in x,const uint16&in y){Set(x,y);}
	Hexagonal(const Hexagonal&master){Set(master);}
	
	Hexagonal(const Critter&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Item&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Scenery&master){Set(master.HexX,master.HexY);}
	
	bool Entire(Map&map,int entNum){return map.GetEntireCoords(entNum,0,X,Y);}
	bool IsPassed(Map&map){return ValidPosition(map)&&map.IsHexPassed(X,Y);}
	bool IsPassed(Map&map,Hexagonal&begin,Hexagonal&end){return ValidPosition(map,begin,end)&&map.IsHexPassed(X,Y);}
	
	bool ValidPosition(Map&map)
	{
		Hexagonal end,begin;
		if(end.Entire(map,0)&&begin.Entire(map,255))
		return ValidPosition(map,begin,end);
		return false;
	}
	
	bool ValidPosition(Map&map,Hexagonal&begin,Hexagonal&end)
	{
		return(X>=begin.X&&Y>=begin.Y
		&&X<=end.X&&Y<=end.Y);
	}
	
	bool Transit(Critter&critter,Map&map){return Transit(critter,map,critter.Dir);}
	bool Transit(Critter&critter,Map&map,uint8 direction)
	{
		if(!IsPassed(map))return false;
		return critter.TransitToMap(map.Id,X,Y,direction);
	}
	
	bool Transit(Critter&critter,uint mapId){return Transit(critter,mapId,critter.Dir);}
	bool Transit(Critter&critter,uint mapId,uint8 direction)
	{
		if(mapId==0)return false;
		Map@map=GetMap(mapId);
		if(@map is null)return false;
		return Transit(critter,map,direction);
	} 
	
	void Set(const uint16&in x,const uint16&in y){X=x;Y=y;}
	void Set(const Hexagonal&in other){Set(other.X,other.Y);}
	void Reset(){X=Y=0;}
	uint Distantion(Hexagonal&other){return GetDistantion(X,Y,other.X,other.Y);}
	
	uint16 X;
	uint16 Y;
	
	bool opEquals(const Hexagonal&in other){return(other.X==X&&other.Y==Y);}
	Hexagonal&opAssign(const Hexagonal&in other)
	{
		Set(other);
		return this;
	}
	
	const uint get_UID(const uint w)const{return X+Y*w;}
	string get_Debug(){return"X:"+X+"Y:"+Y;}
	void Log(string&str){::Log(str+":"+Debug);}
}    

shared class MapHash
{
	MapHash(const uint16&in protoId)
	{
		ProtoId=protoId;
		@Min=null;
		@Max=null;
	}
	
	MapHash&opAssign(Map&map)
	{
		@Min=Hexagonal(0,0);
		@Max=Hexagonal(0,0);
		map.GetEntireCoords(0,0,Max.X,Max.Y);
		map.GetEntireCoords((255),0,Min.X,Min.Y);
		return this;
	}
	
	uint16 ProtoId;
	Hexagonal@Min;
	Hexagonal@Max;
} 

shared class Line
{
	Line(Hexagonal&a,Hexagonal&b){@A=a;@B=b;}
	
	uint get_Length()
	{
		return B.Distantion(A);
	}
	
	uint get_Point(Hexagonal&point)
	{
		return B.Distantion(point);
	}
	
	float get_Module(Hexagonal&point)
	{
		return Point[point]/Length;
	}
	
	Hexagonal@get_opIndex(const uint&in size)
	{
		
		const float mod=float(size/Length);
		return@Hexagonal(A.X+(B.X-A.X)*mod,A.Y+(B.Y-A.Y)*mod);
	} 
	
	Line(Map&map,uint16 grid,MapHash@hash)
	{
		if(@hash is null)
		{
			Hexagonal min,max;
			map.GetTransferParams(min.X,min.Y,max.X,max.Y,grid);
			
			@A=@Hexagonal(min.X,min.Y);
			@B=@Hexagonal(max.X,max.Y);
		}
		else
		{
			if(@hash.Min is null||@hash.Max is null)
			map.GetTransferParams(hash.Min.X,hash.Min.Y,hash.Max.X,hash.Max.Y,grid);
			
			@A=@Hexagonal(hash.Min.X,hash.Min.Y);
			@B=@Hexagonal(hash.Max.X,hash.Max.Y);
		}
	} 
	
	string get_Debug(){return"A<"+A.Debug+">B<"+B.Debug+">";}
	void Log(string&str){::Log(str+":"+Debug);}
	
	Hexagonal@A;
	Hexagonal@B;
}  

import MapHash@GetMapHash(const uint16&in pid)from"world";
import uint CreateLocation(Hexagonal&coordinate,uint16 locationPid)from"world"; 

import ManagerObject@get_objectManager()from"world"; 

import EventTree@get_EventRoot()from"world"; 

import Project@CreateProject(string@name,string@path)from"main";
import Project@get_Project(string@name)from"main";                                                                                                                                                                                   

shared interface iManagerModule{bool manager_init();
	bool manager_start();}
shared interface iManager_loop{uint global_loop();}
shared interface iManager_critter_init{bool global_critter_init(Critter&critter,bool firstTime);}
shared interface iManager_critter_finish{bool global_critter_finish(Critter&critter,bool toDelete);}
shared interface iManager_critter_idle{bool global_critter_idle(Critter&critter);}
shared interface iManager_critter_dead{bool global_critter_dead(Critter&critter,Critter@killer);}
shared interface iManager_critter_respawn{bool global_critter_respawn(Critter&critter);}
shared interface iManager_map_critter_in{bool global_map_critter_in(Map&map,Critter&critter);}
shared interface iManager_map_critter_out{bool global_map_critter_out(Map&map,Critter&critter);}
shared interface iManager_world_save{bool global_world_save();}
shared interface iManager_player_registration{bool global_player_registration(uint ip,string&name,uint&textMsg,uint&strNum);}
shared interface iManager_player_login{bool global_player_login(uint ip,string&name,uint id,uint&textMsg,uint&strNum);}
shared interface iManager_time{bool global_time(int8 type);}

shared interface iManager_critter_use_skill{bool global_critter_use_skill(Critter&critter,int skill,Critter@targetCritter,Item@targetItem,Scenery@targetScenery);}

shared interface iManagerElement
{
	iManagerModule@GetLink();
	uint GetId();
	string&GetName();
	uint&GetEventFlags();
	int8&GetTimeChangeCall();
	uint8 GetPriority();
}                     

import iManagerElement@manager_add_module(iManagerModule@link,string&name,uint8 priority)from"manager";                                                 

const uint16[]npc_group_raiders={(337),(338),(339),(340),(341)};
const uint16[]npc_group_mirelurk={(330)};
const uint16[]npc_group_radscorp={(319),(320)};
const uint16[]npc_group_gecko={(316),(317),(327)};
const uint16[]npc_group_rats={(310),(313),(314),(315)};                                                                                                                                                                                            

shared interface iController
{
	bool IsEnemy(Critter&npc,Critter&target);
	
	bool Attack(Critter&target,bool ignoredCheckers);
	
	bool Walk(Critter&critter);
	bool GoHome(Critter&critter);
	
	bool Idle();
	
	iAI@get_Ai();
}

void AiGeneralInitialize(Critter&critter)
{
	
}

shared interface iAI
{
	bool IsEnemy(Critter&target);
	int IsProtected(Critter&target);
	void Initialize(Critter&critter);
	
	uint GetWorkCritters(Critter@[]@critters,Critter&critter);
	uint GetTeamCritters(Critter&critter,Critter@[]@critters);
	
	bool AddAttackPlane(Critter&critter,Critter&target);
	
	bool get_IsIdleWalk();
	bool get_IsControllerEnemy();
	
	iAI@Copy(Critter&critter);
}

shared class Hash
{
	Hash(string@str,iAI@mem)
	{
		@text=@str;
		hash=GetStrHash(text);
		@memory=mem;
	}
	
	string@text;
	uint hash;
	iAI@memory;
}

shared class AiHashMemory
{
	string@Get(uint hash)
	{
		for(uint i=0,iEnd=this.HashList.length();i<iEnd;i++)
		if(this.HashList[i].hash==hash)
		return@this.HashList[i].text;
		
		return"";
	}
	
	uint Get(string str,iAI@mem=null)
	{
		for(uint i=0,iEnd=this.HashList.length();i<iEnd;i++)
		if(this.HashList[i].text==str)
		return this.HashList[i].hash;
		
		if(@mem is null)return 0;
		
		Hash h(str,mem);
		this.HashList.insertLast(h);
		return h.hash;
	}
	
	iAI@GetAI(uint hash)
	{
		for(uint i=0,iEnd=this.HashList.length();i<iEnd;i++)
		if(this.HashList[i].hash==hash)
		return@this.HashList[i].memory;
		
		return null;
	}
	
	iAI@GetAI(string str)
	{
		for(uint i=0,iEnd=this.HashList.length();i<iEnd;i++)
		if(this.HashList[i].text==str)
		return@this.HashList[i].memory;
		
		return null;
	}
	
	private Hash@[]HashList;
}

import bool AddAttackPlane(Critter&critter,uint priority,Critter&target)from"npc_planes";
import bool AddAttackPlane(Critter&critter,uint priority,Critter&target,int minHp)from"npc_planes";
import bool AddWalkPlane(Critter&critter,uint priority,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import uint EraseAttackPlane(Critter&critter,Critter&target)from"npc_planes";
import bool IsKindFriend(Critter&critter,Critter&check)from"world";

ManagerControllers _Manager;

void _MapFinish(Map&map,bool deleted)
{
	@map.ScriptDescriptor=null;
}

void ModuleInit(string&in,Handle@){manager_add_module(_Manager,"AiControllers",uint8(-2));}
class ManagerControllers:iManagerModule,iManager_map_critter_in,iManager_map_critter_out,iManager_critter_idle,iManager_critter_finish
{
	bool global_critter_finish(Critter&critter,bool toDelete)
	{
		@critter.GroupDescriptor=null;
		return true;
	}
	
	bool manager_init()override
	{
		return true;
	}
	
	bool manager_start()override
	{
		return true;
	}
	
	bool global_critter_idle(Critter&critter)
	{
		return true;
	}
	
	MapDescriptor@GetDescriptor(Map&map)
	{
		Descriptor@descriptor=map.ScriptDescriptor;
		if(@descriptor is null)
		{
			@map.ScriptDescriptor=MapDescriptor(map);
			@descriptor=map.ScriptDescriptor;
			if(map.GetEventFuncId((0))==0)
			map.SetEvent((0),"_MapFinish");
		}
		return cast<MapDescriptor@>(descriptor);
	}
	
	bool global_map_critter_in(Map&map,Critter&critter)override
	{
		MapDescriptor@descriptor=GetDescriptor(map);
		if(@descriptor!is null)
		descriptor.CritterIn(critter);
		
		return true;
	}
	
	bool global_map_critter_out(Map&map,Critter&critter)override
	{
		MapDescriptor@descriptor=GetDescriptor(map);
		if(@descriptor!is null)
		descriptor.CritterOut(critter);
		
		return true;
	}
}

class MapDescriptor:Descriptor
{
	MapDescriptor(Map&map)
	{
		@ThisMap=map;
	}
	
	void CritterIn(Critter&critter)
	{
		if(critter.IsNpc())
		{
			for(uint i=0,iEnd=Orders.length();i<iEnd;i++)
			if(Orders[i].AddCritter(critter))
			{
				@critter.GroupDescriptor=Orders[i];
				return;
			}
			
			Group@group=Group(critter);
			@critter.GroupDescriptor=group;
			Orders.insertLast(group);
		}
	}
	
	void CritterOut(Critter&critter)
	{
		if(critter.IsNpc())
		{
			for(uint i=0,iEnd=Orders.length();i<iEnd;i++)
			if(Orders[i].find(critter)==0)
			{
				Orders[i].RemoveCritter(critter);
				if(@Orders[i].Leader is null)Orders.removeAt(i);
				@critter.GroupDescriptor=null;
				return;
			}
			
		}
	}
	
	Group@[]Orders;
	Map@ThisMap;
}

class LeaderData
{
	LeaderData(AloneController@new,LeaderData@last=null)
	{
		@Current=new;
		@Last=last;
	}
	
	LeaderData@New(AloneController@controller){return LeaderData(controller,this);}
	bool IsValid(){return(@Current!is null&&@Current.Npc!is null&&!Current.Npc.IsDead());}
	
	LeaderData@Return()
	{
		if(@Last!is null)
		{
			if(Last.IsValid())return Last;
			return Last.Return();
		}
		return null;
	}
	
	LeaderData@Last;
	AloneController@Current;
}

class Group:Descriptor
{
	Group@[]Orders;
	
	AloneController@[]Controllers;
	LeaderData@LeaderHierarchy;
	
	Critter@get_Leader()
	{
		if(@LeaderHierarchy!is null&&@LeaderHierarchy.Current!is null)
		return LeaderHierarchy.Current.Npc;
		return null;
	}
	
	int TeamId;
	
	Group(Critter&critter)
	{
		TeamId=critter.Stat[(106)];
		AddCritterForced(critter);
	}
	
	int find(Critter&critter)
	{
		uint critterId=critter.Id;
		for(int i=0,iEnd=Controllers.length();i<iEnd;i++)
		if(Controllers[i].Npc.Id==critterId)
		return i;
		return-1;
	}
	
	private void AddCritterForced(Critter&critter)
	{
		AloneController@controller=AloneController(critter);
		Controllers.insertLast(controller);
		if(@LeaderHierarchy is null)
		@LeaderHierarchy=LeaderData(controller);
	}
	
	bool AddCritter(Critter&critter)
	{
		if(TeamId!=0)
		{
			if(TeamId==critter.Stat[(106)])
			{
				AddCritterForced(critter);
				return true;
			}
		}
		return false;
	}
	
	bool RemoveCritter(Critter&critter)
	{
		int index=find(critter);
		if(index!=-1)
		{
			Controllers.removeAt(index);
			if(critter.Id==LeaderHierarchy.Current.Npc.Id)
			@LeaderHierarchy=LeaderHierarchy.Return();
			return true;
		}
		return false;
	}
}

class AloneController:iController
{
	AloneController(Critter&critter)
	{
		@Npc=critter;
		@ListEnemy=array<Critter@>(0);
		@property_Ai=GetAI(critter);
		Critter@[]critters={critter};
		if(@property_Ai!is null)
		for(uint i=0,iEnd=property_Ai.GetWorkCritters(critters,critter);i<iEnd;i++)
		{
			Critter@icritter=@critters[i];
			if(icritter.Mode[(510)]!=0&&icritter.IsPlayer()&&icritter.GetAccess()>(1))
			continue;
			if(IsEnemy(critter,icritter))
			ListEnemy.insertLast(icritter);
		}
	}
	
	bool Attack(Critter&target,bool ignoredCheckers)override
	{
		if(target.Quest[(701)]==1)
		return false;
		if(@property_Ai!is null)
		return property_Ai.AddAttackPlane(Npc,target);
		return AddAttackPlane(Npc,0,target);
	}
	
	bool Walk(Critter&critter)override
	{
		if(@property_Ai!is null&&!property_Ai.IsIdleWalk)
		return false;
		int rand=Random(0,9);
		if(rand<4)
		critter.MoveRandom();
		return rand!=10;
	}
	
	bool GoHome(Critter&critter)override
	{
		uint mapId=0;
		uint16 homeX=0,homeY=0;
		uint8 dir=0;
		critter.GetHomePos(mapId,homeX,homeY,dir);
		
		if(critter.GetMapId()==mapId&&GetDistantion(homeX,homeY,critter.HexX,critter.HexY)>critter.AIWorkRadius)
		{
			critter.DropPlanes();
			return AddWalkPlane(critter,0,homeX,homeY,dir,false,0);
		}
		return false;
	}
	
	bool IsEnemy(Critter&npc,Critter&target)override{
		if(@property_Ai!is null&&!property_Ai.IsControllerEnemy)
		return property_Ai.IsEnemy(target);
		return(npc.KindHierarchy!=0&&!IsKindFriend(npc,target));
	}
	
	bool Idle()override
	{
		if(ListEnemy.length()>0)
		{
			Attack(ListEnemy[Random(0,ListEnemy.length()-1)],false);
			return false;
		}
		return true;
	}
	
	iAI@property_Ai;
	iAI@get_Ai()override{return@property_Ai;}
	
	Critter@Npc;
	Critter@[]@ListEnemy;
}

class GroupController:iController
{
	GroupController(Critter&critter)
	{
		@ListNpc=array<Critter@>(0);
		@ListEnemy=array<Critter@>(0);
		@property_Ai=GetAI(critter);
		
		ListNpc.insertLast(critter);
		LeaderId=critter.AIGroupHierarchy;
		
		Critter@icritter=null,leader=GetCritter(LeaderId);
		if(@leader!is null&&LeaderId!=critter.Id)
		ListNpc.insertLast(leader);
		else LeaderId=critter.Id;
		
		TeamId=critter.Stat[(106)];
		@Npc=critter;
		
		for(uint i=0,iEnd=property_Ai.GetWorkCritters(ListEnemy,critter);i<iEnd;i++)
		{
			@icritter=@ListEnemy[i];
			if(icritter.Mode[(510)]!=0&&icritter.IsPlayer()&&icritter.GetAccess()>(1))
			{
				ListEnemy.removeAt(i--);
				iEnd--;
				continue;
			}
			if(!IsEnemy(critter,icritter))
			{
				if(icritter.Stat[(106)]==TeamId)
				{
					if(LeaderId==0||icritter.AIGroupHierarchy==LeaderId)
					ListNpc.insertLast(icritter);
				}
				
				ListEnemy.removeAt(i--);
				iEnd--;
			}
		}
	}
	
	bool Idle()override
	{
		if(ListEnemy.length()>0)
		{
			Attack(ListEnemy[Random(0,ListEnemy.length()-1)],false);
			return false;
		}
		return true;
	}
	
	bool Walk(Critter&critter)override
	{
		if(@property_Ai!is null&&!property_Ai.IsIdleWalk)
		return true;
		
		if(LeaderId==0||LeaderId==critter.Id)
		{
			int rand=Random(0,9);
			if(rand<4)
			critter.MoveRandom();
			return rand!=10;
		}
		else
		{
			Critter@leader=GetCritter(LeaderId);
			
			if(GetCrittersDistantion(leader,critter)>critter.AIWorkRadius)
			AddWalkPlane(critter,0,leader.HexX,leader.HexY,critter.Dir,false,Random(1,critter.AIWorkRadius-1));
			else if(Random(0,10)>4)
			critter.MoveRandom();
		}
		return true;
	}
	
	bool GoHome(Critter&critter)override
	{
		if(LeaderId==0&&ListNpc.length()==1)
		{
			uint mapId=0;
			uint16 homeX=0,homeY=0;
			uint8 dir=0;
			
			critter.GetHomePos(mapId,homeX,homeY,dir);
			
			if(critter.GetMapId()==mapId)
			return AddWalkPlane(critter,0,homeX,homeY,dir,false,0);
		}
		return false;
	}
	
	bool Attack(Critter&target,bool ignoredCheckers)override
	{
		for(uint i=0,iEnd=ListNpc.length();i<iEnd;i++)
		{
			
			if(ignoredCheckers)
			{
				if(@property_Ai!is null)
				return property_Ai.AddAttackPlane(ListNpc[i],target);
				return AddAttackPlane(ListNpc[i],0,target);
			}
			else
			{
				if(ListNpc[i].Quest[(701)]==1)continue;
				if(IsEnemy(ListNpc[i],target))
				{
					if(@property_Ai!is null)
					return property_Ai.AddAttackPlane(ListNpc[i],target);
					return AddAttackPlane(ListNpc[i],0,target);
				}
			}
		}
		
		return true;
	}
	
	bool IsEnemy(Critter&npc,Critter&target)override
	{
		if(@property_Ai!is null&&!property_Ai.IsControllerEnemy)
		return property_Ai.IsEnemy(target);
		
		bool isFrend=false;
		if(npc.KindHierarchy!=0)
		isFrend=IsKindFriend(npc,target);
		
		if(isFrend)
		return false;
		
		return(TeamId!=0&&TeamId!=target.Stat[(106)]);
	}
	
	Critter@Npc;
	int TeamId;
	uint LeaderId;
	Critter@[]@ListNpc;
	Critter@[]@ListEnemy;
	
	iAI@property_Ai;
	iAI@get_Ai()override{return@property_Ai;}
} 

iController@GetTeamController(Critter&critter){return@GroupController(critter);}
iController@GetAloneController(Critter&critter){return@AloneController(critter);}
iController@GetController(Critter&critter)
{
	iAI@ai=@GetAI(critter);
	if(0==critter.Stat[(106)]||ai.GetTeamCritters(critter,null)==1)
	return@GetAloneController(critter);
	return@GetTeamController(critter);
}

void Idle(Critter&critter)
{
	if(critter.IsCanWalk()&&critter.IsLife())
	{
		iController@controller=@GetController(critter);
		if(controller.Idle()&&!controller.Walk(critter))
		controller.GoHome(critter);
	}
}

bool Attacked(Critter&critter,Critter&attacking)
{
	iController@controller=@GetController(critter);
	return controller.Attack(attacking,true);
}

void ShowCritter(Critter&critter,Critter&show)
{
	iController@controller=@GetController(critter);
	iAI@ai=@controller.Ai;
	
	if(ai.IsEnemy(show))
	controller.Attack(show,false);
}

void ShowAttack(Critter&critter,Critter&attacking,Critter&target)
{
	iController@controller=@GetController(critter);
	iAI@ai=@controller.Ai;
	
	if(critter.AIHash==target.AIHash)
	{
		controller.Attack(attacking,true);
		return;
	}
	if(critter.AIHash==attacking.AIHash)
	{
		controller.Attack(target,true);
		return;
	}
	
	int targetProtected=ai.IsProtected(target);
	
	if(0>targetProtected)return;
	
	if(targetProtected>=ai.IsProtected(attacking))
	controller.Attack(attacking,true);
}                                                           

bool AddPlaneChild(Critter&npc,NpcPlane&plane,NpcPlane&child)
{
	if(child.Type==plane.Type&&plane.Attack_TargId==child.Attack_TargId&&(1)==plane.Type)
	return false;
	plane.SetChild(child);
	
	return npc.AddPlane(plane);
}

int PlaneEnd(Critter&critter,NpcPlane&plane,int reason,Critter@someCritter,Item@someItem)
{
	if(plane.Type==(1)&&reason!=(30))
	{
		if(reason==(39))
		{
			Critter@target=GetCritter(plane.Attack_TargId);
			NpcPlane@child=CreatePlane();
			child.Type=(2);
			child.Priority=plane.Priority*2;
			child.Identifier=0;
			child.IdentifierExt=0;
			child.Walk_HexX=target.HexX;
			child.Walk_HexY=target.HexY;
			child.Run=plane.Run;
			child.Walk_Cut=critter.GetMap().GetPathLength(critter,target.HexX,target.HexY,2);
			
			AddPlaneChild(critter,plane,child);
			return(1);
		} 
		
	}
	
	return(0);
} 

void Aggressor(Critter&critter,bool firstTime)
{AiGeneralInitialize(critter);AggressorAI(critter).Initialize(critter);}
class AggressorAI:DefaultAI
{
	AggressorAI(Critter&critter)
	{
		super(critter);
		hash=HashList.Get("Aggressor");
	}
	
	void Initialize(Critter&critter)override
	{
		DefaultAI::Initialize(critter);
		critter.AIHash=hash;
	}
	
	bool IsEnemy(Critter&target)override
	{
		return target.AIHash!=hash;
	}
	
	iAI@Copy(Critter&critter)override
	{
		return AggressorAI(critter);
	}
	
	uint GetWorkCritters(Critter@[]@critters,Critter&critter)override
	{
		return critter.GetMap().GetCritters(0,(0x03),critters);
	}
	
	bool get_IsControllerEnemy()override
	{
		return false;
	}
	
	uint hash;
}

enum CitizenshipType
{
	CTEnemy=-1,
	CTOutcast=-1,
	CTStranger,
	CTVisitor=11,
	CTCitizen,
	
	CTCop,
	CTAdmin,
	CTMayor,
	CTSheriff,
	
	CTMax,
} 

void ModocGuard(Critter&critter,bool firstTime)
{AiGeneralInitialize(critter);ModocGuardAI(critter).Initialize(critter);}
class ModocGuardAI:GuardAI
{
	ModocGuardAI(Critter&critter)
	{
		super(critter);
		hash=HashList.Get("ModocGuard");
	}
	
	void Initialize(Critter&critter)override
	{
		GuardAI::Initialize(critter);
		critter.ModeBase[(517)]=0;
		critter.AIWorkRadius=40;
		critter.AIHash=hash;
	}
	
	int IsProtected(Critter&verifying)override{
		if(IsEnemy(verifying))return CitizenshipType::CTEnemy;
		
		int priority=0;
		
		if(verifying.Quest[(704)]==2)return CitizenshipType::CTCop;
		if(verifying.Quest[(704)]==1)return CitizenshipType::CTAdmin;
		if(verifying.Quest[(704)]==8)return CitizenshipType::CTMayor;
		if(verifying.Quest[(704)]==7)return CitizenshipType::CTSheriff;           
		
		if(verifying.Quest[(705)]!=0)
		{
			if(verifying.Quest[(705)]==10)
			return CitizenshipType::CTOutcast;
			else priority=verifying.Quest[(705)];
		}
		if(hash==verifying.AIHash)priority=CitizenshipType::CTMax;
		
		return priority;
	}
	
	iAI@Copy(Critter&critter)override{
		return@ModocGuardAI(critter);
	}
} 

void Guard(Critter&critter,bool firstTime)
{AiGeneralInitialize(critter);GuardAI(critter).Initialize(critter);}
class GuardAI:DefaultAI
{
	GuardAI(Critter&critter)
	{
		super(critter);
		hashAggressor=HashList.Get("Aggressor");
		hash=HashList.Get("Guard");
	}
	
	bool get_IsIdleWalk()override
	{
		return false;
	} 
	
	bool AddAttackPlane(Critter&critter,Critter&target)override
	{
		if(target.IsNpc())return::AddAttackPlane(critter,0,target);
		return::AddAttackPlane(critter,0,target,0);
	}
	
	bool get_IsControllerEnemy()override
	{
		return false;
	}
	
	uint GetTeamCritters(Critter&critter,Critter@[]@critters)override
	{
		Map@map=critter.GetMap();
		Critter@[]temp={};
		uint len=0;
		for(uint i=0,iEnd=GetWorkCritters(temp,critter);i<iEnd;i++)
		if(temp[i].IsNpc()&&critter.AIHash==temp[i].AIHash)
		{
			if(@critters!is null)
			critters.insertLast(temp[i]);
			len++;
		}
		return len;
	}
	
	void Initialize(Critter&critter)override
	{
		DefaultAI::Initialize(critter);
		
		critter.SetEvent((28),"ShowAttack");
		
		critter.AIHash=hash;
	}
	
	iAI@Copy(Critter&critter)override
	{
		return GuardAI(critter);
	}
	
	bool IsEnemy(Critter&target)override
	{
		return target.AIHash==hashAggressor;
	}
	
	int IsProtected(Critter&target)override
	{
		if(IsEnemy(target))
		return-1;
		if(target.IsPlayer())
		return 1;
		if(target.AIHash==hash)
		return 2;
		return 0;
	}
	
	uint hashAggressor;
	uint hash;
} 

void Default(Critter&critter,bool firstTime)
{AiGeneralInitialize(critter);DefaultAI(critter).Initialize(critter);}
class DefaultAI:iAI
{
	DefaultAI(Critter&critter){}
	
	bool get_IsIdleWalk()override
	{
		return true;
	}
	
	bool AddAttackPlane(Critter&critter,Critter&target)override
	{
		return::AddAttackPlane(critter,0,target);
	}
	
	bool get_IsControllerEnemy()override
	{
		return true;
	}
	
	int IsProtected(Critter&target)override
	{
		return 0;
	}
	
	bool IsEnemy(Critter&target)override
	{
		return false;
	}
	
	void Initialize(Critter&critter)override
	{
		critter.AIHash=HashList.Get("Default");
		critter.ModeBase[(517)]=1;
		
		critter.SetEvent((0),"Idle");
		critter.SetEvent((16),"Attacked");
		
		critter.SetEvent((4),"ShowCritter");
		
	}
	
	uint GetWorkCritters(Critter@[]@critters,Critter&critter)override{
		return critter.GetMap().GetCrittersHex(critter.HexX,critter.HexY,critter.AIWorkRadius,(0x03),critters);
	}
	
	uint GetTeamCritters(Critter&critter,Critter@[]@critters)override
	{
		Map@map=critter.GetMap();
		Critter@[]temp={};
		uint len=0;
		int teamId=critter.Stat[(106)];
		if(teamId!=0)
		{
			for(uint i=0,iEnd=GetWorkCritters(temp,critter);i<iEnd;i++)
			if(temp[i].IsNpc()&&temp[i].Stat[(106)]==teamId)
			{
				if(@critters!is null)
				critters.insertLast(temp[i]);
				len++;
			}
		}
		return len;
	}
	
	iAI@Copy(Critter&critter)override{
		return DefaultAI(critter);
	}
} 

void Humanoid(Critter&critter,bool firstTime)
{AiGeneralInitialize(critter);HumanoidAI(critter).Initialize(critter);}
class HumanoidAI:DefaultAI
{
	HumanoidAI(Critter&critter){
		super(critter);
	}
	
	void Initialize(Critter&critter)override
	{
		DefaultAI::Initialize(critter);
		critter.AIHash=HashList.Get("Humanoid");
	}
	
	iAI@Copy(Critter&critter)override{
		return HumanoidAI(critter);
	}
}

HashMemory HashList;

class HashMemory:AiHashMemory
{
	HashMemory()
	{
		Get("Humanoid",HumanoidAI());
		Get("Aggressor",AggressorAI());
		Get("Default",DefaultAI());
		Get("Guard",GuardAI());
		Get("ModocGuard",ModocGuardAI());
	}
}

AiHashMemory@get_AiHashList(){
	return@HashList;
}

iAI@GetAI(Critter&critter)
{
	iAI@ai=HashList.GetAI(critter.AIHash);
	if(@ai is null)
	return null;
	return@ai.Copy(critter);
}
