
// PowerMagic модуль скрипта mapGen_main, создает деревья на карте. рисует дорожки. нет не кокаиновые, к сожалению. прототип см. в _mapgen,fos
// #import "_math.fos"

void PeasteTree( Map& map, uint16 count, int pasteMethod )
{
    uint16 pos0 = ReturnCoord( map, 25, true );         // начальное х
    uint16 pos1 = ReturnCoord( map, 25, false );        // начальное у
    uint16 pos2 = ReturnCoord( map, 26, true );         // конечное х
    uint16 pos3 = ReturnCoord( map, 27, false );        // конечное у
    if( pasteMethod == -1 )
    {
        pasteMethod = Random( 0, 2 );
    }
    switch( pasteMethod )
    {
    case 0:
        PasteMethodOne( map, count, pos0, pos1, pos2, pos3 );
        break;
    case 1:
        if( count > 200 )
        {
            count = 200;
        }
        PasteMethodTwo( map, count, pos0, pos1, pos2, pos3 );
        break;
    case 2:
        if( count > 400 )
        {
            count = 400;
        }
        PasteMethodThr( map, count, pos0, pos1, pos2, pos3 );
        break;
        // case 3:	if(count > 400) {count = 400;}PasteMethodFor(map, count, pos0, pos1, pos2, pos3); break;
    }
}

void PasteMethodOne( Map& map, uint8 count, uint16 pos0, uint16 pos1, uint16 pos2, uint16 pos3 )
{
    uint16 posX, posY = 0;
    for( uint i = 0; i < count; i++ )
    {
        posX = GenRandomCoord( pos0, pos2 );
        posY = GenRandomCoord( pos1, pos3 );
        if( map.IsHexPassed( posX, posY ) )
        {
            map.AddItem( posX, posY, MAPGEN_FRT_TREE, 1 );
            // if(not valid(map.AddItem(posX,posY,569,1))) {Log("Added item is not valid");} //return;
        }
    }
}

void PasteMethodTwo( Map& map, uint16 count, uint16 pos0, uint16 pos1, uint16 pos2, uint16 pos3 )
{
    uint   radius = 0;
    uint16 posX = 0;
    uint16 posY = 0;
    for( uint i = 0; i < count; i++ )
    {
        radius  = Random( 4, 8 );
        posX = GenRandomCoord( pos0, pos2 );
        posY = GenRandomCoord( pos1, pos3 );
        // for(uint j = 0; j < radius; j++)
        // {/*map.IsHexPassed(posX,posY) &&*/
        if( radius > 4 )
        {
            // if(radius > 0)
            // {
            if( map.IsHexPassed( posX, posY - radius ) )
            {
                map.AddItem( posX, posY - radius, MAPGEN_FRT_TREE, 1 );
            }
            if( map.IsHexPassed( posX, posY + radius ) )
            {
                map.AddItem( posX, posY + radius, MAPGEN_FRT_TREE, 1 );
            }                                                                                                                // высщая и низщая точки матрицы
            if( map.IsHexPassed( posX + radius, posY ) )
            {
                map.AddItem( posX + radius, posY, MAPGEN_FRT_TREE, 1 );
            }
            if( map.IsHexPassed( posX - radius, posY ) )
            {
                map.AddItem( posX - radius, posY, MAPGEN_FRT_TREE, 1 );
            }                                                                                                                // левые и правые
            if( map.IsHexPassed( posX + radius / 2, posY ) )
            {
                map.AddItem( posX + radius / 2, posY - radius / 2, MAPGEN_FRT_TREE, 1 );
            }
            if( map.IsHexPassed( posX + radius / 2, posY ) )
            {
                map.AddItem( posX + radius / 2, posY + radius / 2, MAPGEN_FRT_TREE, 1 );
            }
            if( map.IsHexPassed( posX - radius / 2, posY ) )
            {
                map.AddItem( posX - radius / 2, posY - radius / 2, MAPGEN_FRT_TREE, 1 );
            }
            if( map.IsHexPassed( posX - radius / 2, posY ) )
            {
                map.AddItem( posX - radius / 2, posY + radius / 2, MAPGEN_FRT_TREE, 1 );
            }
            radius--;
            // }
        }
        // }

    }
}

void PasteMethodThr( Map& map, uint8 count, uint16 pos0, uint16 pos1, uint16 pos2, uint16 pos3 )
{
    uint16 posX = 0;
    uint16 posY = 0;
    for( uint i = 0; i < count; i++ )
    {
        posX = GenRandomCoord( pos0, pos2 );
        posY = GenRandomCoord( pos1, pos3 );
        for( uint j = 0; j < 6; j++ )
        {
            if( map.IsHexPassed( posX, posY ) )
            {
                map.AddItem( posX, posY, MAPGEN_FRT_TREE, 1 );
                map.MoveHexByDir( posX, posY, j, 2 );
            }
        }
    }
}
/*
   void MakeStoneRoadNew(Map& map, uint16 hexX, uint16 hexY, uint8 lenght, uint8 dir, uint8 step)
   {
   if (step < 1) {step = 1;}
   for(uint i = 0; i < lenght; i++)
   {
    map.MoveHexByDir(hexX, hexY, dir, Random(1,step));
    if(map.IsHexPassed(hexX, hexY))
    {
      map.AddItem(hexX, hexY, MAPGEN_FRT_STONE, 1);
      map.SetData(MAPGEN_ROAD_HEXX, hexX);
      map.SetData(MAPGEN_ROAD_HEXY, hexY);
    }
   }
   }*/
/*
   void MakeFewRoads(Map& map)
   {
   MakeStoneRoadNew(map, Random(20,70), Random(20,70), Random(1, 15), Random(0,5), Random(0,3));
   for(uint8 i = 0; i < 10; i++)
   {
    MakeStoneRoadNew(map, map.GetData(MAPGEN_ROAD_HEXX), map.GetData(MAPGEN_ROAD_HEXY), Random(1, 15), Random(0,5), Random(0,3));
   }
   }*/
/*
   void AddJunk(Map& map, uint8 count)
   {
   uint16 protoId = 0;
   uint8 rnd = 0;
   for(uint8 i = 0; i < count; i++)
   {
    rnd = Random(0,2);
    switch(rnd)
    {
      case 0: break;
      case 1: break;
      case 2: break;
      default : break;
    }
    map.AddItem(Random(ReturnCoord(map, 25, true), ReturnCoord(map, 26, true)), Random(ReturnCoord(map, 25, false), ReturnCoord(map, 27, false)), protoId, 1);
   }
   }
 */
/*
   void MakeManyFrtHouses(Map& map, uint8 count)
   {
   uint16[] hex;
   uint16 hexX = Random(60,90);
   uint16 hexY = Random(60,90);
   uint8  width = Random(8, 18);
   uint8  heigth = Random(6,14);
   if(count < 1) {count = 1;}
   for(uint8 i = 0 , j = 0; i < count; i++)
   {
    hexX = Random(60,90);
    hexY = Random(60,90);
    MakeFrtHouse(map,hexX, hexY, width, heigth);
    map.SetData(MAP_DATA_HOUSE_ROOF_COUNT, i);/*
    map.SetData(MAP_DATA_HOUSE_ROOF_HEX-j, hexX);
    map.SetData(MAP_DATA_HOUSE_ROOF_HEX-j-1, hexY);*/

//     hex[j] = hexX;
//     hex[j+1] = hexY;
//     j+=2;
//   }
/*
   for(uint8 i = 0; i < hex.lenght(); i++)
   {

   }*
   }*/
/*
   void MakeFrtHouse(Map& map,uint16 hexX, uint16 hexY, uint8 width, uint8 heigth) //, uint8 heigth, uint8 width)
   {
   /*
   uint16 hexX = Random(60,90);
   uint16 hexY = Random(60,90);
   uint8  width = Random(8, 18);
   uint8  heigth = Random(6,14);
 *
   MakeHouseWall(map, width, heigth, hexX, hexY);
   for (uint8 i = 0; i <heigth; i++)
   {
    for(uint8 ii = 0; ii < width; ii++)
    {
      PasteTiles(map, hexX+ii, hexY+i, MAPGEN_TILE_FRT_0);

    }
   }
   }*/


/*
   void MakeStoneRoad(Map& map, int16 hexX, int16 hexY, int16 hexXFn, int16 hexYFn)
   {

   //uint8 rndNum = 0;
   string logMsg;
   uint8 nextPath = 0;
   uint count = 150;
   if(hexXFn == 0) {hexXFn = 1;}
   if(hexYFn == 0) {hexYFn = 1;}
   while((abs(hexX - hexXFn) > 2 && abs(hexY - hexYFn) > 2) || count > 0)
   {
    count--;
    /*if(hexXFn - hexX > 0) {if(hexX % 2 == 0) {hexX++;} /*else {hexX--;}*} else {if(hexX % 2 == 0) {hexX--;} else {hexX++;}}
    if(hexYFn - hexY > 0) {if(hexY % 2 == 0) {hexY++;} else {hexY--;}} else {if(hexY % 2 == 0) {hexY--;} else {hexY++;}}
    logMsg = "hexX = "+hexX+" hexY = "+hexY+" count = "+count;
    Log(logMsg);

    switch(nextPath)
      {
        case 0:
          //if(map.IsHexPassed(hexX ,hexY))
          {
            map.AddItem(hexX,hexY,MAPGEN_FRT_STONE,1);
          //if(hexXFn - hexX > 0) {if(hexX % 2 == 0) {hexX++;} else {hexX--;}} else {if(hexX % 2 == 0) {hexX--;} else {hexX++;}}
         // if(hexYFn - hexY > 0) {if(hexY % 2 == 0) {hexY++;} else {hexY--;}} else {if(hexY % 2 == 0) {hexY--;} else {hexY++;}}
          if(hexXFn - hexX > 0) {hexX++;} else {hexX--;}
           if(hexYFn - hexY > 0) {hexY++;} else {hexY--;}
            break;
          }
           //else
          //{nextPath++;}
        case 1:
          if(map.IsHexPassed(hexX + 1,hexY) && hexXFn - hexX > 0)
          {
            hexX++;
            map.AddItem(hexX,hexY,MAPGEN_FRT_STONE,1);
            break;
          }
          else {nextPath++;}
        case 2:
          if(map.IsHexPassed(hexX - 1,hexY) && hexXFn - hexX < 0)
          {
            hexX--;
            map.AddItem(hexX,hexY,MAPGEN_FRT_STONE,1);
            break;
          }
          else {nextPath++;}
        case 3:
          if(map.IsHexPassed(hexX + 1,hexY + 1) && hexXFn - hexX > 0 && hexYFn - hexY > 0)
          {
            hexX++;
            hexY++;
            map.AddItem(hexX,hexY,MAPGEN_FRT_STONE,1);
            break;
          }
          else {nextPath++;}
        case 4:
          if(map.IsHexPassed(hexX - 1,hexY + 1) && hexXFn - hexX < 0 && hexYFn - hexY > 0)
          {
            hexX--; map.AddItem(hexX,hexY,MAPGEN_FRT_STONE,1);
            break;
          }
          else {nextPath++;}
        case 5:
          if(map.IsHexPassed(hexX,hexY + 1) && hexYFn - hexY > 0)
          {
            hexY++; map.AddItem(hexX,hexY,MAPGEN_FRT_STONE,1);
            break;
          }
          else {nextPath++;}
        case 6:
          if(map.IsHexPassed(hexX,hexY - 1) && hexYFn - hexY < 0)
          {
            hexY++; map.AddItem(hexX,hexY,MAPGEN_FRT_STONE,1);
            break;
          }
          else {nextPath++;}
        case 7:
          if(hexXFn - hexX > 0) {hexX++;}
          else  {hexX--;}
          if(hexYFn - hexY > 0) {hexY++;}
          else {hexY--;}
      }
   nextPath = 0;
    }
   }
 */
