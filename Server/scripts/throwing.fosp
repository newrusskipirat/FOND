

bool LocIsModoc(uint locPid)
{
	return(locPid<=(1253));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(32)||locPid==(1216)||locPid==(43)||locPid==96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(42));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

shared interface Project
{
	string@get_Name();
	void Build();
	void SetAssociation(string@ex,string@className,string@classModule);
}

shared interface FileObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	void FormatStringData(string&nameData,string&data);
	FileObject@get_Pattern(string&name)const;
	FileObject@get_Copy(string&name); 
	
	void set_GlobalData(string@name,string@value);          
	
	string@get_GlobalData(string@name);            
	
}

shared class TimeLog
{
	uint tick;
	
	TimeLog()
	{
		refresh();
	}
	
	void refresh()
	{
		tick=GetTick();
	}
	
	bool check(uint count)
	{
		return(GetTick()-tick>=count);
	}
	
	uint get()
	{
		uint old=tick;
		refresh();
		return(tick-old);
	}
	
	void Log(string&in message)
	{
		::ClearLog(message+" ["+(GetTick()-tick)+"ms]");
	}
}

shared interface AnyDataObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	uint[]@get_SaveData();
	void InitData(uint[]&data);
}

shared interface ManagerObject
{
	FileObject@get_ProtoObject(string@name);
	void ParseProtoTypes(const string&ex,const FileObject&pattern,const string@search);
	FileObject@ParseProtoTypeFile(string&name,const string&ex,const FileObject&pattern,const string@search);
	FileObject@AddPrototype(FileObject@proto);
	FileObject@StringToFileObject(string&name,string&txt,const FileObject&pattern);
}

shared interface ValueAPI{}
shared class SettingsAPI
{
	string Name;
	bool IsDebug;
} 

shared class GlobalData
{
	uint Hash;
	string Value;
	
	GlobalData(string@name)
	{
		Hash=GetStrHash(name);
		Value="";
	} 
	
	void SaveData(uint[]&outArray,uint&position)
	{
		uint len=Value.length();
		
		outArray.resize(position+2+len/2);
		
		outArray[position++]=Hash;
		outArray[position++]=len;
		
		for(uint i=0;i<len;i++)
		{
			outArray[position]|=Value[i++]<<24;
			outArray[position]|=Value[i++]<<16;
			outArray[position]|=Value[i++]<<8;
			outArray[position++]|=Value[i];
		}
	} 
	
	void LoadData(uint[]&in outArray,uint&position)
	{
		Hash=outArray[position++];
		uint len=outArray[position++];
		Value.resize(len);
		
		for(uint i=0;i<len;i++)
		{
			Value[i++]=(outArray[position]>>24)&0xFF;
			Value[i++]=(outArray[position]>>16)&0xFF;
			Value[i++]=(outArray[position]>>8)&0xFF;
			Value[i]=outArray[position++]&0xFF;
			
		}
	}
} 

shared class Hexagonal
{
	Hexagonal(){Reset();}
	Hexagonal(const uint16&in x,const uint16&in y){Set(x,y);}
	Hexagonal(const Hexagonal&master){Set(master);}
	
	Hexagonal(const Critter&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Item&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Scenery&master){Set(master.HexX,master.HexY);}
	
	bool Entire(Map&map,int entNum){return map.GetEntireCoords(entNum,0,X,Y);}
	bool IsPassed(Map&map){return ValidPosition(map)&&map.IsHexPassed(X,Y);}
	bool IsPassed(Map&map,Hexagonal&begin,Hexagonal&end){return ValidPosition(map,begin,end)&&map.IsHexPassed(X,Y);}
	
	bool ValidPosition(Map&map)
	{
		Hexagonal end,begin;
		if(end.Entire(map,0)&&begin.Entire(map,255))
		return ValidPosition(map,begin,end);
		return false;
	}
	
	bool ValidPosition(Map&map,Hexagonal&begin,Hexagonal&end)
	{
		return(X>=begin.X&&Y>=begin.Y
		&&X<=end.X&&Y<=end.Y);
	}
	
	bool Transit(Critter&critter,Map&map){return Transit(critter,map,critter.Dir);}
	bool Transit(Critter&critter,Map&map,uint8 direction)
	{
		if(!IsPassed(map))return false;
		return critter.TransitToMap(map.Id,X,Y,direction);
	}
	
	bool Transit(Critter&critter,uint mapId){return Transit(critter,mapId,critter.Dir);}
	bool Transit(Critter&critter,uint mapId,uint8 direction)
	{
		if(mapId==0)return false;
		Map@map=GetMap(mapId);
		if(@map is null)return false;
		return Transit(critter,map,direction);
	} 
	
	void Set(const uint16&in x,const uint16&in y){X=x;Y=y;}
	void Set(const Hexagonal&in other){Set(other.X,other.Y);}
	void Reset(){X=Y=0;}
	uint Distantion(Hexagonal&other){return GetDistantion(X,Y,other.X,other.Y);}
	
	uint16 X;
	uint16 Y;
	
	bool opEquals(const Hexagonal&in other){return(other.X==X&&other.Y==Y);}
	Hexagonal&opAssign(const Hexagonal&in other)
	{
		Set(other);
		return this;
	}
	
	const uint get_UID(const uint w)const{return X+Y*w;}
	string get_Debug(){return"X:"+X+"Y:"+Y;}
	void Log(string&str){::Log(str+":"+Debug);}
}    

shared class MapHash
{
	MapHash(const uint16&in protoId)
	{
		ProtoId=protoId;
		@Min=null;
		@Max=null;
	}
	
	MapHash&opAssign(Map&map)
	{
		@Min=Hexagonal(0,0);
		@Max=Hexagonal(0,0);
		map.GetEntireCoords(0,0,Max.X,Max.Y);
		map.GetEntireCoords((255),0,Min.X,Min.Y);
		return this;
	}
	
	uint16 ProtoId;
	Hexagonal@Min;
	Hexagonal@Max;
} 

shared class Line
{
	Line(Hexagonal&a,Hexagonal&b){@A=a;@B=b;}
	
	uint get_Length()
	{
		return B.Distantion(A);
	}
	
	uint get_Point(Hexagonal&point)
	{
		return B.Distantion(point);
	}
	
	float get_Module(Hexagonal&point)
	{
		return Point[point]/Length;
	}
	
	Hexagonal@get_opIndex(const uint&in size)
	{
		
		const float mod=float(size/Length);
		return@Hexagonal(A.X+(B.X-A.X)*mod,A.Y+(B.Y-A.Y)*mod);
	} 
	
	Line(Map&map,uint16 grid,MapHash@hash)
	{
		if(@hash is null)
		{
			Hexagonal min,max;
			map.GetTransferParams(min.X,min.Y,max.X,max.Y,grid);
			
			@A=@Hexagonal(min.X,min.Y);
			@B=@Hexagonal(max.X,max.Y);
		}
		else
		{
			if(@hash.Min is null||@hash.Max is null)
			map.GetTransferParams(hash.Min.X,hash.Min.Y,hash.Max.X,hash.Max.Y,grid);
			
			@A=@Hexagonal(hash.Min.X,hash.Min.Y);
			@B=@Hexagonal(hash.Max.X,hash.Max.Y);
		}
	} 
	
	string get_Debug(){return"A<"+A.Debug+">B<"+B.Debug+">";}
	void Log(string&str){::Log(str+":"+Debug);}
	
	Hexagonal@A;
	Hexagonal@B;
}  

import MapHash@GetMapHash(const uint16&in pid)from"world";
import uint CreateLocation(Hexagonal&coordinate,uint16 locationPid)from"world"; 

import ManagerObject@get_objectManager()from"world"; 

import EventTree@get_EventRoot()from"world"; 

import Project@CreateProject(string@name,string@path)from"main";
import Project@get_Project(string@name)from"main";                                                                                                                                

bool IsThrowingWeapon(Item@item)
{
	if(!(@item!=null))
	return false;
	if(item.GetType()!=(3))
	return false;
	uint8 use=((item.Mode)&0xF);
	return((use)==0?item.Proto.Weapon_Skill_0:((use)==1?item.Proto.Weapon_Skill_1:((use)==2?item.Proto.Weapon_Skill_2:0)))==(205);
}

uint GetMaxRange(Critter&cr,Item@item)
{
	if(!(@item!=null))
	return 0;
	uint bonus=3*(cr.Perk[(336)]);
	uint max=3*cr.Stat[(0)];
	if(IsThrowingWeapon(item))
	{
		uint8 use=((item.Mode)&0xF);
		return bonus+(((((use)==0?item.Proto.Weapon_MaxDist_0:((use)==1?item.Proto.Weapon_MaxDist_1:((use)==2?item.Proto.Weapon_MaxDist_2:0))))<(max))?(((use)==0?item.Proto.Weapon_MaxDist_0:((use)==1?item.Proto.Weapon_MaxDist_1:((use)==2?item.Proto.Weapon_MaxDist_2:0)))):(max));
	}
	else
	{
		float lbs=0.002*item.Proto.Weight;
		lbs=(((lbs)>(1.0f))?(lbs):(1.0f));
		lbs=sqrt(lbs);
		return uint(float(max)/lbs);
	}
}

bool IsThrowable(ProtoItem&weapon)
{
	if(!(@weapon!=null))
	false;
	return!(weapon.Type==(3)&&weapon.Weapon_IsUnarmed);
}

int ThrowingToHit(Critter&cr,uint16 tx,uint16 ty,ProtoItem&weapon)
{
	if(!(@weapon!=null))
	return 0;
	if(weapon.Type==(3)&&weapon.Weapon_IsUnarmed)
	return 0;
	if(!cr.IsLife())
	return 0;
	
	int dist=GetDistantion(cr.HexX,cr.HexY,tx,ty);
	
	int toHit=int(cr.Skill[(205)]);
	int weaponPerk=weapon.Weapon_Perk;
	int blockers=0;  
	
	int distmod1=2;
	int distmod2=0;
	
	int perception=cr.Stat[(1)];
	int acc=dist;
	
	if(dist<distmod2)
	acc+=distmod2;
	else
	{
		if(cr.IsPlayer())
		acc-=(perception-2)*distmod1;
		else
		acc-=perception*distmod1;
	}
	
	if(-2*perception>acc)
	acc=-2*perception;
	
	acc-=2*cr.Perk[(315)];
	
	if(acc>=0)
	{
		if(cr.Damage[(502)]!=0)
		acc*=-12;
		else
		acc*=-4;
	}
	else
	acc*=-4;
	
	toHit+=acc; 
	
	Map@map=cr.GetMap();
	blockers=map.GetCrittersPath(cr.HexX,cr.HexY,tx,ty,0.0f,dist,(0x01),null);    
	
	toHit-=10*blockers;
	
	if(cr.Damage[(502)]!=0)
	toHit-=25;
	toHit=(((toHit)>(95))?(95):(((toHit)<(5))?(5):(toHit)));
	return toHit;
}

int ActionPointsCost(Item&item)
{
	if(IsThrowingWeapon(item))
	{
		uint8 use=((item.Mode)&0xF);
		return((use)==0?item.Proto.Weapon_ApCost_0:((use)==1?item.Proto.Weapon_ApCost_1:((use)==2?item.Proto.Weapon_ApCost_2:0)));
	}
	float lbs=0.002*item.Proto.Weight;
	lbs=(((lbs)>(1.0f))?(lbs):(1.0f));
	lbs=sqrt(lbs)+3;
	return int(lbs);
}

bool IsThrowableThere(Critter&cr,Item@item,uint16 tx,uint16 ty)
{
	if(!(@item!=null)||!IsThrowable(item.Proto)||!cr.IsLife())
	return false;
	
	if(cr.Stat[(75)]<ActionPointsCost(item))
	return false;
	
	return GetMaxRange(cr,item)>=GetDistantion(cr.HexX,cr.HexY,tx,ty);
	
}  

void unsafe_Throw(Critter&player,int px,int py,int p2,string@param3,array<int>@param4)
{
	if(player.IsBusy())
	return;
	Map@map=player.GetMap();
	if(!(@map!=null))
	return;
	if(px<0||px>=int(map.GetWidth())||py<0||py>=int(map.GetHeight()))
	return;
	
	Item@item=player.GetItem(0,(1));
	if(!IsThrowableThere(player,item,px,py))
	return;
	
	uint itemPID=item.GetProtoId();
	uint[]items_restricted_to_throw={(692),(694),(1537)};
	if(items_restricted_to_throw.find(itemPID)!=-1)
	return;
	
	uint16 tx=px;
	uint16 ty=py; 
	
	uint16 pbx=tx;
	uint16 pby=ty;
	uint16 bx=tx;
	uint16 by=ty;
	map.GetHexCoord(player.HexX,player.HexY,tx,ty,0,0);
	
	int tohit=ThrowingToHit(player,tx,ty,item.Proto);
	if(tohit>=Random(1,100))
	{
		CommenceThrowing(player,map,item,tx,ty);
	}
	else
	{
		uint dist=GetDistantion(player.HexX,player.HexY,tx,ty)+1;
		map.MoveHexByDir(tx,ty,Random(0,5),Random(1,dist/2));
		map.GetCrittersPath(player.HexX,player.HexY,tx,ty,0.0f,0,(0x03),null,pbx,pby,bx,by);
		tx=pbx;
		ty=pby;
		CommenceThrowing(player,map,item,tx,ty);
	}
	
}

bool IsGrenade(Item&item)
{
	if(!IsThrowingWeapon(item))
	return false;
	uint8 use=((item.Mode)&0xF);
	uint8 dmgType=((use)==0?item.Proto.Weapon_DmgType_0:((use)==1?item.Proto.Weapon_DmgType_1:((use)==2?item.Proto.Weapon_DmgType_2:0)));
	return dmgType==(4)||dmgType==(6)||dmgType==(7);
}

void CommenceThrowing(Critter&cr,Map&map,Item&item,uint16 tx,uint16 ty)
{
	uint8 dir=GetDirection(cr.HexX,cr.HexY,tx,ty);
	cr.SetDir(dir);
	cr.Animate(0,(53),null,true,true);
	if(cr.Mode[(510)]!=0)
	{
		if(!cr.IsPlayer()||cr.GetAccess()==(0))
		cr.ModeBase[(510)]=0;
	}
	cr.Wait(__Breaktime);
	cr.StatBase[(75)]-=100*ActionPointsCost(item);
	map.RunFlyEffect(item.GetProtoId(),cr,null,cr.HexX,cr.HexY,tx,ty);
	uint16 pid=item.GetProtoId();
	if(IsGrenade(item))
	{
		cr.PlaySound(87,65,((0)==0?item.Proto.Weapon_SoundId_0:((0)==1?item.Proto.Weapon_SoundId_1:((0)==2?item.Proto.Weapon_SoundId_2:0))),49,true);
		uint timeout=cr.Timeout[(238)];
		if(timeout<__TimeoutBattle)
		cr.TimeoutBase[(238)]=__FullSecond+__TimeoutBattle;
		uint[]values={map.Id,tx,ty,pid,cr.Id};
		CreateTimeEvent(__FullSecond+((1)*__TimeMultiplier),"e_Explode",values,false);
		do{if(item.GetCount()>(1))
			item.SetCount(item.GetCount()-(1));else
			DeleteItem(item);}while(false);
	}
	else
	{
		cr.PlaySound(87,65,79,49,true);
		MoveItem(item,1,map,tx,ty);
		item.EventDrop(cr);
		cr.EventDropItem(item);
	}
}
import void CommenceExplosionEx(Critter@attacker,Map@map,uint16 tx,uint16 ty,Critter@target,uint weapPid,bool isCritical,uint intentionallyId,bool isRocket)from"combat";
import void Explode(Map@map,uint16 hexX,uint16 hexY,Critter@cr,uint16 explodePid,uint ownerId,int bonusDamage,int bonusRadius)from"explode";

uint e_Explode(array<uint>@values)
{
	Map@map=GetMap(values[0]);
	if(!(@map!=null))
	return 0;
	Critter@cr=GetCritter(values[4]);
	
	CommenceExplosionEx(GetCritter(values[4]),map,values[1],values[2],null,values[3],false,0,false);
	return 0;
}                                                                                                        

