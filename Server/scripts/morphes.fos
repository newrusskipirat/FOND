// Автор: TabaK

// import void ApplyMutation(Critter& cr) from "morphes";

import bool IsHuman( Critter& cr ) from "races";
#include "_macros.fos"
#include "_colors.fos"

#define EVENT_MUT    ( 7 )

import void DropRadiation( Critter& cr ) from "radiation";
import void FlushScreen( Critter& cr, uint fromColor, uint toColor, uint timeMs ) from "effects";


void ApplyMutation( Critter& cr )
{
    if( !IsHuman( cr ) )
        return;
		
	if( cr.GetTimeEvents( EVENT_MUT, null, null, null ) > 0 )
		return;

    if( cr.Stat[ ST_MUTATION ] > 2 )
        return;
		
    uint roll = Random( 1, 100 ) - cr.Stat[ ST_LUCK ];
    if( roll == 51 )
    {
        cr.AddTimeEvent( "cte_superman", 60 * 60, EVENT_MUT );
    }
    else if( roll < 100 )
    {
        cr.AddTimeEvent( "cte_mutation", 60 * 60, EVENT_MUT );
    }
    else
        cr.AddTimeEvent( "cte_deadman", 60 * 60, EVENT_MUT );
}

void GM_ApplyDesease( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ cr = GetCritter( param0 );
    GameVar@ strain = GetGlobalVar( GVAR_desease_strain );
    if( cr.Stat[ ST_DESEASE ] >= strain.GetValue() && cr.Stat[ ST_TOXIC ] == 0 )
    {
        player.Say( SAY_NETMSG, "игрок иммунен" );
        return;
    }
    if( cr.GetTimeEvents( EVENT_MUT, null, null, null ) == 0 )
    {
        cr.AddTimeEvent( "cte_desease", 60, EVENT_MUT );
        cr.StatBase[ ST_DESEASE ] = strain.GetValue();
        cr.StatBase[ ST_TOXIC ] += 1;
        player.Say( SAY_NETMSG, "Заражен персонаж " + cr.Id );
    }
    else
        player.Say( SAY_NETMSG, "игрок уже заражен" );
}

void ApplyDesease( Critter& player, int param0, int param1 )
{
    Critter@ cr = GetCritter( param0 );
    GameVar@ strain = GetGlobalVar( GVAR_desease_strain );
    if( param1 == 0 )
        param1 = strain.GetValue();
    if( cr.Stat[ ST_DESEASE ] >= param1 && cr.Stat[ ST_TOXIC ] == 0 )
        return;
    if( cr.GetTimeEvents( EVENT_MUT, null, null, null ) == 0 )
    {
        cr.StatBase[ ST_DESEASE ] = param1;
        cr.StatBase[ ST_TOXIC ] += 1;
        cr.AddTimeEvent( "cte_desease", 60, EVENT_MUT );
    }
}

void GM_ApplyFastMutation( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ cr = GetCritter( param0 );
    if( !IsHuman( cr ) || !valid( cr ) )
        return;
    if( cr.Stat[ ST_MUTATION ] > 2 )
        return;
    cr.StatBase[ ST_STRENGTH ] += Random( 0, 3 );
    cr.StatBase[ ST_INTELLECT ] -= Random( 0, 2 );
    cr.StatBase[ ST_MAX_LIFE ] += Random( 0, 50 );
    cr.StatBase[ ST_CHARISMA ] -= Random( 0, 2 );
    cr.StatBase[ ST_AGILITY ] -= Random( 0, 1 );
    cr.StatBase[ ST_STRENGTH ] += Random( 0, 3 );
    cr.StatBase[ ST_INTELLECT ] -= Random( 0, 2 );
    cr.StatBase[ ST_MAX_LIFE ] += Random( 0, 50 );
    cr.StatBase[ ST_CHARISMA ] -= Random( 0, 2 );
    cr.StatBase[ ST_AGILITY ] -= Random( 0, 1 );
    cr.SkillBase[ SK_BIG_GUNS ] += Random( 50, 100 );
    cr.SkillBase[ SK_UNARMED ] += Random( 50, 100 );
    cr.StatBase[ ST_STRENGTH ] += Random( 1, 5 );
    cr.StatBase[ ST_INTELLECT ] -= Random( 1, 4 );
    cr.StatBase[ ST_ENDURANCE ] += Random( 4, 8 );
    cr.StatBase[ ST_MAX_LIFE ] += Random( 50, 150 );
    cr.StatBase[ ST_CHARISMA ] -= Random( 1, 4 );
    cr.StatBase[ ST_CURRENT_HP ] = cr.Stat[ ST_MAX_LIFE ];
    cr.StatBase[ ST_CARRY_WEIGHT ] += Random( 5000, 15000 );
    cr.StatBase[ ST_AGILITY ] -= Random( 1, 2 );
    FlushScreen( cr, COLOR_WHITE, COLOR_WHITE, 10000 );
    cr.StatBase[ ST_BODY_TYPE ] = BT_SUPER_MUTANT;
    cr.ChangeCrType( 21 );
    cr.StatBase[ ST_BASE_CRTYPE ] = 21;
    cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 12960 );
    cr.StatBase[ ST_MUTATION ] == 3;
}

void GM_ApplyGhoul( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    Critter@ cr = GetCritter( param0 );
    if( !IsHuman( cr ) || !valid( cr ) )
        return;
    ApplyGhoul( cr );
}

void ApplyGhoul( Critter& cr )
{
    uint newSkin = Random( 28, 29 );
    if( newSkin == 29 )
        newSkin += 50;
    FlushScreen( cr, COLOR_WHITE, COLOR_WHITE, 10000 );
    cr.StatBase[ ST_MUTATION ] = 3;
    cr.StatBase[ ST_STRENGTH ] -= Random( 1, 4 );
    cr.StatBase[ ST_PERCEPTION ] += Random( 3, 6 );
    cr.StatBase[ ST_CARRY_WEIGHT ] -= Random( 10, 50 );
    cr.StatBase[ ST_CHARISMA ] -= Random( 1, 4 );
    cr.StatBase[ ST_ENDURANCE ] += Random( 4, 8 );
    cr.StatBase[ ST_AGILITY ] -= Random( 1, 3 );
    cr.StatBase[ ST_BODY_TYPE ] = BT_GHOUL;
    cr.ChangeCrType( newSkin );
    cr.StatBase[ ST_BASE_CRTYPE ] = newSkin;
    cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 12960 );
    DropRadiation( cr );
}

uint cte_mutation( Critter& cr, int identifier, uint& rate )
{
    if( ( cr.Stat[ ST_RADIATION_LEVEL ] + Random( 0, 400 ) ) > 800 )
    {
        ApplyGhoul( cr );
        return 0;
    }
    if( ( cr.Stat[ ST_ENDURANCE ] + cr.Stat[ ST_LUCK ] + Random( 1, 10 ) ) > 24 )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 12970 );
        return 0;
    }
    else
    {
        if( cr.Stat[ ST_MUTATION ] < 2 )
        {
            cr.StatBase[ ST_STRENGTH ] += Random( 0, 3 );
            cr.StatBase[ ST_INTELLECT ] -= Random( 0, 2 );
            cr.StatBase[ ST_MAX_LIFE ] += Random( 0, 50 );
            cr.StatBase[ ST_CHARISMA ] -= Random( 0, 2 );
            cr.StatBase[ ST_CURRENT_HP ] = cr.Stat[ ST_MAX_LIFE ];
            cr.StatBase[ ST_AGILITY ] -= Random( 0, 1 );
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, Random( 12971, 12975 ) );
            cr.StatBase[ ST_MUTATION ]++;
            return Random( 120, 240 ) * 60;
        }
        else
        {
            cr.SkillBase[ SK_BIG_GUNS ] += Random( 50, 100 );
            cr.SkillBase[ SK_UNARMED ] += Random( 50, 100 );
            cr.StatBase[ ST_STRENGTH ] += Random( 1, 5 );
            cr.StatBase[ ST_INTELLECT ] -= Random( 1, 4 );
            cr.StatBase[ ST_ENDURANCE ] += Random( 4, 8 );
            cr.StatBase[ ST_MAX_LIFE ] += Random( 50, 150 );
            cr.StatBase[ ST_CHARISMA ] -= Random( 1, 4 );
            cr.StatBase[ ST_CURRENT_HP ] = cr.Stat[ ST_MAX_LIFE ];
            cr.StatBase[ ST_CARRY_WEIGHT ] += Random( 5000, 15000 );
            cr.StatBase[ ST_AGILITY ] -= Random( 1, 2 );
            FlushScreen( cr, COLOR_WHITE, COLOR_WHITE, 10000 );
            cr.StatBase[ ST_BODY_TYPE ] = BT_SUPER_MUTANT;
            cr.ChangeCrType( 21 );
            cr.StatBase[ ST_BASE_CRTYPE ] = 21;
            cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 12960 );
            cr.StatBase[ ST_MUTATION ] == 3;
            return 0;
        }
    }
}

uint cte_desease( Critter& cr, int identifier, uint& rate )
{
    GameVar@ strain = GetGlobalVar( GVAR_desease_strain );
    if( cr.Stat[ ST_DESEASE ] - 1 > strain.GetValue() )
        cr.StatBase[ ST_DESEASE ] = strain.GetValue();

    if( cr.Stat[ ST_TOXIC ] == 0 )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 12970 );
        return 0;
    }
    else if( ( cr.Stat[ ST_RADIOACTIVE ] ) > 0 && ( cr.Stat[ ST_RADIOACTIVE ] ) < 6 )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 12824 );
        cr.StatBase[ ST_CURRENT_HP ] -= ( ( cr.Stat[ ST_CURRENT_HP ] ) / 100 );
        if( !cr.IsDead() )
            cr.Say( SAY_EMOTE_ON_HEAD, "кашляет" );
        cr.StatBase[ ST_RADIOACTIVE ] -= 1;
        return Random( 40, 60 ) * 60;
    }
    else if( cr.Stat[ ST_TOXIC ] < 10 )
    {
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, Random( 12815, 12817 ) );
        cr.StatBase[ ST_TOXIC ] += 1;
        return Random( 3, 10 ) * 60;
    }
    else if( cr.Stat[ ST_TOXIC ] < 50 )
    {
        cr.StatBase[ ST_CURRENT_HP ] -= ( ( cr.Stat[ ST_CURRENT_HP ] ) / 50 - 1 );
        if( !cr.IsDead() )
            cr.Say( SAY_EMOTE_ON_HEAD, "кашляет" );
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, Random( 12815, 12817 ) );
        cr.StatBase[ ST_TOXIC ] += 1;
        Map @ map = cr.GetMap();
        Critter@[] persons;
        if( map.GetCrittersHex( cr.HexX, cr.HexY, 2, FIND_LIFE_AND_KO | FIND_ONLY_PLAYERS, persons ) > 0 )
        {
            for( uint i = 0, ii = persons.length(); i < ii; i++ )
            {
                if( ( persons[ i ].Stat[ ST_ENDURANCE ] < Random( 0, 12 ) ) && persons[ i ].Stat[ ST_BODY_TYPE ] <= BT_CHILDREN )
                    ApplyDesease( cr, persons[ i ].Id, cr.Stat[ ST_DESEASE ] );
            }
        }
        return Random( 3, 10 ) * 60;
    }
    else if( cr.Stat[ ST_TOXIC ] < 300 )
    {
        cr.StatBase[ ST_CURRENT_HP ] -= ( ( cr.Stat[ ST_CURRENT_HP ] ) / 20 - 1 );
        if( !cr.IsDead() )
            cr.Say( SAY_EMOTE_ON_HEAD, "хрипло кашляет" );
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, Random( 12815, 12820 ) );
        cr.StatBase[ ST_TOXIC ] += 1;
        Map @ map = cr.GetMap();
        Critter@[] persons;
        if( map.GetCrittersHex( cr.HexX, cr.HexY, 3, FIND_LIFE_AND_KO | FIND_ONLY_PLAYERS, persons ) > 0 )
        {
            for( uint i = 0, ii = persons.length(); i < ii; i++ )
            {
                if( ( persons[ i ].Stat[ ST_ENDURANCE ] < Random( 0, 14 ) ) && persons[ i ].Stat[ ST_BODY_TYPE ] <= BT_CHILDREN )
                    ApplyDesease( cr, persons[ i ].Id, cr.Stat[ ST_DESEASE ] );
            }
        }
        return Random( 3, 10 ) * 60;
    }
    else
    {
        cr.StatBase[ ST_CURRENT_HP ] -= ( ( cr.Stat[ ST_CURRENT_HP ] ) / 10 - 1 );
        if( !cr.IsDead() )
            cr.Say( SAY_EMOTE_ON_HEAD, "кашляет кровью" );
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, Random( 12815, 12823 ) );
        if( cr.Stat[ ST_TOXIC ] < 999 )
            cr.StatBase[ ST_TOXIC ] += 1;
        if( cr.Stat[ ST_RADIATION_LEVEL ] / 100 > Random( 5, 100 ) && cr.Stat[ ST_DESEASE ] == strain.GetValue() )
            cr.StatBase[ ST_DESEASE ] += 1;
        Map @ map = cr.GetMap();
        Critter@[] persons;
        if( map.GetCrittersHex( cr.HexX, cr.HexY, 5, FIND_LIFE_AND_KO | FIND_ONLY_PLAYERS, persons ) > 0 )
        {
            for( uint i = 0, ii = persons.length(); i < ii; i++ )
            {
                if( ( persons[ i ].Stat[ ST_ENDURANCE ] < Random( 0, 18 ) ) && persons[ i ].Stat[ ST_BODY_TYPE ] <= BT_CHILDREN )
                    ApplyDesease( cr, persons[ i ].Id, cr.Stat[ ST_DESEASE ] );
            }
        }
        return Random( 3, 10 ) * 60;
    }
}

uint cte_superman( Critter& cr, int identifier, uint& rate )
{
    if( ( cr.Stat[ ST_RADIATION_LEVEL ] + Random( 0, 400 ) ) > 800 )
    {
        ApplyGhoul( cr );
        return 0;
    }
    else
    {
        cr.StatBase[ ST_STRENGTH ] += Random( 1, 5 );
        cr.StatBase[ ST_INTELLECT ] += Random( 1, 4 );
        cr.StatBase[ ST_ENDURANCE ] += Random( 1, 8 );
        cr.StatBase[ ST_MAX_LIFE ] += Random( 50, 200 );
        cr.StatBase[ ST_CHARISMA ] += Random( 1, 4 );
        cr.StatBase[ ST_CURRENT_HP ] = cr.Stat[ ST_MAX_LIFE ];
        cr.StatBase[ ST_CARRY_WEIGHT ] += Random( 50, 150 );
        cr.StatBase[ ST_RADIATION_RESISTANCE ] += Random( 10, 100 );
        cr.StatBase[ ST_POISON_RESISTANCE ] += Random( 10, 100 );
        cr.StatBase[ ST_ACTION_POINTS ] += Random( 1, 2 );
        cr.StatBase[ ST_AGILITY ] += Random( 1, 2 );
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 12980 );
        cr.StatBase[ ST_MUTATION ] = 3;
        return 0;
    }

}

uint cte_deadman( Critter& cr, int identifier, uint& rate )
{
    if( ( cr.Stat[ ST_RADIATION_LEVEL ] + Random( 0, 400 ) ) > 800 )
    {
        ApplyGhoul( cr );
        return 0;
    }
    else
    {
        FlushScreen( cr, COLOR_BLACK, COLOR_BLACK, 2000 );
        cr.ChangeCrType( 115 );
		cr.StatBase[ ST_BASE_CRTYPE ] = 115;
        cr.ToDead( 1, null );
        cr.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 12981 );
		cr.StatBase[ ST_MUTATION ] = 3;
        return 0;
    }
}
