

bool LocIsModoc(uint locPid)
{
	return(locPid<=(1253));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(32)||locPid==(1216)||locPid==(43)||locPid==96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(42));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

shared interface Project
{
	string@get_Name();
	void Build();
	void SetAssociation(string@ex,string@className,string@classModule);
}

shared interface FileObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	void FormatStringData(string&nameData,string&data);
	FileObject@get_Pattern(string&name)const;
	FileObject@get_Copy(string&name); 
	
	void set_GlobalData(string@name,string@value);          
	
	string@get_GlobalData(string@name);            
	
}

shared class TimeLog
{
	uint tick;
	
	TimeLog()
	{
		refresh();
	}
	
	void refresh()
	{
		tick=GetTick();
	}
	
	bool check(uint count)
	{
		return(GetTick()-tick>=count);
	}
	
	uint get()
	{
		uint old=tick;
		refresh();
		return(tick-old);
	}
	
	void Log(string&in message)
	{
		::ClearLog(message+" ["+(GetTick()-tick)+"ms]");
	}
}

shared interface AnyDataObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	uint[]@get_SaveData();
	void InitData(uint[]&data);
}

shared interface ManagerObject
{
	FileObject@get_ProtoObject(string@name);
	void ParseProtoTypes(const string&ex,const FileObject&pattern,const string@search);
	FileObject@ParseProtoTypeFile(string&name,const string&ex,const FileObject&pattern,const string@search);
	FileObject@AddPrototype(FileObject@proto);
	FileObject@StringToFileObject(string&name,string&txt,const FileObject&pattern);
}

shared interface ValueAPI{}
shared class SettingsAPI
{
	string Name;
	bool IsDebug;
} 

shared class GlobalData
{
	uint Hash;
	string Value;
	
	GlobalData(string@name)
	{
		Hash=GetStrHash(name);
		Value="";
	} 
	
	void SaveData(uint[]&outArray,uint&position)
	{
		uint len=Value.length();
		
		outArray.resize(position+2+len/2);
		
		outArray[position++]=Hash;
		outArray[position++]=len;
		
		for(uint i=0;i<len;i++)
		{
			outArray[position]|=Value[i++]<<24;
			outArray[position]|=Value[i++]<<16;
			outArray[position]|=Value[i++]<<8;
			outArray[position++]|=Value[i];
		}
	} 
	
	void LoadData(uint[]&in outArray,uint&position)
	{
		Hash=outArray[position++];
		uint len=outArray[position++];
		Value.resize(len);
		
		for(uint i=0;i<len;i++)
		{
			Value[i++]=(outArray[position]>>24)&0xFF;
			Value[i++]=(outArray[position]>>16)&0xFF;
			Value[i++]=(outArray[position]>>8)&0xFF;
			Value[i]=outArray[position++]&0xFF;
			
		}
	}
} 

shared class Hexagonal
{
	Hexagonal(){Reset();}
	Hexagonal(const uint16&in x,const uint16&in y){Set(x,y);}
	Hexagonal(const Hexagonal&master){Set(master);}
	
	Hexagonal(const Critter&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Item&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Scenery&master){Set(master.HexX,master.HexY);}
	
	bool Entire(Map&map,int entNum){return map.GetEntireCoords(entNum,0,X,Y);}
	bool IsPassed(Map&map){return ValidPosition(map)&&map.IsHexPassed(X,Y);}
	bool IsPassed(Map&map,Hexagonal&begin,Hexagonal&end){return ValidPosition(map,begin,end)&&map.IsHexPassed(X,Y);}
	
	bool ValidPosition(Map&map)
	{
		Hexagonal end,begin;
		if(end.Entire(map,0)&&begin.Entire(map,255))
		return ValidPosition(map,begin,end);
		return false;
	}
	
	bool ValidPosition(Map&map,Hexagonal&begin,Hexagonal&end)
	{
		return(X>=begin.X&&Y>=begin.Y
		&&X<=end.X&&Y<=end.Y);
	}
	
	bool Transit(Critter&critter,Map&map){return Transit(critter,map,critter.Dir);}
	bool Transit(Critter&critter,Map&map,uint8 direction)
	{
		if(!IsPassed(map))return false;
		return critter.TransitToMap(map.Id,X,Y,direction);
	}
	
	bool Transit(Critter&critter,uint mapId){return Transit(critter,mapId,critter.Dir);}
	bool Transit(Critter&critter,uint mapId,uint8 direction)
	{
		if(mapId==0)return false;
		Map@map=GetMap(mapId);
		if(@map is null)return false;
		return Transit(critter,map,direction);
	} 
	
	void Set(const uint16&in x,const uint16&in y){X=x;Y=y;}
	void Set(const Hexagonal&in other){Set(other.X,other.Y);}
	void Reset(){X=Y=0;}
	uint Distantion(Hexagonal&other){return GetDistantion(X,Y,other.X,other.Y);}
	
	uint16 X;
	uint16 Y;
	
	bool opEquals(const Hexagonal&in other){return(other.X==X&&other.Y==Y);}
	Hexagonal&opAssign(const Hexagonal&in other)
	{
		Set(other);
		return this;
	}
	
	const uint get_UID(const uint w)const{return X+Y*w;}
	string get_Debug(){return"X:"+X+"Y:"+Y;}
	void Log(string&str){::Log(str+":"+Debug);}
}    

shared class MapHash
{
	MapHash(const uint16&in protoId)
	{
		ProtoId=protoId;
		@Min=null;
		@Max=null;
	}
	
	MapHash&opAssign(Map&map)
	{
		@Min=Hexagonal(0,0);
		@Max=Hexagonal(0,0);
		map.GetEntireCoords(0,0,Max.X,Max.Y);
		map.GetEntireCoords((255),0,Min.X,Min.Y);
		return this;
	}
	
	uint16 ProtoId;
	Hexagonal@Min;
	Hexagonal@Max;
} 

shared class Line
{
	Line(Hexagonal&a,Hexagonal&b){@A=a;@B=b;}
	
	uint get_Length()
	{
		return B.Distantion(A);
	}
	
	uint get_Point(Hexagonal&point)
	{
		return B.Distantion(point);
	}
	
	float get_Module(Hexagonal&point)
	{
		return Point[point]/Length;
	}
	
	Hexagonal@get_opIndex(const uint&in size)
	{
		
		const float mod=float(size/Length);
		return@Hexagonal(A.X+(B.X-A.X)*mod,A.Y+(B.Y-A.Y)*mod);
	} 
	
	Line(Map&map,uint16 grid,MapHash@hash)
	{
		if(@hash is null)
		{
			Hexagonal min,max;
			map.GetTransferParams(min.X,min.Y,max.X,max.Y,grid);
			
			@A=@Hexagonal(min.X,min.Y);
			@B=@Hexagonal(max.X,max.Y);
		}
		else
		{
			if(@hash.Min is null||@hash.Max is null)
			map.GetTransferParams(hash.Min.X,hash.Min.Y,hash.Max.X,hash.Max.Y,grid);
			
			@A=@Hexagonal(hash.Min.X,hash.Min.Y);
			@B=@Hexagonal(hash.Max.X,hash.Max.Y);
		}
	} 
	
	string get_Debug(){return"A<"+A.Debug+">B<"+B.Debug+">";}
	void Log(string&str){::Log(str+":"+Debug);}
	
	Hexagonal@A;
	Hexagonal@B;
}  

import MapHash@GetMapHash(const uint16&in pid)from"world";
import uint CreateLocation(Hexagonal&coordinate,uint16 locationPid)from"world"; 

import ManagerObject@get_objectManager()from"world"; 

import EventTree@get_EventRoot()from"world"; 

import Project@CreateProject(string@name,string@path)from"main";
import Project@get_Project(string@name)from"main";                                                                                                                    

uint shaverId;

void SetHair(Critter&cr)
{
	int crType=cr.Stat[(112)];
	
	if(crType==(8)||crType==(120))
	{
		cr.TimeoutBase[(250)]=__FullSecond+(86400)*30;
		cr.EraseTimeEvents((8));
		cr.AddTimeEvent("cte_hair_grow",(86400),(8));
	}
	else if(crType==(11)||crType==(62))
	{
		cr.TimeoutBase[(250)]=__FullSecond+(86400)*15;
		cr.EraseTimeEvents((8));
		cr.AddTimeEvent("cte_hair_grow",(86400),(8));
	}
	else if(crType==(106)||crType==(110))
	{
		cr.TimeoutBase[(250)]=0;
		cr.EraseTimeEvents((8));
	}
	else
	return;
}

uint cte_hair_grow(Critter&cr,int identifier,uint&rate)
{
	GameVar@nice_hair=GetLocalVar((9934),cr.Id);
	int body=cr.Stat[(112)];
	int crType=cr.CrType;
	int TimeOut=cr.Param[(250)];
	
	if((body==(8)||body==(120))&&(int(__FullSecond)>=TimeOut-(86400)*15&&int(__FullSecond)<TimeOut))
	{
		if(crType==(117))
		cr.ChangeCrType((12));
		else if(crType==(118))
		cr.ChangeCrType((13));
		else if(crType==(119))
		cr.ChangeCrType((14));
		else if(crType==(8))
		cr.ChangeCrType((11));
		else if(crType==(120))
		cr.ChangeCrType((62));
		
		if(cr.StatBase[(112)]==(8))cr.StatBase[(112)]==(11);
		if(cr.StatBase[(112)]==(120))cr.StatBase[(112)]==(62);
		return(86400);
	}
	else if((body==(8)||body==(11)||body==(120)||body==(62))&&int(__FullSecond)>=TimeOut)
	{
		if(nice_hair==1)
		{
			nice_hair=0;
			cr.StatBase[(3)]-=1;
		}
		if(nice_hair==2)
		{
			nice_hair=0;
			cr.StatBase[(3)]+=1;
		}
		if(crType==(12))
		cr.ChangeCrType((107));
		else if(crType==(13))
		cr.ChangeCrType((108));
		else if(crType==(14))
		cr.ChangeCrType((109));
		else if(crType==(11))
		cr.ChangeCrType((106));
		else if(crType==(117))
		cr.ChangeCrType((107));
		else if(crType==(118))
		cr.ChangeCrType((108));
		else if(crType==(119))
		cr.ChangeCrType((109));
		else if(crType==(8))
		cr.ChangeCrType((106));
		else if(crType==(120))
		cr.ChangeCrType((110));
		
		if(cr.Stat[(112)]==(8))cr.StatBase[(112)]=(106);
		if(cr.Stat[(112)]==(120))cr.StatBase[(112)]=(110);
		
		cr.TimeoutBase[(250)]=0;
		return 0;
	}
	else
	return(86400);
}

void RestartHair(Critter&cr)
{
	GameVar@nice_hair=GetLocalVar((9934),cr.Id);
	int body=cr.Stat[(112)];
	int crType=cr.CrType;
	int TimeOut=cr.Timeout[(250)];
	if(TimeOut>0&&(body==(8)||body==(120))&&(int(__FullSecond)>=TimeOut-(86400)*15&&int(__FullSecond)<TimeOut))
	{
		if(crType==(117))
		cr.ChangeCrType((12));
		else if(crType==(118))
		cr.ChangeCrType((13));
		else if(crType==(119))
		cr.ChangeCrType((14));
		else if(crType==(8))
		cr.ChangeCrType((11));
		else if(crType==(120))
		cr.ChangeCrType((62));
		if(cr.StatBase[(112)]==(8))cr.StatBase[(112)]==(11);
		if(cr.StatBase[(112)]==(120))cr.StatBase[(112)]==(62);
	}
	else if(TimeOut>0&&(body==(8)||body==(11)||body==(120)||body==(62))&&int(__FullSecond)>=TimeOut)
	{
		if(nice_hair==1)
		{
			nice_hair=0;
			cr.StatBase[(3)]-=1;
		}
		if(nice_hair==2)
		{
			nice_hair=0;
			cr.StatBase[(3)]+=1;
		}
		if(crType==(12))
		cr.ChangeCrType((107));
		else if(crType==(13))
		cr.ChangeCrType((108));
		else if(crType==(14))
		cr.ChangeCrType((109));
		else if(crType==(11))
		cr.ChangeCrType((106));
		else if(crType==(117))
		cr.ChangeCrType((107));
		else if(crType==(118))
		cr.ChangeCrType((108));
		else if(crType==(119))
		cr.ChangeCrType((109));
		else if(crType==(8))
		cr.ChangeCrType((106));
		else if(crType==(120))
		cr.ChangeCrType((110));
		
		if(cr.Stat[(112)]==(8))cr.StatBase[(112)]=(106);
		if(cr.Stat[(112)]==(120))cr.StatBase[(112)]=(110);
		
		cr.TimeoutBase[(250)]=0;
	}
	uint[]indexes;
	uint[]durations;
	if((cr.GetTimeEvents((8),indexes,durations,null))!=0)
	return;
	if(body!=(8)&&body!=(11)&&body!=(106)&&body!=(120)&&body!=(62)&&body!=(110))
	return;
	if(body==(106)||body==(110))
	cr.TimeoutBase[(250)]=0;
	if(cr.Timeout[(250)]>0)
	{
		cr.AddTimeEvent("cte_hair_grow",(86400),(8));
	}
}

void Shave(Critter&cr,Critter&onCr)
{
	if(!(@onCr!=null)||!(@cr!=null))
	return;
	if(onCr.Timeout[(238)]>0)
	return;
	bool onSelf=(cr.Id==onCr.Id);
	int body=onCr.Stat[(112)];
	int crType=onCr.CrType;
	string crName=GetPlayerName(cr.Id);
	int exp=0;
	
	if(onCr.IsNpc())
	{
		onCr.SayMsg((4),(3),12706);
		cr.SayMsg((11),(3),12707);
		return;
	}
	if((body==(8)||body==(120))&&int(__FullSecond)<onCr.Param[(250)]-(86400)*27)
	{
		cr.SayMsg((11),(3),onSelf?12726:12727);
		return;
	}
	if(body==(8)||body==(11)||body==(120)||body==(62))
	{
		GameVar@nice_hair=GetLocalVar((9934),onCr.Id);
		if(onSelf)
		{
			cr.SayMsg((11),(3),12704);
			if(nice_hair==1)
			{
				nice_hair=0;
				onCr.StatBase[(3)]-=1;
				onCr.SayMsg((11),(3),12710);
			}
			else if(nice_hair==2)
			{
				nice_hair=0;
				onCr.StatBase[(3)]+=1;
				onCr.SayMsg((11),(3),12711);
				exp+=50;
			}
			if(crType==(12))
			cr.ChangeCrType((117));
			else if(crType==(13))
			cr.ChangeCrType((118));
			else if(crType==(14))
			cr.ChangeCrType((119));
			else if(crType==(11))
			cr.ChangeCrType((8));
			else if(crType==(62))
			cr.ChangeCrType((120));
			
			if(cr.StatBase[(112)]==(11))cr.StatBase[(112)]=(8);
			if(cr.StatBase[(112)]==(62))cr.StatBase[(112)]=(120);
			
			cr.StatBase[(76)]+=Random(20,70)+exp;
		}
		else
		{
			shaverId=cr.Id;
			
			onCr.ShowScreen((2),1,"shaveMe");
			onCr.SayMsg((18),(3),12708,"$name"+crName);
			onCr.SayMsg((19+(0)),(3),12709);
		}
	}
	else if(crType==(106)||crType==(110))
	{
		cr.SayMsg((11),(3),onSelf?12701:12700);
	}
	else if(crType==(8)||crType==(120))
	{
		cr.SayMsg((11),(3),onSelf?12702:12703);
	}
}

void shaveMe(Critter&cr,uint answerI,string&answerS)
{
	int crType=cr.CrType;
	string name=GetPlayerName(shaverId);
	Critter@shaver=GetCritter(shaverId);
	if(!(@shaver!=null))
	return;
	if(GetDistantion(cr.HexX,cr.HexY,shaver.HexX,shaver.HexY)>2)
	return;
	GameVar@nice_hair=GetLocalVar((9934),cr.Id);
	int exp=0;
	if(crType==(12))
	crType=(117);
	else if(crType==(13))
	crType=(118);
	else if(crType==(14))
	crType=(119);
	else if(crType==(11))
	crType=(8);
	else if(crType==(62))
	cr.ChangeCrType((120));
	cr.ChangeCrType(crType);
	if(cr.StatBase[(112)]==(11))cr.StatBase[(112)]=(8);
	if(cr.StatBase[(112)]==(62))cr.StatBase[(112)]=(120);
	
	cr.SayMsg((11),(3),12712);
	if(nice_hair==1)
	{
		nice_hair=0;
		cr.StatBase[(3)]-=1;
		cr.SayMsg((11),(3),12710);
	}
	else if(nice_hair==2)
	{
		nice_hair=0;
		cr.StatBase[(3)]+=1;
		cr.SayMsg((11),(3),12711);
		exp+=50;
	}
	shaver.SayMsg((11),(3),12705,"$name"+name);
	if(exp==50)
	shaver.SayMsg((11),(3),12712);
	shaver.StatBase[(76)]+=Random(20,70)+exp;
	
}

void HairCut(Critter&cr,Critter&onCr)
{
	if(!(@cr!=null)||!(@onCr!=null))
	return;
	if(onCr.Timeout[(238)]>0)
	return;
	GameVar@nice_hair=GetLocalVar((9934),onCr.Id);
	bool onSelf=(cr.Id==onCr.Id);
	int roll=Random(10,40)-(cr.Skill[(217)]/10+cr.Stat[(6)]+cr.Stat[(5)]);
	int body=onCr.Stat[(112)];
	int crType=onCr.CrType;
	int exp=Random(25,70);
	string crName=GetPlayerName(cr.Id);
	
	if(onCr.IsNpc())
	{
		onCr.SayMsg((4),(3),12706);
		cr.SayMsg((11),(3),12707);
		return;
	}
	if(body!=(106)&&body!=(11)&&body!=(110)&&body!=(62))
	{
		cr.SayMsg((11),(3),12714);
		return;
	}
	if(int(__FullSecond)<onCr.Param[(250)]-(86400)*8)
	{
		cr.SayMsg((11),(3),onSelf?12728:12729);
		return;
	}
	if(onSelf)
	{
		if(nice_hair==1)
		{
			nice_hair=0;
			cr.StatBase[(3)]-=1;
		}
		if(nice_hair==2)
		{
			nice_hair=0;
			cr.StatBase[(3)]+=1;
		}
		if(crType==(107))
		cr.ChangeCrType((12));
		else if(crType==(108))
		cr.ChangeCrType((13));
		else if(crType==(109))
		cr.ChangeCrType((14));
		else if(crType==(106))
		cr.ChangeCrType((11));
		else if(crType==(110))
		cr.ChangeCrType((62));
		
		if(cr.StatBase[(112)]==(106))cr.StatBase[(112)]=(11);
		if(cr.StatBase[(112)]==(110))cr.StatBase[(112)]=(62);
		
		if(roll>10)
		{
			cr.SayMsg((11),(3),12716);
			nice_hair=2;
			cr.StatBase[(3)]-=1;
			exp=0;
		}
		if(roll<0)
		{
			cr.SayMsg((11),(3),12718);
			nice_hair=1;
			cr.StatBase[(3)]+=1;
			exp+=50;
		}
		else if(roll>=0&&roll<=10)
		{
			cr.SayMsg((11),(3),12717);
		}
		cr.StatBase[(76)]+=exp;
	}
	else
	{
		shaverId=cr.Id;
		
		onCr.ShowScreen((2),1,"cutMyHair");
		onCr.SayMsg((18),(3),12719,"$name"+crName);
		onCr.SayMsg((19+(0)),(3),12709);
	}
}

void cutMyHair(Critter&cr,uint answerI,string&answerS)
{
	GameVar@nice_hair=GetLocalVar((9934),cr.Id);
	Critter@shaver=GetCritter(shaverId);
	if(!(@shaver!=null))
	return;
	if(GetDistantion(cr.HexX,cr.HexY,shaver.HexX,shaver.HexY)>2)
	return;
	int roll=Random(10,40)-(shaver.Skill[(217)]/10+shaver.Stat[(6)]+shaver.Stat[(5)]);
	int body=cr.Stat[(112)];
	int crType=cr.CrType;
	int exp=Random(25,70);
	if(nice_hair==1)
	{
		nice_hair=0;
		cr.StatBase[(3)]-=1;
	}
	if(nice_hair==2)
	{
		nice_hair=0;
		cr.StatBase[(3)]+=1;
		exp+=50;
	}
	if(crType==(107))
	cr.ChangeCrType((12));
	else if(crType==(108))
	cr.ChangeCrType((13));
	else if(crType==(109))
	cr.ChangeCrType((14));
	else if(crType==(106))
	cr.ChangeCrType((11));
	else if(crType==(110))
	cr.ChangeCrType((62));
	
	if(cr.StatBase[(112)]==(106))cr.StatBase[(112)]=(11);
	if(cr.StatBase[(112)]==(110))cr.StatBase[(112)]=(62);
	
	if(roll>10)
	{
		cr.SayMsg((11),(3),12720);
		nice_hair=2;
		cr.StatBase[(3)]-=1;
		shaver.SayMsg((11),(3),12723);
	}
	if(roll<0)
	{
		cr.SayMsg((11),(3),12721);
		nice_hair=1;
		cr.StatBase[(3)]+=1;
		shaver.SayMsg((11),(3),12724);
	}
	else if(roll>=0&&roll<=10)
	{
		cr.SayMsg((11),(3),12722);
		shaver.SayMsg((11),(3),12725);
	}
	shaver.StatBase[(76)]+=exp;
}
