// wasteland map generator
// based on qthree qmap* scripts
// pm

# include "qmap_debug.fos"
# include "_cell.fos"
// #include "world.fos"
/*
   import void FindEncounter(Critter@[]& group, Item@ car, uint x, uint y, uint& encounterDescriptor, bool& waitForAnswer, bool empty, int ec) from "worldmap";
   import void InviteToEncounter(Critter@[]& group, Item@ car, uint encounterDescriptor, int combatMode, uint& mapId, uint16& hexX, uint16& hexY, uint8& dir) from "worldmap";

   import void CreateMapGenEncounter(uint8 x, uint8 y) from "worldmap";*/

// import Cell@ GetCell(uint16 x, uint16 y) from "world";
// import CellContent@ CreateContent(Cell& cell, uint mapId, uint8 type, int8 visibility) from "world";

import void CreateCell( uint16 x, uint16 y, uint mapId ) from "world";
import void global_invite( Critter& leader, Item@ car, uint encounterDescriptor, int combatMode, uint& mapId, uint16& hexX, uint16& hexY, uint8& dir ) from "world";

// #define



void generate( Map& map, Critter& player, int var, int param1, int param2, uint16& hexX, uint16& hexY )
{
    // Map@ map = player.GetMap();
    // if(map is null) return;

    // uint16 hexX = ((player.HexX>>1)<<1); //THX(player.HexX);
    // uint16 hexY = ((player.HexY>>1)<<1); //THY(player.HexY);

    // uint16 hexX = player.HexX,
    // hexY = player.HexY;

    if( var == 6 && param1 == 101 )
    {
        map.GetEntireCoords( 255, 0, hexX, hexY );

        hexX -= 2;
        hexY -= 2;
    }

    uint16 tX = H2T( hexX ),
           tY = H2T( hexY );


    if( var == 5 )
    {
        ProtoItem@ proto = GetProtoItem( param1 );
        uint       hash = proto.PicMap;
        SetTile( map, hash, hexX, hexY, 2 );
        // player.Say(SAY_NETMSG, "Строю стену "+param2+" на "+hexX+" "+hexY);
    }
    if( var == 6 )
    {
        TextMap myMap;
        string  fileName = "maps/";

        if( param1 < 0 )
        {
            /*player.Say(SAY_NETMSG, "Неверный номер карты."); */
            return;
        }

        if( param1 < 100 )
        {
            fileName += "pattern_" + param1 + ".fomap";
        }
        else if( param1 == 102 )
        {
            fileName += "pattern_wasteland_obj_" + Random( 0, 4 ) + ".fomap";
        }
        else
        {
            switch( param1 )
            {
            case 100:
                fileName += "pattern_all.fomap";
                break;
            case 101:
                fileName += "pattern_wasteland_0.fomap";
                break;
            default:             /*player.Say(SAY_NETMSG, "Неверный номер карты."); */
                return;
            }
        }

//              player.Say(SAY_NETMSG, "Открываем и парсим карту... ");

        if( !myMap.ParseTextMap( fileName ) )     /*player.Say(SAY_NETMSG, "Ок.");
                                                     else {player.Say(SAY_NETMSG, "Fail."); */
            return;                               /*}*/
        /*
           player.Say(SAY_NETMSG, "Тайлы: "+myMap.tiles.length());
           player.Say(SAY_NETMSG, "Крыши: "+myMap.roofs.length());
           player.Say(SAY_NETMSG, "Стены: "+myMap.walls.length());
         */
        /*player.Say(SAY_NETMSG, "Применяем смещение... ");
           if(myMap.ApplyOffset(tX*2-6, tY*2-34)) player.Say(SAY_NETMSG, "Ок.");
           else {player.Say(SAY_NETMSG, "Fail."); return;}

           player.Say(SAY_NETMSG, "Генерируем данные... ");
           uint len = myMap.GenerateData();
           if(len>0) player.Say(SAY_NETMSG, "Получено "+len+" объекта(ов).");
           else {player.Say(SAY_NETMSG, "Fail."); return;}

           player.Say(SAY_NETMSG, "Отсылаем в QMAP... ");

           if(SetTiles(map, myMap.data)) player.Say(SAY_NETMSG, "Готово.");
           else {player.Say(SAY_NETMSG, "Fail."); return;}*/

        @Map2 = myMap;
    }
    else if( var == 7 )
    {
//              if(Map2 is null) player.Say(SAY_NETMSG, "Нет спарсенной карты.");
//
//              player.Say(SAY_NETMSG, "Применяем смещение... ");
        if( !Map2.ApplyOffset( tX * 2 + param1 * 2, tY * 2 + param2 * 2 ) ) /* player.Say(SAY_NETMSG, "Ок.");
                                                                               else {player.Say(SAY_NETMSG, "Fail."); */
            return;                                                         /*}*/

//              player.Say(SAY_NETMSG, "Генерируем данные... ");
        uint len = Map2.GenerateData( map );
        if( !( len > 0 || Map2.items.length() > 0 ) ) /* player.Say(SAY_NETMSG, "Получено "+len+" динамических объекта(ов) и "+Map2.items.length()+" итемов.");
                                                         else {player.Say(SAY_NETMSG, "Fail."); */
            return;                                   /*}*/
    }
    else if( var == 8 )
    {
//              if(Map2 is null) player.Say(SAY_NETMSG, "Нет спарсенной карты.");

//              if(Map2.data.length()<2) player.Say(SAY_NETMSG, "Данные не сгенерированы.");

//              player.Say(SAY_NETMSG, "Отсылаем в QMAP... ");

        if( !SetTiles( map, Map2.data ) )    /* player.Say(SAY_NETMSG, "Готово.");
                                                else {player.Say(SAY_NETMSG, "Fail."); */
            return;                          /*}*/

//              player.Say(SAY_NETMSG, "Спавним итемы...");

        uint count = 0, len = Map2.items.length();
        for( uint i = 0; i < len; i++ )
        {
            Item@ item = map.AddItem( Map2.items[ i ].HexX, Map2.items[ i ].HexY, Map2.items[ i ].Pid, Map2.items[ i ].Count );
            if( item !is null )
            {
                count++;
                if( item.GetType() == ITEM_TYPE_DOOR || item.GetType() == ITEM_TYPE_CONTAINER )
                {
                    item.LockerOpen();
                    item.LockerClose();
                }
            }
        }
//              player.Say(SAY_NETMSG, "Добалены "+count+" из "+len+" итемов.");
    }
}

uint GenerateWasteland( Critter& cr, uint8 x, uint8 y )
{
    Critter@[] @ group;
    cr.GetFollowGroup( FIND_LIFE, group );

    bool   waitForAnswer = false;
    uint8  dir = 0;
    uint16 hexX = 0,
           hexY = 0;
    uint   encounterDescriptor = 0,
           mapId = 0;

    // FindEncounter(group, null, x, y, encounterDescriptor, waitForAnswer, true, 1);
    // InviteToEncounter(group, null, encounterDescriptor, COMBAT_MODE_REAL_TIME, mapId, hexX, hexY, dir);
    //      CreateMapGenEncounter(x, y);

    uint locId = CreateLocation( 91, x * 10, y * 10, null );
    if( locId == 0 )
    {
        Log( "gw loc" );
        return cr.GetMap().Id;
    }

    Map @ map = GetLocation( locId ).GetMapByIndex( 0 );
    if( map is null )
    {
        Log( "gw map" );
        return cr.GetMap().Id;
    }

    // Cell@ cell = GetCell(x, y);
    // if(cell is null) return false;

    mapId = map.Id;

    // global_invite(cr, null, uint16(-1), COMBAT_MODE_REAL_TIME, mapId, hexX, hexY, dir);

    CreateCell( x, y, map.Id );

    uint8 wild = 0;
    if( ( ABS( x - 7 ) <= 12 ) && ( ABS( y - 7 ) <= 12 ) )
    {
        wild = 100 - ( ABS( x - 7 ) + ABS( y - 7 ) - 2 ) * 10;
    }
    if( ( ABS( x - 17 ) <= 10 ) && ( ABS( y - 15 ) <= 10 ) && ( ABS( x - 17 ) + ABS( y - 15 ) + 1 ) * 10 < ( wild - 100 ) )
    {
        wild = 100 - ( ABS( x - 17 ) + ABS( y - 15 ) + 1 ) * 10;
    }
    wild = 100 - wild;

    map.SetEvent( MAP_EVENT_IN_CRITTER, "e_MapIn" );

    return map.Id;
}

uint e_SpawnCritterDelay( uint[] @ values )
{
    Critter @ cr = GetCritter( values[ 0 ] );
    Map @ map = GetMap( values[ 1 ] );

    uint16 hexX = 0, hexY = 0;

    if( map !is null || cr !is null )
    {
        // generate(map, cr, 5, 5006, 1);
        generate( map, cr, 6, 101, 1, hexX, hexY );
        generate( map, cr, 7, 1, 1, hexX, hexY );
        generate( map, cr, 8, 1, 1, hexX, hexY );

        uint16 hexX = 0, hexY = 0;
        map.GetEntireCoords( 255, 0, hexX, hexY );
        for( uint8 i = 0, k = Random( 0, 55 ); i < k; ++i )
        {
            uint16 tempX = Random( hexX, hexX + 150 ), tempY = Random( hexY, hexY + 150 );
            generate( map, cr, 6, 102, 1, tempX, tempY );
            generate( map, cr, 7, 1, 1, tempX, tempY );
            generate( map, cr, 8, 1, 1, tempX, tempY );
        }


        map.SetEvent( MAP_EVENT_IN_CRITTER, "" );
    }
    return 0;
}

// MAP_EVENT_IN_CRITTER
void e_MapIn( Map& map, Critter& cr )
{
    /*
           generate(map, cr, 6, 101, 1);
           generate(map, cr, 7, 1, 1);
           generate(map, cr, 8, 1, 1);*/
    // generate(map, cr, 5, 5006, 1);

    uint[] values = { cr.Id, map.Id };
    CreateTimeEvent( __FullSecond + 1, "e_SpawnCritterDelay", values, false );
}

void testgen( Critter& cr, int, int, int )
{
    Map @ map = cr.GetMap();
    // generate(map, cr, 5, 5006, 1);
    /*generate(map, cr, 6, 101, 1);
       generate(map, cr, 7, 1, 1);
       generate(map, cr, 8, 1, 1);
     */

}
