// teaching user interface
// pm

#include "client_gui_h.fos"
#include "_client_defines.fos"
#include "_macros.fos"
#include "_colors.fos"

#define STR_SKILLS    ( 10200 )

class ScreenMain : IGUIScreenCallbackShow, IGUIScreenCallbackHide
{
    ExpField@[] ExpFieldForm;
    ExpText@[] ExpTextForm;
    // ExpField@ ExpFieldHave;
    TagButton@[] TagBtn;
    TeachButton@ TeachButtonSkill;
    TeachButton@ TeachButtonExp;
    StartButton@ StartBtn;
    Bookmark@    BookmarkPic;

    uint8        FormState;
    uint16       Skill;
    uint         Experience;
    uint         ExperienceMax;

    ScreenMain()
    {
        FormState = 0;
        Skill = 0;

        Experience = 0;
        ExperienceMax = 0;

    }


    void OnShow( int p0, int p1, int p2 )
    {
        /*
              for(uint8 i = 0; i < 2; i++)
              {
                      ExpFieldForm.Experience = p0;
              }
              //ExperienceMax = p0;
         */
    }

    void OnHide( int p0, int p1, int p2 )
    {}

    void DownTag( uint8 count )
    {
        for( uint8 i = 0; i < 4; i++ )
        {
            if( i != count )
                TagBtn[ i ].SetState( false );
            else
                TagBtn[ i ].SetState( true );
        }
    }

    void SetFormState( uint8 type )
    {
        // FormState = type;

        // Message(""+type);
        /*
           ExpFieldGet.SetVisible(type == 1 ? true : false);
           ExpFieldHave.SetVisible(type == 1 ? true : false);
         */

        CritterCl @ choo = GetChosen();
        if( @choo == null )
            return;

        StartBtn.SetType( type );

        for( uint8 i = 0; i < 4; i++ )
        {
            if( choo.Param[ 226 + i ] != 0 )
                TagBtn[ i ].SetVisible( type == 0 ? true : false );
            if( i < 2 )
            {
                ExpFieldForm[ i ].SetVisible( type == 1 ? true : false );
                ExpTextForm[ i ].SetVisible( type == 1 ? true : false );
            }
        }




        // Instance.ExpField

    }


    void SetSkill( uint16 skill )
    {
        Skill = skill;
    }

    int GetSkill()
    {
        return Skill;
    }

    uint GetExperience()
    {
        return Experience;
    }

    uint8 GetFormState()
    {
        return FormState;
    }
}

class TeachButton : IGUIElementCallbackInit, IGUIElementCallbackMouseClick
{
    ScreenMain@ Instance;
    uint8       Type;

    TeachButton( ScreenMain & instance, uint8 type )
    {
        Type = type;
        @Instance = instance;
        if( type > 0 )
            @Instance.TeachButtonExp = this;
        else
            @Instance.TeachButtonSkill = this;
    }

    void OnInit()
    {}

    void OnMouseClick( int click )
    {
        // Message(""+Instance.GetFormState());
        Instance.BookmarkPic.SetState( Type == 0 ? false : true );
        Instance.SetFormState( Type );
    }
}

class TagButton : IGUIElementCallbackInit, IGUIElementCallbackMouseClick
{
    ScreenMain@     Instance;
    IGUIElementOpt@ Options;
    uint8           Count;
    uint8           Skill;

    TagButton( ScreenMain & instance, uint8 count )
    {
        @Instance = instance;
        @Instance.TagBtn[ count ] = this;
        Count = count;
        // CritterCl @ choo = GetChosen();

        // Skill = skill;
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        CritterCl @ choo = GetChosen();
        if( Count == 3 && choo.Param[ 229 ] == 0 )
            Options.SetVisible( false );
        Options.Text( GetMsgStr( TEXTMSG_GAME, ( ( STR_SKILLS + ( Skill - 200 ) ) * 10 + 1 ) ), FONT_FALLOUT, COLOR_SAND, COLOR_GREEN, FT_CENTERX | FT_CENTERY );
        // Options.Text(GetMsgStr(TEXTMSG_GAME,STR_SKILLS+(choo.Param[226+Count]*10))),FONT_FALLOUT,COLOR_SAND, COLOR_GREEN,FT_CENTERX|FT_CENTERY);
        Skill = choo.Param[ 226 + Count ];
        // Message(""+((STR_SKILLS+(Skill-200))*10+1));
    }

    void OnMouseClick( int click )
    {
        Instance.SetSkill( Skill );
        Instance.DownTag( Count );
    }

    void SetState( bool state )
    {
        Options.Switch( state );
    }

    void SetVisible( bool state )
    {
        Options.SetVisible( state );
    }
}

class ExpField : IGUIElementCallbackInit
{
    ScreenMain@     Instance;
    IGUIElementOpt@ Options;

    uint            Experience;
    uint8           Type;

    ExpField( ScreenMain & instance, uint8 type )
    {
        @Instance = instance;
        /*if(!type)
           @Instance.ExpFieldGet = this;
            else @Instance.ExpFieldHave = this;*/

        // if(type > 0)
        @Instance.ExpFieldForm[ type ] = this;
        // else @Instance.ExpFieldHave = this;
        Type = type;
    }
    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        // if(Type > 0)
        // {
        CritterCl @ choo = GetChosen();
        if( @choo == null )
            Message( "error" );
        Experience = choo.StatBase[ ST_STUDY_EXP ];               // __getExpToPlayerCountMax;//
        // Experience = choo.StatBase[ST_STUDY_EXP] > 100 ? choo.StatBase[ST_STUDY_EXP] : 100;
        Options.Text( "" + Experience, FONT_FALLOUT, COLOR_SAND, COLOR_GREEN, FT_CENTERX | FT_CENTERY );
        // }
    }

    void SetVisible( bool state )
    {
        Options.SetVisible( state );
    }

    uint GetExp()
    {
        int temp = 0;
        StrToInt( Options.GetText(), temp );
        return temp;
    }
}

class ExpText : IGUIElementCallbackInit
{
    ScreenMain@     Instance;
    IGUIElementOpt@ Options;

    uint8           Type;

    ExpText( ScreenMain & instance, uint8 type )
    {
        @Instance = instance;
        @Instance.ExpTextForm[ type ] = this;
        Type = type;
    }
    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        switch( Type )
        {
        case 0:
            Options.Text( "Доступно :", FONT_FALLOUT, COLOR_SAND, COLOR_GREEN, FT_CENTERX | FT_CENTERY );
            break;
        case 1:
            Options.Text( "Назначить :", FONT_FALLOUT, COLOR_SAND, COLOR_GREEN, FT_CENTERX | FT_CENTERY );
            break;
        default:
            break;
        }
    }

    void SetVisible( bool state )
    {
        Options.SetVisible( state );
    }
}

class StartButton : IGUIElementCallbackInit, IGUIElementCallbackMouseClick
{
    ScreenMain@     Instance;
    IGUIElementOpt@ Options;
    uint8           Type;

    StartButton( ScreenMain & instance )
    {
        @Instance = instance;
        @Instance.StartBtn = this;
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        Type = 0;
    }

    void OnMouseClick( int click )
    {
        uint exp = Instance.ExpFieldForm[ 1 ].GetExp();
        if( Instance.Skill == 0 && Type == 0 )
        {
            Message( "Не выбран навык" );
            return;
        }
        if( exp == 0 && Type > 0 )
        {
            Message( "Не достаточно очков опыта" );
            return;
        }
        GUI_HideScreen( CLIENT_SCREEN_TEACH, 0, 0, 0 );
        if( Type > 0 )
        {
            ChangeCursor( CURSOR_USE_SKILL );
            __getExpToPlayer = true;
            __getExpToPlayerCount = exp;
        }
        else
        {
            RunServerScriptUnsafe( "general_unsafe@unsafe_teach", Instance.GetSkill(), 0, 0, "", null );
        }
    }

    void SetType( uint8 type )
    {
        Type = type;
        // Message(""+Type);
    }
}

class Bookmark : IGUIElementCallbackInit
{
    ScreenMain@     Instance;
    IGUIElementOpt@ Options;

    Bookmark( ScreenMain & instance )
    {
        @Instance = instance;
        @Instance.BookmarkPic = this;
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
    }

    void SetState( bool state )
    {
        Options.Switch( state );
    }
}

void InitTeachScreen() // Export
{
    ScreenMain screenMain();
    GUI_CreateScreen( CLIENT_SCREEN_TEACH, "teach_window.png" )
    .CallbackHide( screenMain )
    .CallbackShow( screenMain )
    .CloseOnMiss( true )
    .AutoCursor( true, CURSOR_DEFAULT );

    Bookmark bookmarkPic( screenMain );
    GUI_AddScreenElement( CLIENT_SCREEN_TEACH, "teach_bookmark_up.png", 0, -25 )
    .CallbackInit( bookmarkPic )
    .DownPic( "teach_bookmark_dn.png" );

    TeachButton TeachButtonSkill( screenMain, 0 );
    GUI_AddScreenElement( CLIENT_SCREEN_TEACH, "teach_bookmark_lt.png", 0, -25 )
    .CallbackInit( TeachButtonSkill )
    .CallbackMouseClick( TeachButtonSkill )
    .Text( "Учеба", FONT_FALLOUT, COLOR_SAND, COLOR_GREEN, FT_CENTERX | FT_CENTERY );

    TeachButton TeachButtonExp( screenMain, 1 );
    GUI_AddScreenElement( CLIENT_SCREEN_TEACH, "teach_bookmark_rt.png", 102, -25 )
    .CallbackInit( TeachButtonExp )
    .CallbackMouseClick( TeachButtonExp )
    .Text( "Опыт", FONT_FALLOUT, COLOR_SAND, COLOR_GREEN, FT_CENTERX | FT_CENTERY );

    StartButton startBtn( screenMain );
    GUI_AddScreenElement( CLIENT_SCREEN_TEACH, "chosen_tab.png", 20, 100 )
    .CallbackInit( startBtn )
    .CallbackMouseClick( startBtn )
    .Text( "Готово", FONT_FALLOUT, COLOR_SAND, COLOR_GREEN, FT_CENTERX | FT_CENTERY );

    uint16 axistY = 30;
    screenMain.ExpFieldForm.resize( 2 );
    screenMain.ExpTextForm.resize( 2 );
    for( uint8 i = 0; i < 2; i++ )
    {
        ExpField expFieldForm( screenMain, i );
        GUI_AddScreenElement( CLIENT_SCREEN_TEACH, "chosen_tab.png", 20, axistY )
        .CallbackInit( expFieldForm )
        .TextInput( true, i > 0 ? 5 : 0, COLOR_LGREEN )
        // .CallbackMouseClick(expFieldHave)
        .SetVisible( false );

        ExpText expTextForm( screenMain, i );
        GUI_AddScreenElement( CLIENT_SCREEN_TEACH, "teach_bookmark_rt.png", 20, axistY - 30 )
        .CallbackInit( expTextForm )
        // .TextInput(true,i > 0 ? 5 : 0,COLOR_LGREEN)
        // .CallbackMouseClick(expFieldHave)
        .SetVisible( false );

        axistY += 40;
    }
    /*
       ExpField expFieldGet(screenMain, 1);
       GUI_AddScreenElement(CLIENT_SCREEN_TEACH, "chosen_tab.png", 20, 70)
            .CallbackInit(expFieldHave)
            .TextInput(true,5,COLOR_LGREEN)
            //.CallbackMouseClick(expFieldHave)
            .SetVisible(false);*/

    screenMain.TagBtn.resize( 4 );
    uint16 axistX = 20;
    axistY = 20;
    for( uint8 i = 0; i < 4; i++ )
    {
        TagButton TagButtonArr( screenMain, i );
        GUI_AddScreenElement( CLIENT_SCREEN_TEACH, "chosen_tab.png", axistX, axistY )
        .CallbackInit( TagButtonArr )
        .CallbackMouseClick( TagButtonArr )
        .DownPic( "chosen_tab.png" );

        axistY += 30;
        if( i == 1 )
        {
            axistX += 160;
            axistY = 20;
        }
    }
    //
}

// /////////////////////////

/*void SetMaxExp(int param0, int param1, int param2, string@ param3, int[]@ param4)
   {
        __getExpToPlayerCountMax = param0;
        Message(""+param0+" "+__getExpToPlayerCountMax);
   }*/

// .CallbackInit(ButtonErase)
// .CallbackMouseClick(ButtonErase)
