// vv  ВСЕ ЧИСЛА ДОЛЖНЫ БЫТЬ В ПРЕДЕЛАХ 0...255 (uint8) - исключением является количество опыта (uint16).
#define PRODUCT_LOOPCOUNT_B           ( 50 ) // Сколько пива производится за цикл.
#define PRODUCT_LOOPCOUNT_B_RND       ( 10 ) // Максимальное количество пива, которое может дополнительно произвестись за цикл.
#define PRODUCT_LOOPCOUNT_S           ( 40 ) // Сколько самогона производится за цикл.
#define PRODUCT_LOOPCOUNT_S_RND       ( 20 ) // Максимальное количество самогона, которое может дополнительно произвестись за цикл.
#define PRODUCT_LOOPCOUNT_LUCKRND     ( 3 )  // Степень влияния параметра УДАЧА на количество продукции.
// (УДАЧА-4)*PRODUCT_LOOPCOUNT_LUCKRND прибавляется к PRODUCT_LOOPCOUNT_B_RND
// ^ - или ..._S_RND

#define FIREWOOD_LOOPCOUNT_B          ( 2 )   // Сколько дров сгорает за цикл в пивном аппарате (c модернизацией).
#define FIREWOOD_LOOPCOUNT_S          ( 3 )   // Сколько дров сгорает за цикл в самогонном аппарате (c модернизацией).
#define FIREWOOD_UPRATECOEFF          ( 2 )   // Во сколько раз тратиться больше дров в немодернизированном аппарате.

#define TIME_WORKING_B                ( 24 )  // Время работы аппарата (в игровых часах).
// Используется это значение ±1 час.
#define TIME_WORKING_S                ( 12 )  // Время работы аппарата (в игровых часах).
// Используется это значение ±1 час.
#define TIME_DOWNRATE_ATBROKEN        ( 16 )  // Время, в игровых днях, по прошествии которого, со сломанного аппарата снимается модернизация.

#define SCIENCE_TOUSE                 ( 51 )  // Необходимый для использования навык НАУКА.

#define REPAIR_TOREPAIR_NOMSG         ( 51 )  // Значение навыка РЕМОНТ, до которого выводится стандартное "Из этого ничего не вышло".
#define REPAIR_TOREPAIR               ( 70 )  // Минимальный для успешного ремонта навык РЕМОНТ.
// При REPAIR_TOREPAIR  успех 3%, при REPAIR_TOREPAIR+30 успех 93%; Зависимость линейная. Суперинструменты: +15 к REPAIR_TOREPAIR.
#define REPAIR_TOUPRATE               ( 41 )  // Необходимый для модернизации навык РЕМОНТ. Если не хватает - ломать инструмент.
#define SCIENCE_TOUPRATE_NOMSG        ( 51 )  // Значение навыка НАУКА, до которого выводится стандартное "Из этого ничего не вышло".
#define SCIENCE_TOUPRATE              ( 80 )  // Минимальный для успешной модернизации навык НАУКА.
// При SCIENCE_TOUPRATE успех 4%, при SCIENCE_TOUPRATE+22 успех 92%; Зависимость линейная.

#define METALTRASH_TOREPAIRCOUNT      ( 4 )   // Количество деталей для ремонта.
#define METALTRASH_REPAIRFAILCOUNT    ( 2 )   // Максимальное количество деталей, ломающихся при неудачном ремонте.

#define EXP_REPAIR                    ( 400 ) // Опыт за починку.
// Дается только пять раз. Каждый следующий - в два раза меньше. Всего:  775 = 400+200+100+50+25
#define EXP_UPRATE                    ( 600 ) // Опыт за модернизацию.
// Дается только три раза. Каждый следующий - в два раза меньше. Всего: 1050 = 600+300+150

#define CHANCE_BOOMONDESTROY          ( 40 )  // Вероятность (%) взрыва при ломании работающего аппарата. Обязательно >9
// При расчетах используется значение CHANCE_BOOMONDESTROY-ST_LUCK
#define CHANCE_BOOMONDESTROY_EYE      ( 20 )  // Вероятность (%) повреждения глаз при взрыве.
#define DAMAGE_BOOMONDESTROY_MIN      ( 40 )  // Минимальные повреждения от взрыва.
#define DAMAGE_BOOMONDESTROY_MAX      ( 80 )  // Максимальные повреждения от взрыва.

// Н // Е //   // М // Е // Н // Я // Т // Ь //

const uint8 BIT_STILL_ISBEER  = 0x01;       // 0000 0001
const uint8 BIT_STILL_UPRATED = 0x02;       // 0000 0010

#define STILL_COND_BROKEN             ( 0 ) // Аппарат сломан.
#define STILL_COND_NORMAL             ( 1 ) // Аппарат в нормальном состоянии.
#define STILL_COND_ACTIVE             ( 2 ) // Аппарат сейчас работает.
#define STILL_COND_COMPLETE           ( 3 ) // Рабочий цикл завершен.

import void ExplodeEx( Map& map, uint16 hexX, uint16 hexY, uint16 effectPid, uint effectRadius, uint damage, uint damageType, uint damageRadius, uint ownerId ) from "explode";
