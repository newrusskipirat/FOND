                                                     

string[]__critterHistoryInfo;                                                                                                                                                                                                                                                                                                                                                                                                                                            

import IGUIScreenOpt@GUI_CreateScreen(int screenIndex,string@sprName)from"client_gui";

import void GUI_DeleteScreen(int screenIndex)from"client_gui";

import IGUIElementOpt@GUI_AddScreenElement(int screenIndex,string@sprName,int x,int y)from"client_gui";

import IGUIScreenOpt@GUI_GetScreenOptions(int screenIndex)from"client_gui";

import IGUIScreenOpt@GUI_GetScreenOptions()from"client_gui";

import IGUIElementOpt@GUI_GetElementOptions()from"client_gui";
import void GUI_HideScreen(int screenIndex,int p0,int p1,int p2)from"client_gui";

import void GUI_DeleteScreenElements(int screenIndex)from"client_gui"; 

import IGUIScreenOpt@GUI_CreateScreenIni(int screenIndex,string@iniKey)from"client_gui";
import IGUIElementOpt@GUI_AddScreenElementIni(int screenIndex,string@ini,int defx,int defy)from"client_gui";
import IGUIElementOpt@GUI_AddScreenElementIni(int screenIndex,string@ini,int defx,int defy,string@defSpr)from"client_gui";      

shared interface IGUIScreenCallbackShow
{
	void OnShow(int p0,int p1,int p2);
}
shared interface IGUIScreenCallbackHide
{
	void OnHide(int p0,int p1,int p2);
}
shared interface IGUIScreenCallbackMove
{
	void OnMove(int posX,int posY);
}

shared interface IGUIScreenCallbackInit{
	void OnInit();
}

shared interface IGUIScreenOpt
{
	IGUIScreenOpt@CallbackShow(IGUIScreenCallbackShow@callback);
	IGUIScreenOpt@CallbackHide(IGUIScreenCallbackHide@callback);
	IGUIScreenOpt@CallbackMove(IGUIScreenCallbackMove@callback);
	IGUIScreenOpt@Position(int x,int y);
	IGUIScreenOpt@CanMove(bool enabled);
	IGUIScreenOpt@Modal(bool enabled);
	IGUIScreenOpt@Multiinstance(bool enabled);
	IGUIScreenOpt@IgnoreBorders(bool enabled);
	IGUIScreenOpt@CloseOnMiss(bool enabled);
	IGUIScreenOpt@AutoCursor(bool enabled,int cursorType);
	IGUIScreenOpt@SetElementCount(int8 ElementCount);
	IGUIScreenOpt@Pic(string@sprName,int path);  
	
	int GetPosX();
	int GetPosY();
	uint16 GetElementsLength();
	IGUIElementOpt@GetElement(uint16 index);
	
}    

shared interface IGUIElementCallbackInit
{
	void OnInit();
}
shared interface IGUIElementCallbackDraw
{
	void OnDraw(int posX,int posY,int w,int h);
}
shared interface IGUIElementCallbackMouseClick
{
	void OnMouseClick(int click);
}
shared interface IGUIElementCallbackKeyPress
{
	void OnKeyPress(uint8 key,uint8 letter);
}

shared interface IGUIElementOpt
{
	IGUIElementOpt@CallbackInit(IGUIElementCallbackInit@callback);
	IGUIElementOpt@CallbackDraw(IGUIElementCallbackDraw@callback);
	IGUIElementOpt@CallbackMouseClick(IGUIElementCallbackMouseClick@callback);
	IGUIElementOpt@CallbackKeyPress(IGUIElementCallbackKeyPress@callback);
	IGUIElementOpt@Position(int x,int y);
	IGUIElementOpt@Position(int x,int y,int w,int h);
	IGUIElementOpt@Position(string&iniKey);
	IGUIElementOpt@DownPic(string@sprName);
	IGUIElementOpt@Text(string@text,int font,uint color,uint downColor,int flags);
	IGUIElementOpt@TextInput(bool enabled,uint maxLen,uint colorFocused);
	IGUIElementOpt@Switch(bool enabled); 
	
	IGUIElementOpt@SetVisible(bool enabled);
	IGUIElementOpt@Realese();
	IGUIElementOpt@SetElementType(uint8 type);
	IGUIElementOpt@SetDescription(string desc);
	IGUIElementOpt@SetElementBtnNum(uint8 btnNum);
	IGUIElementOpt@SetElementFastPanelType(uint8 type);
	IGUIElementOpt@SetElementFastPanelId(uint16 id);
	IGUIElementOpt@UpPic(string@sprName);
	IGUIElementOpt@Pic(string@sprName,int path);
	IGUIElementOpt@SetLayer(uint8 layer);
	IGUIElementOpt@SetSpecialValue(uint value);
	IGUIElementOpt@SetRenderLayer(uint8 layer);
	IGUIElementOpt@PicSetFrmCount(uint16 count);   
	
	int GetPosX();
	int GetPosY();
	string@GetText(); 
	
	bool GetVisible();
	uint8 GetLayer();
	uint8 GetType();
	uint8 GetBtnNum();
	uint8 GetFastPanelType();
	uint16 GetFastPanelId();
	string GetDescription();
	uint16 GetSurfaceHeight();
	uint16 GetSurfaceWidth();
	uint GetSpecValue();
	uint8 GetRenderLayer(); 
	
}              

uint __GetColor(int r,int g,int b)
{
	r=(((r)>(255))?(255):(((r)<(0))?(0):(r)));
	g=(((g)>(255))?(255):(((g)<(0))?(0):(g)));
	b=(((b)>(255))?(255):(((b)<(0))?(0):(b)));
	return(uint((0xFF<<24)|(((r)&0xFF)<<16)|(((g)&0xFF)<<8)|((b)&0xFF)));
}

uint __GetGradient(uint colorStart,uint colorEnd,uint8 pos)
{
	pos=(((pos)>(100))?(100):(((pos)<(1))?(1):(pos)));
	
	int aS=(colorStart>>24)&0xFF,
	rS=((colorStart>>16)&0xFF),
	gS=((colorStart>>8)&0xFF),
	bS=((colorStart)&0xFF),
	
	aE=(colorEnd>>24)&0xFF,
	rE=((colorEnd>>16)&0xFF),
	gE=((colorEnd>>8)&0xFF),
	bE=((colorEnd)&0xFF); 
	
	rS=(((rE-int(rS*(pos*0.01)))>0)?(rE-int(rS*(pos*0.01))):-(rE-int(rS*(pos*0.01))));
	gS=(((gE-int(gS*(pos*0.01)))>0)?(gE-int(gS*(pos*0.01))):-(gE-int(gS*(pos*0.01))));
	bS=(((bE-int(bS*(pos*0.01)))>0)?(bE-int(bS*(pos*0.01))):-(bE-int(bS*(pos*0.01))));
	
	return __GetColor(rS,gS,bS);
}

uint __GetColor(uint8&a,uint8&r,uint8&g,uint8&b,uint color){
	a=(color>>24)&0xFF;
	r=((color>>16)&0xFF);
	g=((color>>8)&0xFF);
	b=((color)&0xFF);
	
	return 0;
}

bool LocIsModoc(uint locPid)
{
	return(locPid<=(1253));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(32)||locPid==(1216)||locPid==(43)||locPid==96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(42));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

shared interface Project
{
	string@get_Name();
	void Build();
	void SetAssociation(string@ex,string@className,string@classModule);
}

shared interface FileObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	void FormatStringData(string&nameData,string&data);
	FileObject@get_Pattern(string&name)const;
	FileObject@get_Copy(string&name);                           
	
}

shared class TimeLog
{
	uint tick;
	
	TimeLog()
	{
		refresh();
	}
	
	void refresh()
	{
		tick=GetTick();
	}
	
	bool check(uint count)
	{
		return(GetTick()-tick>=count);
	}
	
	uint get()
	{
		uint old=tick;
		refresh();
		return(tick-old);
	}
	
	void Log(string&in message)
	{
		::ClearLog(message+" ["+(GetTick()-tick)+"ms]");
	}
}

shared interface AnyDataObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	uint[]@get_SaveData();
	void InitData(uint[]&data);
}

shared interface ManagerObject
{
	FileObject@get_ProtoObject(string@name);
	void ParseProtoTypes(const string&ex,const FileObject&pattern,const string@search);
	FileObject@ParseProtoTypeFile(string&name,const string&ex,const FileObject&pattern,const string@search);
	FileObject@AddPrototype(FileObject@proto);
	FileObject@StringToFileObject(string&name,string&txt,const FileObject&pattern);
}

shared interface ValueAPI{}
shared class SettingsAPI
{
	string Name;
	bool IsDebug;
}                                                  

shared class Hexagonal
{
	Hexagonal(){Reset();}
	Hexagonal(const uint16&in x,const uint16&in y){Set(x,y);}
	Hexagonal(const Hexagonal&master){Set(master);}                                       
	
	void Set(const uint16&in x,const uint16&in y){X=x;Y=y;}
	void Set(const Hexagonal&in other){Set(other.X,other.Y);}
	void Reset(){X=Y=0;}
	uint Distantion(Hexagonal&other){return GetDistantion(X,Y,other.X,other.Y);}
	
	uint16 X;
	uint16 Y;
	
	bool opEquals(const Hexagonal&in other){return(other.X==X&&other.Y==Y);}
	Hexagonal&opAssign(const Hexagonal&in other)
	{
		Set(other);
		return this;
	}
	
	const uint get_UID(const uint w)const{return X+Y*w;}
	string get_Debug(){return"X:"+X+"Y:"+Y;}
	void Log(string&str){::Log(str+":"+Debug);}
}                            

shared class Line
{
	Line(Hexagonal&a,Hexagonal&b){@A=a;@B=b;}
	
	uint get_Length()
	{
		return B.Distantion(A);
	}
	
	uint get_Point(Hexagonal&point)
	{
		return B.Distantion(point);
	}
	
	float get_Module(Hexagonal&point)
	{
		return Point[point]/Length;
	}
	
	Hexagonal@get_opIndex(const uint&in size)
	{
		
		const float mod=float(size/Length);
		return@Hexagonal(A.X+(B.X-A.X)*mod,A.Y+(B.Y-A.Y)*mod);
	}                      
	
	string get_Debug(){return"A<"+A.Debug+">B<"+B.Debug+">";}
	void Log(string&str){::Log(str+":"+Debug);}
	
	Hexagonal@A;
	Hexagonal@B;
}                                                                                                                                        

import void ShowContScreen(uint8 screenType,uint8 actionType)from"client_screen_contmenu";
import bool out_message(string&message,int&sayType)from"client_main";

IGUIElementOpt@lastPanelButton=null;
IGUIElementOpt@[]fastPanelBtns;
IGUIElementOpt@fastLayerDisplay=null;
FastButton@lastFastButton=null; 

class ElementMain:IGUIElementCallbackInit,IGUIElementCallbackMouseClick
{
	void OnInit()
	{}
	
	void OnMouseClick(int click)
	{}
}

class ScreenMain:IGUIScreenCallbackShow,IGUIScreenCallbackHide
{
	void OnShow(int p0,int p1,int p2)
	{}
	
	void OnHide(int p0,int p1,int p2)
	{}
}

class FastButtonLayerDisplay:IGUIElementCallbackInit
{
	void OnInit()
	{
		@fastLayerDisplay=GUI_GetElementOptions();
		fastLayerDisplay.Text("0",(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008));
	}
}

class FastButtonLayer:IGUIElementCallbackInit,IGUIElementCallbackMouseClick
{
	IGUIElementOpt@Options;
	uint8 Type;
	
	void OnInit()
	{
		@Options=GUI_GetElementOptions();
	}
	
	void OnMouseClick(int click)
	{
		if(GetCurrentCursor()==(0)&&click==(0))
		{
			int8 layer=Options.GetLayer();
			layer=(Type>0?layer-1:layer+1);
			if(layer<0)
			layer=4;
			layer=ChangeLayer(layer);
			Options.SetLayer(layer);
		}
	}
}

class FastButton:IGUIElementCallbackInit,IGUIElementCallbackMouseClick
{
	uint8 Type;
	uint8 SubType;
	uint8 ButtonNum;
	IGUIElementOpt@button;
	void OnInit()
	{
		@button=GUI_GetElementOptions();
		if(fastPanelBtns.length()>9)
		fastPanelBtns.resize(0);
		fastPanelBtns.insertLast(button);
		if(button.GetLayer()!=0)
		{
			button.SetVisible(false);
			button.UpPic("");
			button.DownPic("");
		}
	}
	
	void OnMouseClick(int click)
	{
		if(GetCurrentCursor()==(0))
		{
			
			if(button.GetFastPanelId()==0&&button.GetFastPanelType()==0)
			{
				__subMenuNum=(3);
				__fastpanelButtNum=button.GetBtnNum();
				@lastFastButton=this;
				@lastPanelButton=button;
				::ShowScreen((42),300,300,(3));
			}
			else
			{
				if(click==(1))
				{
					button.UpPic("fastpanel_btblank_up.png");
					button.DownPic("fastpanel_btblank_dn.png");
					button.Text("",(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008));
					button.SetDescription("");
					button.SetElementFastPanelType(0);
					button.SetElementFastPanelId(0);
					SaveFastPanel(false);
				}
				else if(click==(0))
				{
					switch(button.GetFastPanelType())
					{
						case 1:
						__skillIndex=button.GetFastPanelId();
						ChangeCursor((4));
						break;
						case 2:
						if(button.GetFastPanelId()!=5)
						{
							RunServerScriptUnsafe("general_unsafe@unsafe_fastpanel_say",button.GetFastPanelId(),0,0,button.GetDescription(),null);
							break;
						}
						else
						{
							out_message(button.GetDescription(),int(button.GetFastPanelId()));
							break;
						}
					}
				}
			}
			
		}
	}
}

class FastPanelSkillbox:IGUIScreenCallbackShow,IGUIScreenCallbackHide
{
	IGUIElementOpt@[]buttons;
	FastButton@fastBtn;
	
	void OnShow(int p0,int p1,int p2)
	{
		__HideCursor=false;
	}
	
	void OnHide(int p0,int p1,int p2)
	{}
}

class FastPanelSkillboxBtn:IGUIElementCallbackInit,IGUIElementCallbackMouseClick
{
	IGUIElementOpt@button;
	IGUIElementOpt@thisBtn;  
	
	void OnInit()
	{
		@thisBtn=GUI_GetElementOptions(); 
		
	}
	
	void OnMouseClick(int click)
	{
		
		@button=lastPanelButton;
		button.SetElementFastPanelType(thisBtn.GetFastPanelType());
		button.SetElementFastPanelId(thisBtn.GetFastPanelId());
		switch(thisBtn.GetFastPanelId())
		{
			case 206:
			button.UpPic("skilln.frm");
			button.DownPic("skillh.frm");
			button.Text("aid",(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008));
			break;
			case 207:
			button.UpPic("skilln.frm");
			button.DownPic("skillh.frm");
			button.Text("doc",(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008));
			break;
			case 208:
			button.UpPic("skilln.frm");
			button.DownPic("skillh.frm");
			button.Text("sneak",(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008));
			break;
			case 209:
			button.UpPic("skilln.frm");
			button.DownPic("skillh.frm");
			button.Text("lock",(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008));
			break;
			case 210:
			button.UpPic("skilln.frm");
			button.DownPic("skillh.frm");
			button.Text("steal",(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008));
			break;
			case 211:
			button.UpPic("skilln.frm");
			button.DownPic("skillh.frm");
			button.Text("traps",(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008));
			break;
			case 212:
			button.UpPic("skilln.frm");
			button.DownPic("skillh.frm");
			button.Text("scien",(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008));
			break;
			case 213:
			button.UpPic("skilln.frm");
			button.DownPic("skillh.frm");
			button.Text("repair",(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008));
			break;
		}
		
		SaveFastPanel(false);
	}
}

class FastPanelTextboxForm:IGUIScreenCallbackShow,IGUIScreenCallbackHide
{
	FastPanelTextboxSayBtn@[]TextSayBtn;
	
	FastPanelTextboxText@TextBox;
	FastPanelTextboxButton@Btn;
	string Text;
	string Desc;
	
	int SayType;
	
	void OnShow(int p0,int p1,int p2)
	{
		SayType=-1;
	}
	
	void OnHide(int p0,int p1,int p2)
	{}
	
	void SetState(int type)
	{
		for(uint i=0;i<TextSayBtn.length();i++)
		TextSayBtn[i].SetState(false);
		TextSayBtn[type-1].SetState(true);
		SayType=type;
	}
}

class FastPanelTextboxSayBtn:IGUIElementCallbackInit,IGUIElementCallbackMouseClick
{
	FastPanelTextboxForm@Instance;
	IGUIElementOpt@Options;
	int Type;
	
	FastPanelTextboxSayBtn(FastPanelTextboxForm&instance,int type)
	{
		@Instance=instance;
		
		Type=type;
		
		@Instance.TextSayBtn[Type-1]=this; 
		
	}
	
	void OnInit()
	{
		@Options=GUI_GetElementOptions();
		CritterCl@choo=GetChosen();
		if(Type==5&&@choo!=null&&choo.StatBase[(137)]==0)
		Options.SetVisible(false);
	}
	
	void OnMouseClick(int click)
	{
		if(click==(0))
		Instance.SetState(Type);
	}
	
	void SetState(bool state)
	{
		Options.Switch(state);
	}
}

class FastPanelTextboxButton:IGUIElementCallbackInit,IGUIElementCallbackMouseClick
{
	FastPanelTextboxForm@Instance;
	IGUIElementOpt@Button; 
	
	FastPanelTextboxButton(FastPanelTextboxForm&instance)
	{
		@Instance=instance;
		@Instance.Btn=this;
	} 
	
	void OnInit()
	{
		@Button=lastPanelButton;
	}
	
	void OnMouseClick(int click)
	{
		
		string text=Instance.Text;
		string desc=Instance.Desc;
		uint8 sayType=Instance.SayType;
		uint color=GetColor(sayType);
		if(text=="")
		{
			Message(GetMsgStr((3),(12830)+7));
			return;
		}
		if(desc=="")
		{
			Message(GetMsgStr((3),(12830)+8));
			return;
		}
		if(Instance.SayType==-1)
		{
			Message(GetMsgStr((3),(12830)+9));
			return;
		} 
		
		Button.Text(text,(5),color,((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008));
		Button.SetDescription(""+desc);
		Button.SetElementFastPanelType(2);
		Button.SetElementFastPanelId(sayType); 
		
		SaveFastPanel(false);
		GetPic(Button);
		::HideScreen((45),0,0,0);  
		
	}
}

class FastPanelTextboxText:IGUIElementCallbackInit,IGUIElementCallbackKeyPress
{
	FastPanelTextboxForm@Instance;
	IGUIElementOpt@Options;
	uint8 Type; 
	
	FastPanelTextboxText(FastPanelTextboxForm&instance)
	{
		@Instance=instance;
		@Instance.TextBox=this;
	}
	
	void OnInit()
	{
		@Options=GUI_GetElementOptions();
	}
	
	void OnKeyPress(uint8 key,uint8 letter)
	{
		string@text=Options.GetText();
		
		if(text.length()>0&&text[text.length()-1]==10)
		text.resize(text.length()-1);
		if(Type==1)
		{
			Instance.Text=text;
		}
		else
		{
			Instance.Desc=text;
			
		}
		Options.Text(text,(5),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008));
	}
	
	void SetText(uint16 channel)
	{
		Options.Text("",(5),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008));
	}
}

void InitFastPanelTextbox()
{
	FastPanelTextboxForm TextboxForm;
	GUI_CreateScreen((45),"textbox_fasttext_back.png")
	.CallbackHide(TextboxForm)
	.CallbackShow(TextboxForm)
	.CloseOnMiss(false)
	.CanMove(true)
	.AutoCursor(true,(0));
	
	FastPanelTextboxText TextboxText(TextboxForm);
	GUI_AddScreenElement((45),"chosen_tab.png",5,10)
	.CallbackInit(TextboxText)
	.CallbackKeyPress(TextboxText)
	.TextInput(true,5,((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xFF)&0xFF)<<8)|((0)&0xFF)))))
	.Text(GetMsgStr((3),(12830)+4),(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008));
	TextboxText.Type=0;
	
	GUI_AddScreenElement((45),"textbox_history_up.png",5,50);
	GUI_AddScreenElement((45),"textbox_history_dn.png",5,74);
	GUI_AddScreenElement((45),"textbox_fasttext_lt.png",5,50);
	GUI_AddScreenElement((45),"textbox_fasttext_rt.png",335,50);       
	
	FastPanelTextboxText TextboxTextAdv(TextboxForm);
	GUI_AddScreenElement((45),"textbox_fasttext_text.png",13,54)
	.CallbackInit(TextboxTextAdv)
	.CallbackKeyPress(TextboxTextAdv)
	.TextInput(true,128,((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xFF)&0xFF)<<8)|((0)&0xFF)))))
	.Text(GetMsgStr((3),(12830)+5),(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008));
	TextboxText.Type=1;
	
	FastPanelTextboxButton TextboxBtn(TextboxForm);
	GUI_AddScreenElement((45),"chosen_tab.png",216,10)
	.CallbackInit(TextboxBtn)
	.CallbackMouseClick(TextboxBtn)
	.DownPic("chosen_tab.png")
	.Text(GetMsgStr((3),(12830)+6),(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008));
	
	TextboxForm.TextSayBtn.resize(5); 
	
	for(uint i=1;i<=5;i++)
	{
		if(i==5)
		{
			FastPanelTextboxSayBtn fastPanelTextSayBtn(TextboxForm,i);
			GUI_AddScreenElement((45),"town_view_gm.png",0,-15)
			.CallbackInit(fastPanelTextSayBtn)
			.CallbackMouseClick(fastPanelTextSayBtn)
			.DownPic("town_view_gm_dn.png");
			break;
		}
		FastPanelTextboxSayBtn fastPanelTextSayBtn(TextboxForm,i);
		GUI_AddScreenElement((45),"town_view_gm.png",-72+(85*i),33)
		.CallbackInit(fastPanelTextSayBtn)
		.CallbackMouseClick(fastPanelTextSayBtn)
		.DownPic("town_view_gm_dn.png");
		GUI_AddScreenElement((45),null,-418+(84*i)-110,-260-82)
		.Text(GetMsgStr((3),(12830)+i-1),(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),0,(0x0004)|(0x0008)|(0x0200));
	}
}

void InitFastPanelSkillbox()
{
	FastPanelSkillbox fastSkillbox;
	GUI_CreateScreen((44),"textbox_fastskill_back.png")
	.CallbackHide(fastSkillbox)
	.CallbackShow(fastSkillbox)
	.CloseOnMiss(false)
	.CanMove(true)
	.AutoCursor(true,(0)); 
	
	uint8 j=0;
	uint16 axist=0;
	fastSkillbox.buttons.resize(9);
	for(uint16 i=(206);i<=(213);i++)
	{
		FastPanelSkillboxBtn SkillboxBtn;
		GUI_AddScreenElement((44),"chosen_tab.png",5,10+axist)
		.CallbackInit(SkillboxBtn)
		.CallbackMouseClick(SkillboxBtn)
		.DownPic("chosen_tab.png")
		.Text(GetMsgStr((3),(102061)+(10*j)),(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008))
		.SetElementType((2))
		.SetElementFastPanelType(1)
		.SetElementFastPanelId(i);
		
		j++;
		axist+=20;
	}                              
	
}

void InitFastPanelScreen()
{
	int x=0,y=0;
	
	StrToInt(GetIfaceIniStr("FastPanelBackGroundX"),x);
	StrToInt(GetIfaceIniStr("FastPanelBackGroundY"),y);
	
	ElementMain formMain;
	GUI_AddScreenElementIni((5),"FastPanelBackGround",x,y)
	.CallbackInit(formMain)
	.CallbackMouseClick(formMain);                      
	
	uint16 axist=0;
	bool horizontal=GetIfaceIniStr("FastPanelBtnHorizontal")!="0"?true:false;
	
	StrToInt(GetIfaceIniStr("FastPanelBtnX"),x);
	StrToInt(GetIfaceIniStr("FastPanelBtnY"),y);    
	
	for(uint8 i=0;i<=9;i++)
	{
		FastButton fastButton;
		GUI_AddScreenElementIni((5),"FastPanelBtnBlankUp",x+(horizontal?axist:0),y+(!horizontal?axist:0))
		.CallbackInit(fastButton)
		.CallbackMouseClick(fastButton)
		.SetVisible(false)
		.DownPic(GetIfaceIniStr("FastPanelBtnBlankDn"))
		.SetLayer(0)
		.SetElementType((2))
		.SetElementBtnNum(i);
		
		axist+=42;
	}  
	
}                                                                              

void SaveFastPanel(bool local)
{
	uint8 length=fastPanelBtns.length();
	if(length==0)
	return;
	CritterCl@choo=GetChosen();
	if(@choo==null)
	return;
	
	string line="";
	file f;       
	
	for(uint8 i=0;i<length;i++)
	{
		line+=""+"*"+fastPanelBtns[i].GetFastPanelType()+"*"+fastPanelBtns[i].GetFastPanelId()+"*"+fastPanelBtns[i].GetText()+"*"+fastPanelBtns[i].GetDescription()+"!"+"\n"; 
		
	}        
	
	if(!local)
	RunServerScriptUnsafe("general_unsafe@unsafe_fastpanel_save",0,0,0,line,null); 
	
	__tempFastText=line;
	
	return;   
	
}                                           

uint GetColor(uint8 sayType)
{
	uint color=0;
	switch(sayType)
	{
		case 1:
		color=((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF))));
		break;
		case 2:
		color=((uint((0xFF<<24)|(((0xFF)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF))));
		break;
		case 3:
		color=((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xFF)&0xFF)<<8)|((0)&0xFF))));
		break;
		case 4:
		color=((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0)&0xFF)<<8)|((0xFF)&0xFF))));
		break;
		case 5:
		color=((uint((0xFF<<24)|(((0xAB)&0xFF)<<16)|(((0xAB)&0xFF)<<8)|((0xAB)&0xFF))));
		break;
		default:
		color=((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF))));
		break;
	}
	return color;
}

uint LoadPanelTempFile(bool type)
{
	file f;
	string word="",word2="";
	uint pos=0;
	
	if(f.open("FastPanel.cfg","r")==0)
	{
		
		f.setPos(0);
		while(!f.isEndOfFile())
		{
			pos=f.getPos();
			f.readLine(word);
			word2+=word; 
			
		}
		__tempFastText=word2;
		f.close();
	}
	
	if(pos!=0&&type)
	return pos;
	return 0;
}

void GetServerFileSize(int size,int p1,int p2,string@word2,int[]@p4)
{
	if(__tempFastText.length()!=uint(size))
	RunServerScriptUnsafe("general_unsafe@unsafe_send_fastpanel",1,0,0,"",null);
	else
	{
		LoadPanel(1,0,0,"",null);
	}
}

void LoadPanel(int p0,int p1,int p2,string@word2,int[]@p4)
{
	uint8 count=1;
	uint8 count1=0;
	uint color=0;     
	
	IGUIElementOpt@fastBtn;
	
	if(p0!=0)
	{
		word2=__tempFastText;
	}
	else
	{
		SaveFastPanel(true);__tempFastText=word2;
	}
	string@[]@layer=split(word2,"!");
	uint8 length=layer.length();  
	
	for(uint8 i=0;i<length;i++)
	{
		
		string@[]@layerData=split(layer[i],"*");      
		
		if(layerData.length()>1)
		{
			int type=0,id=0;
			string text=layerData[3],desc=layerData[4];
			
			StrToInt(layerData[1],type);
			
			StrToInt(layerData[2],id);
			type==2?color=GetColor(id):color=((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF))));  
			
			@fastBtn=fastPanelBtns[i];
			if(@fastBtn==null)
			{
				Message("button is null");
				break;
			}
			
			fastBtn.SetElementFastPanelType(type);
			fastBtn.SetElementFastPanelId(id);
			fastBtn.Text(text,(5),color,((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008));
			fastBtn.SetDescription(desc);
			GetPic(fastBtn);      
			
		}
	} 
	
}

void SavePanelUnsafe(int p0,int p1,int p2,string@p3,int[]@p4)
{
	uint8 length=fastPanelBtns.length();
	
	string line="";
	for(uint8 i=0;i<length;i++)
	{
		line+=""+"*"+fastPanelBtns[i].GetFastPanelType()+"*"+fastPanelBtns[i].GetFastPanelId()+"*"+fastPanelBtns[i].GetText()+"*"+fastPanelBtns[i].GetDescription()+"!"+"\n"; 
		
	}
	
	RunServerScriptUnsafe("general_unsafe@unsafe_fastpanel_save",0,0,0,line,null);
}

void GetPic(IGUIElementOpt&fastBtn)
{
	switch(fastBtn.GetFastPanelType())
	{
		case 1:
		fastBtn.UpPic("skilln.frm");
		fastBtn.DownPic("skillh.frm");
		break;
		case 2:
		if(fastBtn.GetFastPanelId()!=5)
		{
			fastBtn.UpPic("talkn.frm");
			fastBtn.DownPic("talkh.frm");
		}
		else
		{
			fastBtn.UpPic("usegetn.frm");
			fastBtn.DownPic("usegeth.frm");
		}
		break;
		default:
		fastBtn.UpPic("fastpanel_btblank_up.png");
		fastBtn.DownPic("fastpanel_btblank_dn.png");
		break;
	}
} 

int8 ChangeLayer(int8 layer)
{
	
	layer<0?layer=4:layer>4?layer=0:layer;
	for(uint8 i=0;i<fastPanelBtns.length();i++)
	{
		if(fastPanelBtns[i].GetLayer()!=layer)
		{
			fastPanelBtns[i].SetVisible(false);
			fastPanelBtns[i].UpPic("");
			fastPanelBtns[i].DownPic("");
		}
		else
		{
			fastPanelBtns[i].SetVisible(true);
			GetPic(fastPanelBtns[i]);
			
		}
	}
	fastLayerDisplay.Text(""+layer,(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008));
	return layer;
}

void GetActiveLayer(IGUIElementOpt@[]@activeBtnLayer)
{    
	
	for(uint8 i=0;i<fastPanelBtns.length();i++)
	{
		if(fastPanelBtns[i].GetLayer()==0)
		{
			activeBtnLayer.insertLast(fastPanelBtns[i]);
		}
	}
	
}

void GetPanelButtons(IGUIElementOpt@[]@panelBtns)
{
	for(uint8 i=0;i<fastPanelBtns.length();i++)
	panelBtns.insertLast(fastPanelBtns[i]);
}

void HidePanel(bool show)
{
	
	for(uint8 i=0;i<fastPanelBtns.length();i++)
	{
		fastPanelBtns[i].SetVisible(show?show:__fastPanelShow);
	}
	if(!show)
	__fastPanelShow=__fastPanelShow?false:true; 
	
}

void SavePanel(int param0,int param1,int param2,string@param3,int[]@param4)
{
	if(param0>0)
	{
		SaveFastPanel(true);
	}
	else
	{
		SaveFastPanel(false);
	}
}
