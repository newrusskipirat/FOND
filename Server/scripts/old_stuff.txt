устаревшие куски

//critter_dead

// Mob drops
	uint16 npcPid=cr.GetProtoId();
	uint16 dropPid=0;
/*	switch(npcPid)
	{
	case NPC_PID_GoldenGecko:
	case NPC_PID_ToughGoldenGecko: if(valid(killer) && killer.Perk[PE_GECKO_SKINNING]!=0) dropPid=PID_GOLDEN_GECKO_PELT; break;
	case NPC_PID_SmallSilverGecko:
	case NPC_PID_ToughSilverGecko: if(valid(killer) && killer.Perk[PE_GECKO_SKINNING]!=0) dropPid=PID_GECKO_PELT; break;
	case NPC_PID_MirelurkWeak: if(valid(killer) && (killer.Skill[SK_OUTDOORSMAN]+Random(0, 60)>100)) dropPid=PID_MIRELUK_SHELL; break;
	case NPC_PID_MirelurkTough: if(valid(killer) && (killer.Skill[SK_OUTDOORSMAN]+Random(0, 60)>100)) dropPid=PID_MIRELUK_SHELL; break;
	case NPC_PID_MutatedMolerat: if(valid(killer) && (killer.Skill[SK_OUTDOORSMAN]+Random(0, 60)>60)) dropPid=PID_MOLERAT_STOMATCH; break;
	case NPC_PID_Molerat: if(valid(killer) && (killer.Skill[SK_OUTDOORSMAN]+Random(0, 60)>60)) dropPid=PID_MOLERAT_STOMATCH; break;
	case NPC_PID_GreaterMolerat: if(valid(killer) && (killer.Skill[SK_OUTDOORSMAN]+Random(0, 60)>60)) dropPid=PID_MOLERAT_STOMATCH; break;
	case NPC_PID_Mantis: if(valid(killer) && (killer.Skill[SK_OUTDOORSMAN]+Random(0, 60)>60)) dropPid=PID_MANTIS_SHELL; break;
	case NPC_PID_MediumMantis: if(valid(killer) && (killer.Skill[SK_OUTDOORSMAN]+Random(0, 60)>60)) dropPid=PID_MANTIS_SHELL; break;
	case NPC_PID_Alien: if(valid(killer) && (killer.Skill[SK_OUTDOORSMAN]+Random(0, 60)>100)) dropPid=PID_MUTATED_GLAND; break;
	case NPC_PID_ToughAlien: if(valid(killer) && (killer.Skill[SK_OUTDOORSMAN]+Random(0, 60)>70)) dropPid=PID_MUTATED_GLAND; break;
	case NPC_PID_Centaur: if(valid(killer) && (killer.Skill[SK_OUTDOORSMAN]+Random(0, 60)>90)) dropPid=PID_MUTATED_GLAND; break;
	case NPC_PID_MeanCentaur: if(valid(killer) && (killer.Skill[SK_OUTDOORSMAN]+Random(0, 60)>70)) dropPid=PID_MUTATED_GLAND; break;
	case NPC_PID_Floater: if(valid(killer) && (killer.Skill[SK_OUTDOORSMAN]+Random(0, 60)>90)) dropPid=PID_MUTATED_GLAND; break;
	case NPC_PID_NastyFloater: if(valid(killer) && (killer.Skill[SK_OUTDOORSMAN]+Random(0, 60)>80)) dropPid=PID_MUTATED_GLAND; break;
	case NPC_PID_SmallRadscorpion: if(valid(killer) && (killer.Skill[SK_OUTDOORSMAN]+Random(0, 60)>60)) dropPid=PID_MANTIS_SHELL; break;
	case NPC_PID_SmallRadscorpion2: if(valid(killer) && (killer.Skill[SK_OUTDOORSMAN]+Random(0, 60)>60)) dropPid=PID_MANTIS_SHELL; break;
	case NPC_PID_LargeRadscorpion: if(valid(killer) && (killer.Skill[SK_OUTDOORSMAN]+Random(0, 60)>60)) dropPid=PID_SCORPION_TAIL; break;
	case NPC_PID_LargeRadscorpion2: if(valid(killer) && (killer.Skill[SK_OUTDOORSMAN]+Random(0, 60)>60)) dropPid=PID_SCORPION_TAIL; break;
	case NPC_PID_LargeRadscorpion3: if(valid(killer) && (killer.Skill[SK_OUTDOORSMAN]+Random(0, 60)>60)) dropPid=PID_SCORPION_TAIL; break;
	case NPC_PID_Brahmin:
	case NPC_PID_Brahmin2:
	case NPC_PID_Brahmin3:
	case NPC_PID_WeakBrahmin:
	case NPC_PID_WildBrahmin: if(valid(killer) && killer.Perk[PE_GECKO_SKINNING]!=0) dropPid=PID_BRAHMIN_SKIN; break;
	case NPC_PID_Rat: if(valid(killer) && killer.Perk[PE_GECKO_SKINNING]!=0) dropPid=PID_MOUSE_SKIN; break;
	//case NPC_PID_FireGecko:
	//case NPC_PID_ToughFireGecko: if(valid(killer) && killer.Param[ST_BODY_TYPE]<BT_BRAHMIN && killer.Perk[PE_GECKO_SKINNING]!=0) dropPid=PID_FIRE_GECKO_PELT; break;
	}
	if(dropPid!=0 && cr.Stat[ST_ARCADE_ATTACKED]!=1 && _CritCountItem(cr,dropPid)==0) _CritAddItem(cr,dropPid,1);
*/

// Karma, temporary
	if(valid(killer) && killer.IsPlayer())
	{
		int karmaBefore=killer.StatBase[ST_KARMA];
		uint team=cr.Stat[ST_TEAM_ID];
		//if(team==TEAM_Player) killer.StatBase[ST_KARMA]-=10;
		if(team==TEAM_Poorman) killer.StatBase[ST_KARMA]-=10;
		else if(team==TEAM_Narcoman) killer.StatBase[ST_KARMA]+=10;
		else if(team==TEAM_Citizen) killer.StatBase[ST_KARMA]-=10;
		else if(team==TEAM_Guard) killer.StatBase[ST_KARMA]-=10;
		else if(team==TEAM_PrivateGuard) killer.StatBase[ST_KARMA]-=10;
		else if(team==TEAM_Trader) killer.StatBase[ST_KARMA]-=10;
		else if(team==TEAM_Bandit) killer.StatBase[ST_KARMA]+=10;
		else if(team==TEAM_CasinoPlayer) killer.StatBase[ST_KARMA]-=10;
		else if(team==TEAM_CityElite) killer.StatBase[ST_KARMA]-=30;
		else if(team==TEAM_QuestNpc) killer.StatBase[ST_KARMA]-=30;
		else if(team==TEAM_Police) killer.StatBase[ST_KARMA]-=10;
		else if(team==TEAM_Slaver) killer.StatBase[ST_KARMA]+=10;
		else if(team==TEAM_Slave) killer.StatBase[ST_KARMA]-=10;
		else if(team==TEAM_Trapper) killer.StatBase[ST_KARMA]-=10;

		if(cr.Stat[ST_BODY_TYPE]==BT_CHILDREN) killer.KarmaBase[KARMA_CHILDKILLER]++;

		//CallTownSupply(cr,killer); // Town supply call
	}
	
	
	//replication
	
	else if(act_check_dead(cr))
	{
		GameVar@ chip=GetLocalVar(LVAR_microchip_on, cr.Id);
		Map@ dropMap=cr.GetMap();
		uint16 dropX=cr.HexX;
		uint16 dropY=cr.HexY;
		Item@[] items;
		
		if(chip==1)
		{
			int x=Random(100, 1000);
			string serial;
			serial+=x;
			Item@ mchip=cr.AddItem(PID_MICROCHIP, 1);
			mchip.Val1=cr.Id;
			serial+=mchip.Val1;
			mchip.SetLexems("$serial"+serial);
			chip=0;
		}
		if(_CritCanDropItemsOnDead(cr))
		{
			
			cr.GetItems(-1,items);
			// Disable drop of hidden items
			for(uint i=0,j=items.length();i<j;i++) if(FLAG(items[i].Flags,ITEM_HIDDEN)) @items[i]=null;
		}
		dead(cr);
		cr.ToLife();
		if(valid(dropMap))
		{
			Item@ skeleton;
			if(condition<ANIM2_DEAD_PULSE) @skeleton=dropMap.AddItem(dropX, dropY, PID_VAULT_DWELLER_BONES, 1);
			if(valid(skeleton))
			{	
				uint[] values = {dropMap.Id, skeleton.Id};
				MoveItems(items, skeleton, 0);
				CreateTimeEvent(__FullSecond+REAL_MINUTE(10), "e_deleteBody", values, false);
			}
			else MoveItems(items,dropMap,dropX,dropY);
		}
		else DeleteItems(items);
		return;
	}