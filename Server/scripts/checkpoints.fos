// checkpoint
// pm

// #define __SERVER
// #define __CLIENT

#include "_macros.fos"
#include "_defines.fos"
#include "_itempid.fos"

#define GROUP_COUNT        ( 10 )

#define GROUP_ALL          ( 0x00000001 )
#define GROUP_RATS         ( 0x00000002 )
#define GROUP_DIGRATS      ( 0x00000004 )
#define GROUP_MERCH        ( 0x00000008 )
#define GROUP_SCORPIONS    ( 0x00000010 )
#define GROUP_GECKO        ( 0x00000020 )
#define GROUP_WOLF         ( 0x00000040 )
#define GROUP_DEATHCLAW    ( 0x00000080 )
#define GROUP_FLOATERS     ( 0x00000100 )

#define WAY_COUNT          ( 5 )



class CWaypoint                                 // client and server waypoint class
{
    #ifdef __SERVER
    Item@ Waypoint;
    #endif // __SERVER

    #ifdef __CLIENT
    ItemCl@ Waypoint;
    #endif // __CLIENT
    uint[]  Waypoints;
    uint[]  Groups;

    CWaypoint() {}
    #ifdef __SERVER
    CWaypoint( Item & waypoint )
    #endif // __SERVER

    #ifdef __CLIENT
    CWaypoint( ItemCl & waypoint )
    #endif // __CLIENT
    {
        @Waypoint = waypoint;

        Waypoints.resize( 5 );
        Groups.resize( 5 );

        Waypoints[ 0 ] = waypoint.Val0;
        Waypoints[ 1 ] = waypoint.Val2;
        Waypoints[ 2 ] = waypoint.Val4;
        Waypoints[ 3 ] = waypoint.Val6;
        Waypoints[ 4 ] = waypoint.Val8;

        Groups[ 0 ] = waypoint.Val1;
        Groups[ 1 ] = waypoint.Val3;
        Groups[ 2 ] = waypoint.Val5;
        Groups[ 3 ] = waypoint.Val7;
        Groups[ 4 ] = waypoint.Val9;
    }
    #ifdef __SERVER
    void SaveWaypoint()
    {
        Waypoint.Val0 = Waypoints[ 0 ];
        Waypoint.Val2 = Waypoints[ 1 ];
        Waypoint.Val4 = Waypoints[ 2 ];
        Waypoint.Val6 = Waypoints[ 3 ];
        Waypoint.Val8 = Waypoints[ 4 ];

        Waypoint.Val1 = Groups[ 0 ];
        Waypoint.Val3 = Groups[ 1 ];
        Waypoint.Val5 = Groups[ 2 ];
        Waypoint.Val7 = Groups[ 3 ];
        Waypoint.Val9 = Groups[ 4 ];

        Waypoint.Update();
    }

    void SetWaypoints( uint[] waypoints )
    {
        Waypoints = waypoints;
    }

    void SetGroups( uint[] groups )
    {
        Groups = groups;
    }

    void SetWaypointId( uint8 wayNum, uint id )
    {
        Waypoints[ wayNum ] = id;
    }

    void SetWaypointGroupFlag( uint8 wayNum, uint flag, bool set )
    {
        set ? SETFLAG( Groups[ wayNum ], flag ) : UNSETFLAG( Groups[ wayNum ], flag );
    }

    void ChangeWaypointGroupFlag( uint8 wayNum, uint flag )
    {
        SetWaypointGroupFlag( wayNum, flag, IsWaypointGroupFlag( wayNum, flag ) );
    }
    #endif // __SERVER


    uint GetWaypointId()
    {
        return Waypoint.Id;
    }

    bool IsWaypointGroupFlag( uint8 wayNum, uint flag )
    {
        return FLAG( Groups[ wayNum ], flag );
    }

    int GetFirstWaypointIndex( uint flag )
    {
        for( uint8 i = 0, j = Groups.length(); i < j; ++i )
        {
            if( IsWaypointGroupFlag( i, flag ) )
            {
                return i;
            }
        }

        return -1;
    }
    #ifdef __SERVER
    uint GetNextWaypointId( Critter& cr )
    {
    #endif // __SERVER

    #ifdef __CLIENT
    uint GetNextWaypointId( CritterCl& cr )
    {
    #endif // __CLIENT
    uint type = cr.StatBase[ ST_WAYPOINT_GROUP ];

    int index = GetFirstWaypointIndex( type );

    if( index != -1 )
    {
        return Waypoints[ index ];
    }

    return 0;
}
#ifdef __SERVER
bool GetNextWaypointHex( Critter& cr, uint16& hexX, uint16& hexY )
{
    uint id = GetNextWaypointId( cr );
    Item @ waypoint = GetItem( id );
#endif // __SERVER

#ifdef __CLIENT
bool GetNextWaypointHex( CritterCl& cr, uint16& hexX, uint16& hexY )
{
    uint id = GetNextWaypointId( cr );
    ItemCl @ waypoint = GetItem( id );
#endif // __CLIENT

if( waypoint is null )
    return false;

hexX = waypoint.HexX;
hexY = waypoint.HexY;
return true;
}
#ifdef __SERVER
bool GetAllWaypointsId( Critter& cr, uint[]& ids )
{
#endif // __SERVER

#ifdef __CLIENT
bool GetAllWaypointsId( CritterCl& cr, uint[]& ids )
{
#endif // __CLIENT

uint flag = cr.StatBase[ ST_WAYPOINT_GROUP ];
uint[] tempIds;

for( uint8 i = 0, j = Groups.length(); i < j; ++i )
{
    if( IsWaypointGroupFlag( i, flag ) )
    {
        tempIds.insertLast( Waypoints[ i ] );
    }
}

ids = tempIds;

return true;
}

#ifdef __SERVER
bool GetAllWaypointsHex( Critter& cr, uint16[]& hexX, uint16[]& hexY )
{
#endif // __SERVER

#ifdef __CLIENT
bool GetAllWaypointsHex( CritterCl& cr, uint16[]& hexX, uint16[]& hexY )
{
#endif // __CLIENT

uint flag = cr.StatBase[ ST_WAYPOINT_GROUP ];

uint16[] tempHexX;
uint16[] tempHexY;

for( uint8 i = 0, j = Groups.length(); i < j; ++i )
{
    if( IsWaypointGroupFlag( i, flag ) )
    {
        #ifdef __SERVER
        Item @ waypoint = GetItem( Waypoints[ i ] );
        #endif // __SERVER

        #ifdef __CLIENT
        ItemCl @ waypoint = GetItem( Waypoints[ i ] );
        #endif // __CLIENT
        if( waypoint is null )
            continue;

        tempHexX.insertLast( waypoint.HexX );
        tempHexY.insertLast( waypoint.HexY );
        // tempIds.insertLast(Waypoints[i]);
    }
}

hexX = tempHexX;
hexY = tempHexY;

return true;
}
}

// ///////////////////////
// ///////SERVER//////////
// ///////////////////////

#ifdef __SERVER
/*
   void _WaypointInit(Item& item, bool firstTime){
        SetEvent(ITEM_
   }*/
void unsafe_SaveWaypointInfo( Critter& player, int id, int param1, int param2, string@ param3, int[] @ param4 )
{
    uint[] waypoints, groups;

    for( uint8 i = 0; i < WAY_COUNT; ++i )
    {
        waypoints.insertLast( param4[ i * 2 ] );
        groups.insertLast( param4[ i * 2 + 1 ] );
    }

    Item@ item = GetItem( id );
    if( item is null )
        return;

    CWaypoint@ waypoint = CWaypoint( item );
    if( waypoint is null )
        return;

    waypoint.SetWaypoints( waypoints );
    waypoint.SetGroups( groups );

    waypoint.SaveWaypoint();

    Log( "done" );
}


#endif // __SERVER


#ifdef __CLIENT

// ///////////////////////
// ///////CLIENT//////////
// ///////////////////////

# include "_client_defines.fos"
# include "client_gui_h.fos"
# include "_colors.fos"
// #include "checkpoints.fos"



string[] labelArray =
{
    "ALL",
    "RATS",
    "DIGRATS",
    "MERCH",
    "SCORPIONS",
    "GECKO",
    "WOLF",
    "DEATHCLAW",
    "FLOATERS"
};

uint[] lastWaypointIds( WAY_COUNT + 1 );
uint[] lastWaypointFlags( WAY_COUNT );

class CWaypointWindow : IGUIScreenCallbackShow, IGUIScreenCallbackHide
{
    IGUIScreenOpt @ Options;
    CWaypoint@ Waypoint;
    CWaypointElementDoneBtn@[] DoneBtn;
    CWaypointElementInputText@[] InputText;
    CWaypointElementCheckBox@[] CheckBox;
    CWaypointElementMouseSelectBtn@[] SelectBtn;
    uint8 CurrentIndex;
    uint[]  Flags;

    CWaypointWindow()
    {
        CurrentIndex = 0;
    }

    void OnShow( int p0, int p1, int p2 )
    {
        Message( "init2 " + p2 );
        ItemCl@ item = GetItem( p0 );
        if( item is null )
        {
            Message( "wrong waypoint." );
            return;
        }

        uint[] ids;
        @Waypoint = CWaypoint( item );

        // if(waypoint.GetAllWaypointsId(

        if( p2 != 0 )
        {
            LoadFlags( Waypoint.Groups );
            LoadWaypoints( Waypoint );
        }
        else
        {
            LoadFlags( lastWaypointFlags );
            LoadWaypoints( lastWaypointIds );
            LoadId( p1, Waypoint.GetWaypointId() );
        }
    }

    void OnHide( int p0, int p1, int p2 ) {}

    void LoadWaypoints( CWaypoint& waypoint )
    {
        for( uint8 i = 0, j = InputText.length(); i < j; ++i )
        {
            uint iWaypoint = waypoint.Waypoints[ i ];
            InputText[ i ].SetText( iWaypoint );
            Message( "" + iWaypoint );
        }
    }

    void LoadWaypoints( uint[] ids )
    {
        for( uint8 i = 0, j = InputText.length(); i < j; ++i )
        {
            uint iWaypoint = ids[ i ];
            InputText[ i ].SetText( iWaypoint );
            Message( "" + iWaypoint );
        }
    }

    void LoadOnce( CWaypoint& waypoint, uint8 index )
    {
        InputText[ index ].SetText( waypoint.Waypoints[ index ] );
        // SetFlag(index);
        // Flags[index] = waypoint.Groups[index];
    }

    void LoadId( uint8 index, uint id )
    {
        InputText[ index ].SetText( id );
    }

    void LoadFlags( uint[] flags )
    {
        Flags.resize( WAY_COUNT );
        for( uint8 i = 0; i < WAY_COUNT; ++i )
        {
            Flags[ i ] = flags[ i ];
        }
    }

    void SetFlag( uint8 index )
    {
        for( uint8 i = 0, j = CheckBox.length(); i < j; ++i )
        {
            CheckBox[ i ].SetState( Flag( index, CheckBox[ i ].Flag ) );
        }
    }

    bool Flag( uint8 index, uint flag )
    {
        uint tempFlag = Flags[ index ];
        // Message("FLAG "+Flags[index]+":"+flag);

        bool isFlag = FLAG( tempFlag, flag );

        isFlag ? UNSETFLAG( tempFlag, flag ) : SETFLAG( tempFlag, flag );

        Flags[ index ] = tempFlag;
        // Message("ALAG "+Flags[index]+":"+flag);
        return isFlag;
    }

    void SendWaypointToServer()
    {
        int[] send;
        for( uint8 i = 0; i < WAY_COUNT; ++i )
        {
            int id = 0;
            StrToInt( InputText[ i ].GetText(), id );

            send.insertLast( uint( id ) );
            send.insertLast( Flags[ i ] );
        }

        RunServerScriptUnsafe( "checkpoints@unsafe_SaveWaypointInfo", Waypoint.GetWaypointId(), 0, 0, "", send );
    }

    void SaveLocalWaypoint()
    {
        for( uint8 i = 0; i < WAY_COUNT; ++i )
        {
            int id = 0;
            StrToInt( InputText[ i ].GetText(), id );
            lastWaypointIds[ i ] = id;

            // lastWaypointFlags[i] = Flags[i];
        }

        lastWaypointIds[ WAY_COUNT ] = Waypoint.GetWaypointId();
    }

    void Draw() {}
}

class CWaypointElementInputText : IGUIElementCallbackInit, IGUIElementCallbackKeyPress, IGUIElementCallbackMouseClick
{
    CWaypointWindow@ Instance;
    IGUIElementOpt@  Options;
    uint8            Type;

    CWaypointElementInputText( CWaypointWindow & instance, uint8 type )
    {
        @Instance = instance;
        Type = type;
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        @Instance.InputText[ Type ] = this;
    }

    void OnMouseClick( int click )
    {
        Instance.CurrentIndex = Type;
        Instance.SetFlag( Type );
        Message( "flags click" + Instance.Flags[ Type ] );
    }

    void OnKeyPress( uint8 key, uint8 letter )
    {
        Instance.CurrentIndex = Type;
        string@ text = Options.GetText();
        if( key != DIK_BACK )
        {
            text += letter;
        }
        Options.Text( text, FONT_FALLOUT, COLOR_GREEN, COLOR_GREEN, FT_CENTERX | FT_CENTERY );
    }

    void SetText( uint id )
    {
        Options.Text( "" + id, FONT_FALLOUT, COLOR_GREEN, COLOR_GREEN, FT_CENTERX | FT_CENTERY );
    }

    string GetText()
    {
        return Options.GetText();
    }
}

class CWaypointElementCheckBox : IGUIElementCallbackInit, IGUIElementCallbackMouseClick
{

    CWaypointWindow@ Instance;
    IGUIElementOpt@  Options;

    uint8            Type;
    uint16           Flag;

    CWaypointElementCheckBox( CWaypointWindow & instance, uint8 type, uint16 flag )
    {
        @Instance = instance;
        Type = type;
        Flag = flag;
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        @Instance.CheckBox[ Type ] = this;
        Message( "chkbox " + Flag );
    }

    void OnMouseClick( int click )
    {
        Message( "" + Instance.CurrentIndex );

        SetState( !Instance.Flag( Instance.CurrentIndex, Flag ) );


    }

    void SetState( bool state )
    {
        Options.Switch( state );
    }
}

class CWaypointElementMouseSelectBtn : IGUIElementCallbackInit, IGUIElementCallbackMouseClick
{

    CWaypointWindow@ Instance;
    IGUIElementOpt@  Options;

    uint8            Type;

    CWaypointElementMouseSelectBtn( CWaypointWindow & instance, uint8 type )
    {
        @Instance = instance;
        Type = type;
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        @Instance.SelectBtn[ Type ] = this;
    }

    void OnMouseClick( int click )
    {
        __isSelectWaypoint = true;
        __WaypointWayNum = Type;
        Instance.CurrentIndex = Type;
        Instance.SaveLocalWaypoint();
        ::HideScreen( 0, 0, 0, 0 );
    }
}

class CWaypointElementDoneBtn : IGUIElementCallbackInit, IGUIElementCallbackMouseClick
{
    uint8            Type;
    CWaypointWindow@ Instance;
    IGUIElementOpt@  Options;

    CWaypointElementDoneBtn( CWaypointWindow & instance, uint8 type )
    {
        @Instance = instance;
        Type = type;
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        @Instance.DoneBtn[ Type ] = this;
    }

    void OnMouseClick( int click )
    {
        if( Type > 0 )
        {
            Instance.SendWaypointToServer();
        }
        ::HideScreen( 0, 0, 0, 0 );
    }
}

void InitWaypointScreen()
{

    CWaypointWindow window();
    GUI_CreateScreen( CLIENT_SCREEN_WAYPOINTS, "teach_window.png" )
    .CallbackHide( window )
    .CallbackShow( window )
    .CloseOnMiss( false )
    .AutoCursor( true, CURSOR_DEFAULT );

    window.InputText.resize( WAY_COUNT );
    window.CheckBox.resize( GROUP_COUNT );
    window.SelectBtn.resize( WAY_COUNT );
    window.DoneBtn.resize( 2 );

    uint16 axistX = 0, axistY = 0;

    for( uint8 i = 0; i < WAY_COUNT; ++i )
    {
        CWaypointElementInputText inputText( window, i );
        GUI_AddScreenElement( CLIENT_SCREEN_WAYPOINTS, "chosen_tab.png", 5, 5 + axistY )
        .CallbackInit( inputText )
        .CallbackMouseClick( inputText )
        .TextInput( true, 5, COLOR_LGREEN );

        CWaypointElementMouseSelectBtn selectBtn( window, i );
        GUI_AddScreenElement( CLIENT_SCREEN_WAYPOINTS, "waybtselectup.png", 130, 5 + axistY )
        .CallbackInit( selectBtn )
        .CallbackMouseClick( selectBtn )
        .DownPic( "waybtselectdn.png" );

        axistY += 25;
    }

    axistX = 0;
    axistY = 0;

    for( uint8 i = 0; i < GROUP_COUNT; ++i )
    {
        CWaypointElementCheckBox checkBox( window, i, pow( 2, i ) );
        GUI_AddScreenElement( CLIENT_SCREEN_WAYPOINTS, "PRFSLDOF.FRM", 160 + axistX, 5 + axistY )
        .CallbackInit( checkBox )
        .CallbackMouseClick( checkBox )
        .DownPic( "PRFSLDON.FRM" );

        if( i < labelArray.length() )
        {
            GUI_AddScreenElement( CLIENT_SCREEN_WAYPOINTS, "", 180 + axistX, -505 + axistY )
            .Text( "" + labelArray[ i ], FONT_FALLOUT, COLOR_GREEN, COLOR_GREEN, /*FT_CENTERX|*/ FT_CENTERY );
        }



        if( i == 4 || i == 9 )
        {
            axistX += 70;
            axistY = 0;
        }
        else
        {
            axistY += 25;
        }


    }
    axistX = 0;

    for( uint8 i = 0; i < 2; ++i )
    {
        CWaypointElementDoneBtn dontBtn( window, i );
        GUI_AddScreenElement( CLIENT_SCREEN_WAYPOINTS, "PRFSLDOF.FRM", 160 + axistX, 250 )
        .CallbackInit( dontBtn )
        .CallbackMouseClick( dontBtn )
        .DownPic( "PRFXIN.FRM" );

        axistX += 50;
    }
}

#endif // __CLIENT
/*if(lock is null) return;
   uint val0 = lock.Val0;
   uint16 pid = lockpick.GetProtoId();
   bool haveLockpick = !(lockpick is null);

   if (val0==2 && (!haveLockpick || pid != PID_EXP_LOCKPICK_SET || pid != PID_LOCKPICKS))
        {
                player.Say(SAY_NETMSG, "Нужны отмычки."); return;
        }else
   if (val0==3 && (!haveLockpick || pid != PID_LOCKPICKS))
        {
                player.Say(SAY_NETMSG, "Нужен большой набор отмычек."); return;
        }

   uint val4 = pow(10, val0+1);
   lock.Val4 = val4
   lock.Val5=Random(val4*0.1,val4-1);*/
