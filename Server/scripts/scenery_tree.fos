// Author: TovPrapor [21.11.2008]
// Use Axe On Tree
#include "_macros.fos"

import void InjureCritter( Critter& cr, uint dmg, uint dmgType, uint8 dir, uint attackerId ) from "combat";

// Использование топора на дереве ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// Проверяет сценери на то, является ли объект деревом.
bool IsTree( Scenery@ scen )
{
    if( not valid( scen ) )
        return false;
    uint16 pid = scen.ProtoId;
    return pid == 2066 || pid == 2316 || pid == 2317 || pid == 2318 || pid == 2319 || pid == 2320 || pid == 2321 || pid == 2945 || pid == 2946 || pid == 2947 ||
           pid == 3842 || pid == 3843 ||  // Зеленые деревья
           ( pid >= 4562 && pid <= 4572 ) // Из Fallout Tactics
    ;
}

//powermagic 2013/09/17
//split function to use with items. now set hX && hY as argument

// Обрабатывает использование топора на дереве.
bool UseAxeOnTree( Critter@ cr, Scenery@ tree ) // Если обрабатывать по умолчанию, возвращает FALSE.
// Функция не проверяет, был ли использован именно топор. Это нужно делать до вызова функции.
// Возвращает false, в случае, когда нужно обработать ситуацию стандартно. Т.е., по сути, false - это отказ функции от обработки ситуации.
{
	if( not valid( tree ) ){
		Log( "Scenery (tree) is not valid." );
		return false;
	}
  
	return UseAxeOnTree(cr, tree.HexX, tree.HexY, PID_FIREWOOD);
}
//pm added
bool UseAxeOnTree( Critter@ cr, Scenery@ tree, uint16 pid ){
	if( not valid( tree ) ){
		Log( "Scenery (tree) is not valid." );
		return false;
	}
  
	return UseAxeOnTree(cr, tree.HexX, tree.HexY, pid);
}

bool UseAxeOnTree(Critter@ cr, Item@ tree, uint16 pid, bool removeTree){
	if( not valid( tree ) ){
		Log( "Item (tree) is not valid." );
		return false;
	}
	
	bool r = UseAxeOnTree(cr, tree.HexX,  tree.HexY, pid);
	
	if(r && removeTree){
		DeleteItem(tree);
	}
	
	return r;
}

bool UseAxeOnTree(Critter@ cr, uint16 hX, uint16 hY, uint16 pid){
// ////////////////////////////////////////////////////
// if ((20+crLuck*2-penalty) < randNum){cr.SetPerk(PE_DAMAGE_RIGHT_ARM, 1); cr.SetPerk(PE_DAMAGE_LEFT_ARM, 1); }
// cr.SetTimeout(TO_SK_DOCTOR,1);
// ////////////////////////////////////////////////////
    if( not valid( cr  ) )
    {
        Log( "Critter is not valid."       );
        return false;
    }
    /*if( not valid( tree ) )
    {
        Log( "Scenery (tree) is not valid." );
        return false;
    }*/
    bool  damArmL = cr.Damage[ DAMAGE_LEFT_ARM ] != 0;
    bool  damArmR = cr.Damage[ DAMAGE_RIGHT_ARM ] != 0;
    bool  damLegL = cr.Damage[ DAMAGE_LEFT_LEG ] != 0;
    bool  damLegR = cr.Damage[ DAMAGE_RIGHT_LEG ] != 0;
// Получение всех чисел для расчета.
    uint8 randNum_tree = ( hX * hY ) % 100 + 1;
    uint8 randNum_crit = cr.Id                      % 100 + 1;
    uint8 randNum_time = ( __FullSecond / 10 )  % 100 + 1;
    uint8 randNum      = ( randNum_tree * randNum_crit * randNum_time ) % 100;
    uint8 crLuck       = cr.Stat[ ST_LUCK ];
// Штраф на вероятность успеха при повреждени глаз.
    uint8 penalty = 0;
    if( cr.Damage[ DAMAGE_EYE ] != 0 )
        penalty = 10;
// Попытка рубки дров.
    if( ( 20 + crLuck * 2 - penalty ) > randNum )
    {
        // Сломанными руками (обоими) не получится.
        if( damArmL && damArmR )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 2200 );
// ____________________________
            return true;
        }
        // Обработка таймаута.
        int32    axeLastTime_value = 0;
        GameVar@ axeLastTime = GetLocalVar( LVAR_scenery_axe_lasttime, cr.Id );
        if( valid( axeLastTime ) )
            axeLastTime_value = axeLastTime.GetValue();
        else
            Log( "LVAR_scenery_axe_lasttime is not valid." );
        // С момента последнего использования прошло недостаточно времени.
        if( axeLastTime_value > __FullSecond - REAL_SECOND( 15 - cr.Stat[ ST_ENDURANCE ] ) )
        {
            cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 2201 );
// ____________________________
            return true;
        }
        // Запоминание текущего времени.
        if( valid( axeLastTime ) )
            axeLastTime = __FullSecond;
        // Есть небольшой шанс повредить руку.
        if( !damArmL && !damArmR && Random( 1, crLuck * 20 + ( CLAMP( cr.Stat[ ST_AGILITY ], 4, 10 ) - 4 ) * 10 ) == 1 )
        {
            if( Random( 1, 10 ) == 1 )
                cr.DamageBase[ DAMAGE_RIGHT_ARM ] = 1;
            else
                cr.DamageBase[ DAMAGE_LEFT_ARM ] = 1;
            cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 2202 );
            uint8 dir = GetDirection( hX, hY, cr.HexX, cr.HexY );
            InjureCritter( cr, Random( 10, 10 + cr.Stat[ ST_STRENGTH ] * 2 ), DAMAGE_NORMAL, dir, 0 );
// ____________________________
            return true;
        }

        // Определение количества дров и получение цифр для остальных расчетов.
        uint8  count = ( ( randNum_tree % 10 ) + crLuck ) / 4;
        uint16 mapPID = 0;
        Map@   map = cr.GetMap();
        if( valid( map ) )
            mapPID = map.GetProtoId();
        else
            Log( "Map is not valid." );
        if( damArmL || damArmR )
            count = 2;
// /////////////////////////////////////////////////////////////////////////////////
// ////////// Использовать нормальную проверку принадлежности карты к энкаунтеру. //
// ////////// А пока за энкаунтер считаем любую локацию кроме Ямы //////////////////
        if( mapPID != 6 )                                                                          //
// /////////////////////////////////////////////////////////////////////////////////
        {
            int8 countEnc = ( CLAMP( cr.Skill[ SK_OUTDOORSMAN ], 49, 100 ) - 40 ) / 10;
            if( damLegL )
                count--;
            if( damLegR )
                count--;
            if( damArmL || damArmR )
                count -= 2;
            count += CLAMP( countEnc, 0, 6 );
        }
        ProtoItem@ proto = GetProtoItem( pid );
        uint32     itemsWeight = cr.ItemsWeight();
        uint32     carryWeight = cr.Stat[ ST_CARRY_WEIGHT ];
        count = Random( 1, count );
        // Криттер может утащить все дрова.
        if( cr.ItemsWeight() + proto.Weight * count <= carryWeight )
        {
            if( not valid( cr.AddItem( pid, count ) ) )
            {
                Log( "AddItem fail." );
                return false;
            }
            cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 2203 );
        }
        // Криттер может утащить только часть дров.
        else if( itemsWeight + proto.Weight <= carryWeight )
        {
            uint8 countDrop = count;
            count = ( carryWeight - itemsWeight ) / proto.Weight;
            countDrop -= count;
            if( not valid( cr.AddItem( pid, count ) ) )
            {
                Log( "cr.AddItem fail." );
                return false;
            }
            if( not valid( map.AddItem( cr.HexX, cr.HexY, pid, countDrop ) ) )
            {
                Log( "map.AddItem fail." );
                return false;
            }
            cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 2204 );
        }
        // Криттер не сможет вообще унести хоть одну единицу дров без перегруза.
        else
        {
            if( not valid( map.AddItem( cr.HexX, cr.HexY, pid, count ) ) )
            {
                Log( "map.AddItem fail." );
                return false;
            }
            cr.SayMsg( SAY_NETMSG, TEXTMSG_TEXT, 2205 );
        }
// ______________________
        return true;
    } else {
		string[] action = { "Вам не кажется, что тут осталось что-либо полезное.", "Это дерево уже дало все, что могло.", "Вы не видите на этом дереве ничего, что можно было бы срубить.", "Попытка нарубить немного дров успехом не увенчалась.", "Вы промазали топором по суку. Бывает.", "Вы хорошенько врезали топором по стволу, но мгновенного результата нет."};
		cr.Say( SAY_NETMSG, action[Random(0,action.length()-1)] );
	}
    return false;
}
