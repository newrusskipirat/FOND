

bool LocIsModoc(uint locPid)
{
	return(locPid<=(1253));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(32)||locPid==(1216)||locPid==(43)||locPid==96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(42));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

shared interface Project
{
	string@get_Name();
	void Build();
	void SetAssociation(string@ex,string@className,string@classModule);
}

shared interface FileObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	void FormatStringData(string&nameData,string&data);
	FileObject@get_Pattern(string&name)const;
	FileObject@get_Copy(string&name); 
	
	void set_GlobalData(string@name,string@value);          
	
	string@get_GlobalData(string@name);            
	
}

shared class TimeLog
{
	uint tick;
	
	TimeLog()
	{
		refresh();
	}
	
	void refresh()
	{
		tick=GetTick();
	}
	
	bool check(uint count)
	{
		return(GetTick()-tick>=count);
	}
	
	uint get()
	{
		uint old=tick;
		refresh();
		return(tick-old);
	}
	
	void Log(string&in message)
	{
		::ClearLog(message+" ["+(GetTick()-tick)+"ms]");
	}
}

shared interface AnyDataObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	uint[]@get_SaveData();
	void InitData(uint[]&data);
}

shared interface ManagerObject
{
	FileObject@get_ProtoObject(string@name);
	void ParseProtoTypes(const string&ex,const FileObject&pattern,const string@search);
	FileObject@ParseProtoTypeFile(string&name,const string&ex,const FileObject&pattern,const string@search);
	FileObject@AddPrototype(FileObject@proto);
	FileObject@StringToFileObject(string&name,string&txt,const FileObject&pattern);
}

shared interface ValueAPI{}
shared class SettingsAPI
{
	string Name;
	bool IsDebug;
} 

shared class GlobalData
{
	uint Hash;
	string Value;
	
	GlobalData(string@name)
	{
		Hash=GetStrHash(name);
		Value="";
	} 
	
	void SaveData(uint[]&outArray,uint&position)
	{
		uint len=Value.length();
		
		outArray.resize(position+2+len/2);
		
		outArray[position++]=Hash;
		outArray[position++]=len;
		
		for(uint i=0;i<len;i++)
		{
			outArray[position]|=Value[i++]<<24;
			outArray[position]|=Value[i++]<<16;
			outArray[position]|=Value[i++]<<8;
			outArray[position++]|=Value[i];
		}
	} 
	
	void LoadData(uint[]&in outArray,uint&position)
	{
		Hash=outArray[position++];
		uint len=outArray[position++];
		Value.resize(len);
		
		for(uint i=0;i<len;i++)
		{
			Value[i++]=(outArray[position]>>24)&0xFF;
			Value[i++]=(outArray[position]>>16)&0xFF;
			Value[i++]=(outArray[position]>>8)&0xFF;
			Value[i]=outArray[position++]&0xFF;
			
		}
	}
} 

shared class Hexagonal
{
	Hexagonal(){Reset();}
	Hexagonal(const uint16&in x,const uint16&in y){Set(x,y);}
	Hexagonal(const Hexagonal&master){Set(master);}
	
	Hexagonal(const Critter&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Item&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Scenery&master){Set(master.HexX,master.HexY);}
	
	bool Entire(Map&map,int entNum){return map.GetEntireCoords(entNum,0,X,Y);}
	bool IsPassed(Map&map){return ValidPosition(map)&&map.IsHexPassed(X,Y);}
	bool IsPassed(Map&map,Hexagonal&begin,Hexagonal&end){return ValidPosition(map,begin,end)&&map.IsHexPassed(X,Y);}
	
	bool ValidPosition(Map&map)
	{
		Hexagonal end,begin;
		if(end.Entire(map,0)&&begin.Entire(map,255))
		return ValidPosition(map,begin,end);
		return false;
	}
	
	bool ValidPosition(Map&map,Hexagonal&begin,Hexagonal&end)
	{
		return(X>=begin.X&&Y>=begin.Y
		&&X<=end.X&&Y<=end.Y);
	}
	
	bool Transit(Critter&critter,Map&map){return Transit(critter,map,critter.Dir);}
	bool Transit(Critter&critter,Map&map,uint8 direction)
	{
		if(!IsPassed(map))return false;
		return critter.TransitToMap(map.Id,X,Y,direction);
	}
	
	bool Transit(Critter&critter,uint mapId){return Transit(critter,mapId,critter.Dir);}
	bool Transit(Critter&critter,uint mapId,uint8 direction)
	{
		if(mapId==0)return false;
		Map@map=GetMap(mapId);
		if(@map is null)return false;
		return Transit(critter,map,direction);
	} 
	
	void Set(const uint16&in x,const uint16&in y){X=x;Y=y;}
	void Set(const Hexagonal&in other){Set(other.X,other.Y);}
	void Reset(){X=Y=0;}
	uint Distantion(Hexagonal&other){return GetDistantion(X,Y,other.X,other.Y);}
	
	uint16 X;
	uint16 Y;
	
	bool opEquals(const Hexagonal&in other){return(other.X==X&&other.Y==Y);}
	Hexagonal&opAssign(const Hexagonal&in other)
	{
		Set(other);
		return this;
	}
	
	const uint get_UID(const uint w)const{return X+Y*w;}
	string get_Debug(){return"X:"+X+"Y:"+Y;}
	void Log(string&str){::Log(str+":"+Debug);}
}    

shared class MapHash
{
	MapHash(const uint16&in protoId)
	{
		ProtoId=protoId;
		@Min=null;
		@Max=null;
	}
	
	MapHash&opAssign(Map&map)
	{
		@Min=Hexagonal(0,0);
		@Max=Hexagonal(0,0);
		map.GetEntireCoords(0,0,Max.X,Max.Y);
		map.GetEntireCoords((255),0,Min.X,Min.Y);
		return this;
	}
	
	uint16 ProtoId;
	Hexagonal@Min;
	Hexagonal@Max;
} 

shared class Line
{
	Line(Hexagonal&a,Hexagonal&b){@A=a;@B=b;}
	
	uint get_Length()
	{
		return B.Distantion(A);
	}
	
	uint get_Point(Hexagonal&point)
	{
		return B.Distantion(point);
	}
	
	float get_Module(Hexagonal&point)
	{
		return Point[point]/Length;
	}
	
	Hexagonal@get_opIndex(const uint&in size)
	{
		
		const float mod=float(size/Length);
		return@Hexagonal(A.X+(B.X-A.X)*mod,A.Y+(B.Y-A.Y)*mod);
	} 
	
	Line(Map&map,uint16 grid,MapHash@hash)
	{
		if(@hash is null)
		{
			Hexagonal min,max;
			map.GetTransferParams(min.X,min.Y,max.X,max.Y,grid);
			
			@A=@Hexagonal(min.X,min.Y);
			@B=@Hexagonal(max.X,max.Y);
		}
		else
		{
			if(@hash.Min is null||@hash.Max is null)
			map.GetTransferParams(hash.Min.X,hash.Min.Y,hash.Max.X,hash.Max.Y,grid);
			
			@A=@Hexagonal(hash.Min.X,hash.Min.Y);
			@B=@Hexagonal(hash.Max.X,hash.Max.Y);
		}
	} 
	
	string get_Debug(){return"A<"+A.Debug+">B<"+B.Debug+">";}
	void Log(string&str){::Log(str+":"+Debug);}
	
	Hexagonal@A;
	Hexagonal@B;
}  

import MapHash@GetMapHash(const uint16&in pid)from"world";
import uint CreateLocation(Hexagonal&coordinate,uint16 locationPid)from"world"; 

import ManagerObject@get_objectManager()from"world"; 

import EventTree@get_EventRoot()from"world"; 

import Project@CreateProject(string@name,string@path)from"main";
import Project@get_Project(string@name)from"main

import bool AddAttackPlane(Critter&npc,uint priority,Critter&target,bool run)from"npc_planes";
import bool AddWalkPlane(Critter&npc,uint priority,int identifier,uint identifierExt,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import void SetDeterioration(Item&item,int deteriorationProcent)from"repair";     

uint LastDeadId=0;
uint[]CollectedNpcIds;

void _NpcInit(Critter&npc,bool firstTime)
{
	uint bt=npc.Stat[(67)];
	if(bt>=(0)&&bt<=(4))
	{
		npc.SetEvent((18),"_NpcMessage");
		npc.SetEvent((2),"_NpcDead");
		npc.SetEvent((26),"_NpcSmthDead");
		npc.SetEvent((31),"_NpcSmthUseSkill");
		npc.SetEvent((36),"_NpcPlaneEnd");
		npc.SetEvent((17),"_NpcStealing");
		npc.SetEvent((30),"_NpcSmthUseItem");
		npc.SetEvent((32),"_NpcSmthDropItem");
		
		Item@[]items;
		npc.GetItems(-1,items);
		bool favrtAmmoSet=false;
		bool favrtWpnSet=false;
		for(uint i=0,j=items.length();i<j;i++)
		{
			SetDeterioration(items[i],Random(80,95));
			if(items[i].GetType()==(3)&&!favrtWpnSet)
			{
				npc.SetFavoriteItem((1),items[i].GetProtoId());
				favrtWpnSet=true;
			}     
			
		}
	}
}

Critter@GetCritterForLooting(Critter&lootCr)
{
	
	Critter@result=null;
	lootCr.SendMessage((30),0,(0));
	if(CollectedNpcIds.length()>0)
	{
		
		for(uint i=0,j=CollectedNpcIds.length();i<j;i++)
		{
			Critter@cr=GetCritter(CollectedNpcIds[i]);
			if(cr.GetPlanes((30),null)==0)
			{
				@result=cr;
				break;
			}
		} 
		
		if(not(@result!=null))
		@result=GetCritter(CollectedNpcIds[Random(0,CollectedNpcIds.length()-1)]); 
		
		CollectedNpcIds.resize(0);
	}
	return result;
}

void _NpcSmthUseItem(Critter&npc,Critter&fromCr,Item&item,Critter@onCritter,Item@onItem,Scenery@onScenery)
{
	if(fromCr.IsPlayer()&&npc.IsLife())
	{
		uint pid=item.GetProtoId();
		if(pid==(85)||pid==(544)||pid==(222)||pid==(51))
		{
			AddAttackPlane(npc,0,fromCr,__RunOnCombat);
			npc.SendMessage((31),fromCr.Id,(2));
		}
	}
}

void _NpcSmthDropItem(Critter&npc,Critter&fromCr,Item&item)
{
	if(fromCr.IsPlayer()&&npc.IsLife())
	{
		uint pid=item.GetProtoId();
		if(pid==(209)||pid==(545)||pid==(206))
		{
			AddAttackPlane(npc,0,fromCr,__RunOnCombat);
			npc.SendMessage((31),fromCr.Id,(2));
		}
	}
}

void _NpcMessage(Critter&npc,Critter&fromCr,int message,int value)
{
	if(message==(30))
	{
		if(not npc.IsDead())
		CollectedNpcIds.insertLast(npc.Id);
	}
	else if(message==(31))
	{
		if(fromCr.Stat[(106)]==npc.Stat[(106)]&&npc.IsLife())
		{
			Critter@target=GetCritter(value);
			if((@target!=null))
			AddAttackPlane(npc,0,target,__RunOnCombat);
		}
	}
	else if(message==(32))
	{
		Critter@target=GetCritter(value);
		if((@target!=null))
		AddAttackPlane(npc,0,target,__RunOnCombat);
	}
}

void _NpcDead(Critter&npc,Critter@killer)
{
	NpcPlane@[]planes;
	if(npc.GetPlanes((30),planes)>0)
	{
		Critter@cr=GetCritterForLooting(npc);
		if((@cr!=null))
		{
			
			for(uint i=0,j=planes.length();i<j;i++)
			cr.AddPlane(planes[i]);
		}
	}
}

void _NpcSmthDead(Critter&npc,Critter&fromCrit,Critter@killer)
{
	if(fromCrit.Id!=LastDeadId)
	{
		if(fromCrit.ItemsCount()>0&&(fromCrit.Mode[(511)]==0&&fromCrit.Mode[(523)]==0))
		{
			Critter@cr=GetCritterForLooting(fromCrit);
			if((@cr!=null))
			AddWalkPlane(cr,0,(30),fromCrit.Id,fromCrit.HexX,fromCrit.HexY,6,false,1);
		}
		LastDeadId=fromCrit.Id;
	}
}

void _NpcSmthUseSkill(Critter&npc,Critter&fromCr,int skill,Critter@onCritter,Item@onItem,Scenery@onScenery)
{
	if((skill==(-5)||skill==(210))&&(@onCritter!=null)&&npc.GetPlanes((30),onCritter.Id,null)>0)
	AddAttackPlane(npc,(50)+1,fromCr,__RunOnCombat);
	
}

int _NpcPlaneEnd(Critter&npc,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
{
	if(plane.Identifier==(30)&&reason==(30))
	{
		Critter@cr=GetCritter(plane.IdentifierExt);
		if((@cr!=null)&&cr.IsDead())
		{
			Item@[]items;
			cr.GetItems((0),items);
			cr.GetItems((1),items);
			cr.GetItems((2),items);
			npc.GetMap().GetItems(cr.HexX,cr.HexY,items);
			
			for(uint i=0,j=items.length();i<j;i++)
			{
				int type=items[i].GetType();
				if(type<(1)||type>(7))
				@items[i]=null;
			}
			
			MoveItems(items,npc);
			npc.Animate(0,(27),null,true,true);
			npc.Wait(__Breaktime);
		}
		return(2);
	}
	return(0);
}

void _NpcStealing(Critter&npc,Critter&thief,bool success,Item&item,uint count)
{
	if(!success)
	{
		AddAttackPlane(npc,0,thief,__RunOnCombat);
		npc.SendMessage((31),thief.Id,(2));
	}
}
