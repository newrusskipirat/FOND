#ifndef __LTP__
#define __LTP__

#define BINDCHECK         ( 0xF035BCF3 )

funcdef uint PROCESS( Critter@, int&, int&, int& );

#ifndef __LTP_MAIN__

# define LTP_TEST         ( 0 )
// 1..9 reserved для навыков и базовых действий
# define LTP_FISHING      ( 10 )
# define LTP_FARMING      ( 11 )
// 12..19 reserved для новой механики и интерактивных объектов
# define LTP_RUSSROUL     ( 30 ) // pm add
# define LTP_DEFIB        ( 31 ) // pm add
# define LTP_RELOAD       ( 32 ) // pm add
# define LTP_SNOW         ( 33 ) // pm add
# define LTP_ROPECUFFS    ( 34 ) // pm add
# define LTP_TEACH        ( 35 )
# define LTP_SHARP        ( 36 )
// 37..255 для предметов, квестов, сценок и т.д.

import bool RegisterProcess( uint8 type, any func ) from "ltp";

import bool StartProcess( Critter& cr, uint8 type, int param0, int param1, int param2, uint time ) from "ltp";
import bool StartProcess( Critter& cr, uint8 type, int param0, uint time ) from "ltp";            // param1 и param2 затираются в 0
import bool StartProcess( Critter& cr, uint8 type, uint time ) from "ltp";                        // param0 и param1 и param2 затираются только если type совпадает с type прошлого вызова какой то процедуры

import bool StopProcess( Critter& cr ) from "ltp";

import bool checkTDH( Critter& cr ) from "ltp";
import bool checkTDH( Critter& cr, uint8 type ) from "ltp";

# define LTPREG           # ( ty, fu )        PROCESS @___pfunc = @fu; any ___pany; ___pany.store( @___pfunc ); RegisterProcess( ty, ___pany );
# define LTPROCESS        # ( c, p, t )                if( p == -1 && (c is null) ) { p = int(t); return BINDCHECK; }
# define LTPROCESSD       # ( t )            if( param0 == -1 && (cr is null) ) { param0 = int(t); return BINDCHECK; }

#endif // __LTP_MAIN__

#endif // __LTP__
