                                                    

string[]__critterHistoryInfo;                                                                                                                                                                                                                                                                                                                                                                                                                                            

import IGUIScreenOpt@GUI_CreateScreen(int screenIndex,string@sprName)from"client_gui";

import void GUI_DeleteScreen(int screenIndex)from"client_gui";

import IGUIElementOpt@GUI_AddScreenElement(int screenIndex,string@sprName,int x,int y)from"client_gui";

import IGUIScreenOpt@GUI_GetScreenOptions(int screenIndex)from"client_gui";

import IGUIScreenOpt@GUI_GetScreenOptions()from"client_gui";

import IGUIElementOpt@GUI_GetElementOptions()from"client_gui";
import void GUI_HideScreen(int screenIndex,int p0,int p1,int p2)from"client_gui";

import void GUI_DeleteScreenElements(int screenIndex)from"client_gui"; 

import IGUIScreenOpt@GUI_CreateScreenIni(int screenIndex,string@iniKey)from"client_gui";
import IGUIElementOpt@GUI_AddScreenElementIni(int screenIndex,string@ini,int defx,int defy)from"client_gui";
import IGUIElementOpt@GUI_AddScreenElementIni(int screenIndex,string@ini,int defx,int defy,string@defSpr)from"client_gui";      

shared interface IGUIScreenCallbackShow
{
	void OnShow(int p0,int p1,int p2);
}
shared interface IGUIScreenCallbackHide
{
	void OnHide(int p0,int p1,int p2);
}
shared interface IGUIScreenCallbackMove
{
	void OnMove(int posX,int posY);
}

shared interface IGUIScreenCallbackInit{
	void OnInit();
}

shared interface IGUIScreenOpt
{
	IGUIScreenOpt@CallbackShow(IGUIScreenCallbackShow@callback);
	IGUIScreenOpt@CallbackHide(IGUIScreenCallbackHide@callback);
	IGUIScreenOpt@CallbackMove(IGUIScreenCallbackMove@callback);
	IGUIScreenOpt@Position(int x,int y);
	IGUIScreenOpt@CanMove(bool enabled);
	IGUIScreenOpt@Modal(bool enabled);
	IGUIScreenOpt@Multiinstance(bool enabled);
	IGUIScreenOpt@IgnoreBorders(bool enabled);
	IGUIScreenOpt@CloseOnMiss(bool enabled);
	IGUIScreenOpt@AutoCursor(bool enabled,int cursorType);
	IGUIScreenOpt@SetElementCount(int8 ElementCount);
	IGUIScreenOpt@Pic(string@sprName,int path);  
	
	int GetPosX();
	int GetPosY();
	uint16 GetElementsLength();
	IGUIElementOpt@GetElement(uint16 index);
	
}    

shared interface IGUIElementCallbackInit
{
	void OnInit();
}
shared interface IGUIElementCallbackDraw
{
	void OnDraw(int posX,int posY,int w,int h);
}
shared interface IGUIElementCallbackMouseClick
{
	void OnMouseClick(int click);
}
shared interface IGUIElementCallbackKeyPress
{
	void OnKeyPress(uint8 key,uint8 letter);
}

shared interface IGUIElementOpt
{
	IGUIElementOpt@CallbackInit(IGUIElementCallbackInit@callback);
	IGUIElementOpt@CallbackDraw(IGUIElementCallbackDraw@callback);
	IGUIElementOpt@CallbackMouseClick(IGUIElementCallbackMouseClick@callback);
	IGUIElementOpt@CallbackKeyPress(IGUIElementCallbackKeyPress@callback);
	IGUIElementOpt@Position(int x,int y);
	IGUIElementOpt@Position(int x,int y,int w,int h);
	IGUIElementOpt@Position(string&iniKey);
	IGUIElementOpt@DownPic(string@sprName);
	IGUIElementOpt@Text(string@text,int font,uint color,uint downColor,int flags);
	IGUIElementOpt@TextInput(bool enabled,uint maxLen,uint colorFocused);
	IGUIElementOpt@Switch(bool enabled); 
	
	IGUIElementOpt@SetVisible(bool enabled);
	IGUIElementOpt@Realese();
	IGUIElementOpt@SetElementType(uint8 type);
	IGUIElementOpt@SetDescription(string desc);
	IGUIElementOpt@SetElementBtnNum(uint8 btnNum);
	IGUIElementOpt@SetElementFastPanelType(uint8 type);
	IGUIElementOpt@SetElementFastPanelId(uint16 id);
	IGUIElementOpt@UpPic(string@sprName);
	IGUIElementOpt@Pic(string@sprName,int path);
	IGUIElementOpt@SetLayer(uint8 layer);
	IGUIElementOpt@SetSpecialValue(uint value);
	IGUIElementOpt@SetRenderLayer(uint8 layer);
	IGUIElementOpt@PicSetFrmCount(uint16 count);   
	
	int GetPosX();
	int GetPosY();
	string@GetText(); 
	
	bool GetVisible();
	uint8 GetLayer();
	uint8 GetType();
	uint8 GetBtnNum();
	uint8 GetFastPanelType();
	uint16 GetFastPanelId();
	string GetDescription();
	uint16 GetSurfaceHeight();
	uint16 GetSurfaceWidth();
	uint GetSpecValue();
	uint8 GetRenderLayer(); 
	
}              

uint __GetColor(int r,int g,int b)
{
	r=(((r)>(255))?(255):(((r)<(0))?(0):(r)));
	g=(((g)>(255))?(255):(((g)<(0))?(0):(g)));
	b=(((b)>(255))?(255):(((b)<(0))?(0):(b)));
	return(uint((0xFF<<24)|(((r)&0xFF)<<16)|(((g)&0xFF)<<8)|((b)&0xFF)));
}

uint __GetGradient(uint colorStart,uint colorEnd,uint8 pos)
{
	pos=(((pos)>(100))?(100):(((pos)<(1))?(1):(pos)));
	
	int aS=(colorStart>>24)&0xFF,
	rS=((colorStart>>16)&0xFF),
	gS=((colorStart>>8)&0xFF),
	bS=((colorStart)&0xFF),
	
	aE=(colorEnd>>24)&0xFF,
	rE=((colorEnd>>16)&0xFF),
	gE=((colorEnd>>8)&0xFF),
	bE=((colorEnd)&0xFF); 
	
	rS=(((rE-int(rS*(pos*0.01)))>0)?(rE-int(rS*(pos*0.01))):-(rE-int(rS*(pos*0.01))));
	gS=(((gE-int(gS*(pos*0.01)))>0)?(gE-int(gS*(pos*0.01))):-(gE-int(gS*(pos*0.01))));
	bS=(((bE-int(bS*(pos*0.01)))>0)?(bE-int(bS*(pos*0.01))):-(bE-int(bS*(pos*0.01))));
	
	return __GetColor(rS,gS,bS);
}

uint __GetColor(uint8&a,uint8&r,uint8&g,uint8&b,uint color){
	a=(color>>24)&0xFF;
	r=((color>>16)&0xFF);
	g=((color>>8)&0xFF);
	b=((color)&0xFF);
	
	return 0;
}                                        

class TestScreenButtonShow:IGUIElementCallbackMouseClick
{
	void OnMouseClick(int click)
	{
		Message("GUITestScreenButtonShow::OnMouseClick "+click);
		::ShowScreen((40),3,3,3);
	}
}

class TestScreenButton:IGUIElementCallbackMouseClick
{
	void OnMouseClick(int click)
	{
		::HideScreen(0,2,2,2);
	}
}

class TestScreenButton2:IGUIElementCallbackMouseClick
{
	void OnMouseClick(int click)
	{
		::ShowScreen((40),1,1,1);
	}
}

class TestScreen:IGUIScreenCallbackShow,IGUIScreenCallbackHide,IGUIScreenCallbackMove,IGUIElementCallbackInit,IGUIElementCallbackKeyPress
{
	void OnShow(int p0,int p1,int p2)
	{
		::Message("OnShow "+p0+" "+p1+" "+p2+".");
		@ScreenOpt=GUI_GetScreenOptions();
	}
	
	void OnHide(int p0,int p1,int p2)
	{
		::Message("OnHide "+p0+" "+p1+" "+p2+".");
	}
	
	void OnMove(int posX,int posY)
	{
		::Message("OnMove posX "+posX+" posY "+posY);
		::Message("equal posX "+ScreenOpt.GetPosX()+" posY "+ScreenOpt.GetPosY());
	}
	
	void OnInit()
	{
		@InputBoxOpt=GUI_GetElementOptions();
	}
	
	void OnKeyPress(uint8 key,uint8 letter)
	{
		string letter_=" ";
		letter_[0]=(letter!=0?letter:63);
		::Message("OnKeyPress key code "+key+" letter "+letter_+".");
	}
	
	IGUIScreenOpt@ScreenOpt;
	IGUIElementOpt@InputBoxOpt;
}

void InitTestScreen()
{
	TestScreenButtonShow buttonShow;
	GUI_AddScreenElement((5),"ebut_out.frm",150,40)
	.CallbackMouseClick(buttonShow)
	.DownPic("ebut_in.frm");
	
	TestScreen testScreen;
	GUI_CreateScreen((40),"automap.frm")
	.CallbackShow(testScreen)
	.CallbackHide(testScreen)
	.CallbackMove(testScreen)
	.CanMove(true)
	
	.Modal(false)
	.Multiinstance(true);
	
	TestScreenButton buttonExit;
	GUI_AddScreenElement((40),"ebut_out.frm",10,200)
	.CallbackMouseClick(buttonExit)
	.DownPic("ebut_in.frm");
	
	TestScreenButton2 buttonAction;
	GUI_AddScreenElement((40),"ageoff.frm",70,50)
	.CallbackMouseClick(buttonAction)
	.DownPic("ageon.frm")
	.Text("action",(5),((uint((0xFF<<24)|(((0xFF)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0xAA)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008)|(0x0001));
	
	GUI_AddScreenElement((40),"charwin.frm",170,60)
	.CallbackInit(testScreen)
	.CallbackKeyPress(testScreen)
	.Text("type here",(5),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xAA)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0xC8)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008))
	.TextInput(true,50,((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xFF)&0xFF)<<8)|((0)&0xFF)))));
}
