// Author: cvet
// Server and client stuff for radio
#include "_macros.fos"
#include "_client_defines.fos"
#include "_colors.fos"
#include "_msgstr.fos"
#include "sprite.fos"

import int GUI_GetActiveMainScreen() from "client_gui";
import int GUI_GetActiveScreen() from "client_gui";
import int GetIniValue( string& iniKey, int defaultValue ) from "ini_parser";
import int[] @ GetIniValues2( string & iniKey, int[] @ defaultValues ) from "ini_parser";

#define TAB_SPRITE_LENGTH    ( 127 )

Sprite TabPic;
int[]  Position;
int    StepX;
int    StepY;
bool   LevelUp;
int    CurTab;

bool   IsHeavyDmg;    // pm added
bool   IsBullOver;    // pm added
bool   IsBleed;       // pm added
bool   IsBldTox;      // pm added

void InitChosenTabs() // Export
{
    TabPic.LoadByIni( "ChosenTabPic", PT_ART_INTRFACE );
    Position = GetIniValues2( "ChosenTab", null );
    StepX = GetIniValue( "ChosenTabStepX", 0 );
    StepY = GetIniValue( "ChosenTabStepY", 5 );
    if( StepX != 0 )
        StepX += TabPic.Width;
    if( StepY != 0 )
        StepY += TabPic.Height;
    LevelUp = false;
    CurTab = 0;

    IsHeavyDmg = false;                 // pm added
    IsBullOver = false;                 // pm added
    IsBleed = false;                    // pm added
    IsBldTox = false;                   // pm added
}

void SetChosenTabLevelUp( bool enable ) // Export
{
    LevelUp = enable;
}

void SetChosenTabHeavyDmg( bool enable ) // Export
{
    IsHeavyDmg = enable;
}

void SetChosenTabBullOver( bool enable ) // Export
{
    IsBullOver = enable;
}

void SetChosenTabBleed( bool enable ) // Export
{
    IsBleed = enable;
}

void SetChosenTabBldTox( bool enable ) // Export
{
    IsBldTox = enable;
}


void DrawChosenTabs() // Export
{
    if( GUI_GetActiveMainScreen() != CLIENT_MAIN_SCREEN_GAME )
        return;

    CritterCl@ chosen = GetChosen();
    if( not valid( chosen ) )
        return;

    if( LevelUp && ( GUI_GetActiveMainScreen() != CLIENT_MAIN_SCREEN_GAME ||
                     GUI_GetActiveScreen() == CLIENT_SCREEN_CHARACTER || GUI_GetActiveScreen() == CLIENT_SCREEN_PERK ) )
        LevelUp = false;

    CurTab = 0;

    if( chosen.Mode[ MODE_HIDE ] != 0 )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_HIDEMODE_TITLE ), COLOR_DGREEN );
		
	if( chosen.Mode[ MODE_NO_RUN ] > 1 )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_RELOAD_TITLE ), COLOR_DGREEN );

    if( LevelUp )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_LEVELUP_TITLE ), COLOR_DGREEN );

    if( chosen.IsOverweight() )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_OVERWEIGHT_TITLE ), COLOR_DRED );

    if( (chosen.Damage[ DAMAGE_POISONED ] != 0 ) || ( chosen.Damage[ DAMAGE_RADIATED ] != 0 )) 
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_POISONED_TITLE ), COLOR_DRED );

    /*if( chosen.Damage[ DAMAGE_RADIATED ] != 0 )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_RADIATED_TITLE ), COLOR_DRED );*/

    if( chosen.IsInjured() )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_INJURED_TITLE ), COLOR_DRED );

    if( chosen.IsAddicted() )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_ADDICTED_TITLE ), COLOR_DRED );

    if( chosen.Timeout[ TO_TRANSFER ] > 0 )
        DrawTab( /*GetMsgStr(TEXTMSG_GAME, STR_TIMEOUT_TITLE)*/ "Переход : VALUE", chosen.Timeout[ TO_TRANSFER ] /* / 1000*/, COLOR_DRED );

    if( chosen.Timeout[ TO_DEATH ] > 0 )
        DrawTab( /*GetMsgStr(TEXTMSG_GAME, STR_TIMEOUT_TITLE)*/ "Смерть : VALUE", chosen.Timeout[ TO_DEATH ] /* / 1000*/, COLOR_DRED );

    if( IsTurnBased() && chosen.IsTurnBasedTurn() )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_YOU_TURN_TITLE ), GetTurnBasedTime() / 1000, COLOR_DGREEN );

    if( IsTurnBased() && !chosen.IsTurnBasedTurn() )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_TURN_BASED_TITLE ), COLOR_DGREEN );

    if( FLAG( chosen.StatBase[ ST_CRSTATUS ], CR_STATUS_HEAVY_DMG ) )                           // pm added
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_HEAVY_DMG_TITLE ), COLOR_DRED );
    if( FLAG( chosen.StatBase[ ST_CRSTATUS ], CR_STATUS_BULLET_OVER ) )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_BULLET_OVER_TITLE ), COLOR_DRED );
    // if(FLAG(chosen.StatBase[ST_CRSTATUS], CR_STATUS_BLEED))
    //	DrawTab(GetMsgStr(TEXTMSG_GAME, STR_BLEED_TITLE), COLOR_DRED);			//old bleed
    if( chosen.StatBase[ ST_BLEED ] > 0 )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_BLEED_TITLE ), COLOR_DRED );                      // new bleed
    if( FLAG( chosen.StatBase[ ST_CRSTATUS ], CR_STATUS_BLOOD_TOXIC ) )
        DrawTab( GetMsgStr( TEXTMSG_GAME, STR_BLOOD_TOXIC_TITLE ), COLOR_DRED );



    uint8 hunger = chosen.StatBase[ ST_HUNGER ];
    uint8 thrist = chosen.StatBase[ ST_THRIST ];
    uint8 dyspnea = chosen.StatBase[ ST_DYSPNEA ];

    if( hunger <= 90 )
    {
        string msg = "Голод";
        
           if(hunger > 50 && hunger <= 75){
                msg = "Голод";
           }else if(hunger > 30 && hunger <= 50){
                msg = "Сильный Голод";
           }else if(hunger > 10 && hunger <= 30){
                msg = "Истощение";
           }else if(hunger <= 10){
                msg = "Сильное Истощение";
           }

        uint color = __GetGradient( COLOR_GREEN, COLOR_DRED, hunger );

        DrawTab( msg, color );
    }

    if( thrist <= 90 )
    {
        string msg = "Жажда";
   
           if(thrist > 50 && thrist <= 90){
                msg = "Жажда";
           }else if(thrist > 30 && thrist <= 50){
                msg = "Сильная Жажда";
           }else if(thrist > 10 && thrist <= 30){
                msg = "Обезвоживаение";
           }else if(thrist <= 10){
                msg = "Сил.Обезвоживаение";
           }
 
        uint color = __GetGradient( COLOR_GREEN, COLOR_DRED, thrist );

        DrawTab( msg, color );
    }

    if( dyspnea <= 90 )
    {
        string msg = "Удушье";
        
           if(dyspnea > 50 && dyspnea <= 75){
                msg = "Нехватка Воздуха";
           }else if(dyspnea > 30 && dyspnea <= 50){
                msg = "Сильная Нехватка";
           }else if(dyspnea > 10 && dyspnea <= 30){
                msg = "Удушье";
           }else if(dyspnea <= 10){
                msg = "Сильное Удушье";
           }
        
        uint color = __GetGradient( COLOR_GREEN, COLOR_DRED, dyspnea );
        DrawTab( msg, color );
    }
}

void DrawTab( string@ text, uint color )
{
    bool offsetY = false;

    if( Position[ 0 ] + StepX * ( CurTab + 1 ) > __ScreenWidth )
    {
        offsetY = true;
    }

    uint8 tempTab = CurTab;

    if( offsetY )
    {
        tempTab -= __ScreenWidth / TAB_SPRITE_LENGTH;
    }

    TabPic.Draw( Position[ 0 ] + tempTab * StepX, Position[ 1 ] + tempTab * StepY + ( offsetY ? 25 : 0 ) );
    DrawText( text, Position[ 0 ] + tempTab * StepX, Position[ 1 ] + tempTab * StepY + ( offsetY ? 25 : 0 ), TabPic.Width, TabPic.Height, color, FONT_FALLOUT, FT_CENTERXY );
    CurTab++;
}

void DrawTab( string@ text, int value, uint color )
{

    bool offsetY = false;

    if( Position[ 0 ] + StepX * ( CurTab + 1 ) > __ScreenWidth )
    {
        offsetY = true;
    }

    uint8 tempTab = CurTab;

    if( offsetY )
    {
        tempTab -= __ScreenWidth / TAB_SPRITE_LENGTH;
    }

    uint16 time = value / __TimeMultiplier + 1;  // pm added

    text = ReplaceText( text, "VALUE", time );   // pm edit
    TabPic.Draw( Position[ 0 ] + tempTab * StepX, Position[ 1 ] + tempTab * StepY + ( offsetY ? 25 : 0 ) );
    DrawText( text, Position[ 0 ] + tempTab * StepX, Position[ 1 ] + tempTab * StepY + ( offsetY ? 25 : 0 ), TabPic.Width, TabPic.Height, color, FONT_FALLOUT, FT_CENTERXY );
    CurTab++;
}
