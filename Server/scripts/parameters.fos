// Author: cvet
#include "_macros.fos"

#ifdef __CLIENT
# include "_client_defines.fos"
# include "_msgstr.fos"

import void SetChosenTabLevelUp( bool enable )  from "chosen_tabs";
import int  GUI_GetActiveScreen() from "client_gui";

import void SetChosenTabHeavyDmg( bool enable ) from "chosen_tabs"; // Export
import void SetChosenTabBullOver( bool enable ) from "chosen_tabs"; // Export
import void SetChosenTabBleed( bool enable ) from "chosen_tabs";    // Export
import void SetChosenTabBldTox( bool enable ) from "chosen_tabs";   // Export


#endif // __CLIENT

#ifndef __CLIENT
import void PerkUp( Critter& cr, uint perk ) from "perks";
import void PerkDown( Critter& cr, uint perk ) from "perks";
#endif // __CLIENT

#ifdef __SERVER
import void ChangeCritterSpeed( Critter& cr ) from "speed";
#endif // __SERVER

#ifndef __CLIENT


    //SetParameterChangeBehaviour( QST_FACTION, "parameters@changedFaction" );
    //SetParameterGetBehaviour( QST_FACTION, "parameters@get_Faction" );
/*

        "0 - без фракции" );
        "1 - администрация" );
        "2 - полиция" );
        "3 - мафия" );
        "4 - мутанты" );
        5 - форт" );
        "6 - рейдеры" );
        "7 - Шериф" );
        "8 - Мэр" );
*/

bool CheckReverse_Faction = false;

void changedFaction( Critter& critter, uint index, int oldValue )
{
	int current = critter.ParamBase[ index ];
	if( current != oldValue )
	{
		FileObject @modoc = objectManager.ProtoObject[ "ContentInfo:" + LOCATION_Modoc ];
		switch( current )
		{
			case 1:
			{
				string@ var = modoc.GlobalData[ "AdminList" ];
				var += GetPlayerName( critter.Id ) + "\n";
			} break;
			
			case 2:
			{
				string@ var = modoc.GlobalData[ "CopList" ];
				var += GetPlayerName( critter.Id ) + "\n";
				
			} break;
			
			case 7:
			{
				string@ var = modoc.GlobalData[ "Sheriff" ];
				var = GetPlayerName( critter.Id );
				
			} break;
			
			case 8:
			{
				string@ var = modoc.GlobalData[ "Mayor" ];
				var = GetPlayerName( critter.Id );
			} break;			
			
			default: break;
		}
		
		switch( oldValue )
		{
			case 1:
			{
				string@ 	var = modoc.GlobalData[ "AdminList" ],
							name = GetPlayerName( critter.Id );
				string@[] list = splitEx( var, "\n" );
				
				for( uint i = 0, iEnd = list.length(); i < iEnd; i++ )
					if( list[i] == name )
					{
						list.removeAt( i );
						var = join( list, "\n" );
						break;
					}
			} break;
			
			case 2:
			{
				string@ 	var = modoc.GlobalData[ "CopList" ],
							name = GetPlayerName( critter.Id );
				string@[] list = splitEx( var, "\n" );
				
				for( uint i = 0, iEnd = list.length(); i < iEnd; i++ )
					if( list[i] == name )
					{
						list.removeAt( i );
						var = join( list, "\n" );
						break;
					}
				
			} break;
			
			case 7:
			{
				string@ var = modoc.GlobalData[ "Sheriff" ];
				if( var == GetPlayerName( critter.Id ) )
					var = "";
				
			} break;
			
			case 8:
			{
				string@ var = modoc.GlobalData[ "Mayor" ];
				if( var == GetPlayerName( critter.Id ) )
					var = "";
			} break;			
			
			default: break;
		}
	}
}

int get_Faction( Critter& critter, uint index )
{
	int current = critter.ParamBase[ index ];
	if( CheckReverse_Faction = false )
	{
		CheckReverse_Faction = true;
		if( current == 7 )
		{
			FileObject @modoc = objectManager.ProtoObject[ "ContentInfo:" + LOCATION_Modoc ];
			string@ var = modoc.GlobalData[ "Sheriff" ];
			if( var == GetPlayerName( critter.Id ) )
				return current;
			critter.ParamBase[ index ] = 0;
		}
		else if( current == 8 )
		{
			FileObject @modoc = objectManager.ProtoObject[ "ContentInfo:" + LOCATION_Modoc ];
			string@ var = modoc.GlobalData[ "Mayor" ];
			if( var == GetPlayerName( critter.Id ) )
				return current;
			critter.ParamBase[ index ] = 0;				
		}
		CheckReverse_Faction = false;
	}
	return current;
}

void changedParam_Hp( Critter& cr, uint, int oldValue )
{
    int curHp = cr.StatBase[ ST_CURRENT_HP ];
    if( curHp <= 0 && cr.IsLife() )
        cr.StatBase[ ST_CURRENT_HP ] = 1;
    if( curHp < __DeadHitPoints && !cr.IsDead() )
        cr.StatBase[ ST_CURRENT_HP ] = __DeadHitPoints + 1;
    if( curHp > cr.Stat[ ST_MAX_LIFE ] )
        cr.StatBase[ ST_CURRENT_HP ] = cr.Stat[ ST_MAX_LIFE ];
}

void changedParam_Experience( Critter& cr, uint, int oldValue )
{
    int exp = cr.StatBase[ ST_EXPERIENCE ] - oldValue;
    if( exp > 0 )
    {
        uint level = cr.Stat[ ST_LEVEL ];
        if( level >= __LevelCap && not __LevelCapAddExperience )
            return;
		
		exp *= ((cr.Stat[ ST_INTELLECT]+cr.Stat[ST_CHARISMA]) * 0.1);
		exp += ( exp * 100 * cr.Perk[ PE_SWIFT_LEARNER ] ) / 300;
		exp *= 3;

        cr.StatBase[ ST_EXPERIENCE ] = oldValue + exp;

        if( level >= __LevelCap )
            return;

        int perkUp = ( cr.Trait[ TRAIT_SKILLED ] != 0 ? 4 : 3 );
        while( true )
        {
            if( cr.StatBase[ ST_EXPERIENCE ] >= NextLevelNeedExp( cr ) )
            {
                level++;
                cr.StatBase[ ST_LEVEL ]++;

				if( !cr.LevelUpNoProccess )
				{
					cr.StatBase[ ST_UNSPENT_SKILL_POINTS ] += 5 + cr.StatBase[ ST_INTELLECT ] * 2; // Skill points
					if( cr.Trait[ TRAIT_SKILLED ] != 0 )
						cr.StatBase[ ST_UNSPENT_SKILL_POINTS ] += 5;                               // Skilled trait
					// if(cr.Trait[TRAIT_GIFTED]!=0) cr.StatBase[ST_UNSPENT_SKILL_POINTS]-=5; // Gifted trait
					cr.StatBase[ ST_UNSPENT_SKILL_POINTS ] += cr.Perk[ PE_EDUCATED ] * 2;          // Educated perk
					//if( cr.StatBase[ ST_UNSPENT_SKILL_POINTS ] > 99 )
					//	cr.StatBase[ ST_UNSPENT_SKILL_POINTS ] = 99;                               // Clamp skill points
					// cr.StatBase[ST_MAX_LIFE]+=2+cr.StatBase[ST_ENDURANCE]/2+cr.Perk[PE_LIFEGIVER]*4; // Add max hp //Roleplay
					// cr.StatBase[ST_MAX_LIFE]+=2+cr.Perk[PE_LIFEGIVER]*4; // combat system
					// cr.StatBase[ST_MAX_LIFE]+=cr.Perk[PE_LIFEGIVER]*4; //qthree
					if( ( level % 3 ) == 0 )
						cr.StatBase[ ST_MAX_LIFE ] += cr.StatBase[ ST_ENDURANCE ];                        // qthree

					if( ( level % perkUp ) == 0 )
					{
						cr.StatBase[ ST_UNSPENT_PERKS ]++;
					}
				}
            }
            else
                break;
        }
		
		if( cr.LevelUpNoProccess )
			cr.LevelUpNoProccess = false;
    }
}

void changedParam_Perks( Critter& cr, uint perk, int oldValue )
{
    int curValue = cr.Param[ perk ];
    if( curValue > oldValue )
        for( uint i = 0, j = curValue - oldValue; i < j; i++ )
            PerkUp( cr, perk );
    else if( curValue < oldValue )
        for( uint i = 0, j = oldValue - curValue; i < j; i++ )
            PerkDown( cr, perk );
}

void changedParam_Hide( Critter& cr, uint, int oldValue )
{
    cr.RefreshVisible();
}

void changedParam_FastShot( Critter& cr, uint, int oldValue )
{
//    cr.ModeBase[ MODE_NO_AIM ] = ( cr.Trait[ TRAIT_FAST_SHOT ] != 0 ? 1 : 0 );
}

int NextLevelNeedExp( Critter& cr ) // Export
{
    int level = cr.Stat[ ST_LEVEL ];
    return NUMERICAL_NUMBER( level ) * 1000;
}

int getParamDialog_Intellect( Critter@ master, Critter@ slave, uint index )
{
    if( valid( master ) )
        return master.Stat[ ST_INTELLECT ] + 2 * master.Perk[ PE_SMOOTH_TALKER ];
    return 0;
}

int getParamDialog_Reputation( Critter@ master, Critter@ slave, uint index )
{
    if( valid( master ) )
    {
        if( master.ReputationBase[ index ] == int(0x80000000) )
            master.ReputationBase[ index ] = 0;
        return master.ReputationBase[ index ];
    }
    return 0;
}
#endif

#ifdef __CLIENT
void changedParam_Level( CritterCl& cr, uint, int oldValue )
{
    if( cr.ParamBase[ ST_LEVEL ] > oldValue )
    {
        PlaySound( "LEVELUP.ACM" );
        Message( TEXTMSG_GAME, STR_GAIN_LEVELUP, FOMB_GAME );
        SetChosenTabLevelUp( true );
    }
}

void changedParam_Experience( CritterCl& cr, uint, int oldValue )
{
    int curValue = cr.ParamBase[ ST_EXPERIENCE ];
    if( curValue > oldValue )
        Message( ReplaceText( GetMsgStr( TEXTMSG_GAME, STR_GAIN_EXPERIENCE ), "VALUE", curValue - oldValue ), FOMB_GAME );
}

void changedParam_UnspentPerks( CritterCl& cr, uint, int oldValue )
{
    if( cr.ParamBase[ ST_UNSPENT_PERKS ] > 0 && GUI_GetActiveScreen() == CLIENT_SCREEN_CHARACTER )
        ShowScreen( CLIENT_SCREEN_PERK, 0, 0, 0 );
}

void changedParam_CritterStatus( CritterCl& cr, uint, int oldValue ) // pm added
{
    SetChosenTabHeavyDmg( FLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_HEAVY_DMG ) ? true : false );
    SetChosenTabBullOver( FLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_BULLET_OVER ) ? true : false );
    SetChosenTabBleed( FLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_BLEED ) ? true : false );
    SetChosenTabBldTox( FLAG( cr.StatBase[ ST_CRSTATUS ], CR_STATUS_BLOOD_TOXIC ) ? true : false );
}
#endif

#ifdef __SERVER
import void InjureCritter( Critter& cr, uint dmg, uint dmgType, uint8 dir, uint attackerId ) from "combat";

void changedParam_Hunger( Critter& cr, uint, int oldValue )
{
    cr.StatBase[ ST_HUNGER ] = CLAMP( cr.StatBase[ ST_HUNGER ], 0, 100 );

    if( cr.StatBase[ ST_HUNGER ] <= 0 && !cr.IsDead() )
    {
        InjureCritter( cr, 100 / cr.Stat[ ST_ENDURANCE ], DAMAGE_NORMAL, cr.Dir, 0 );
    }
}

void changedParam_Thrist( Critter& cr, uint, int oldValue )
{
    cr.StatBase[ ST_THRIST ] = CLAMP( cr.StatBase[ ST_THRIST ], 0, 100 );

    if( cr.StatBase[ ST_THRIST ] <= 0 && !cr.IsDead() )
    {
        InjureCritter( cr, 100 / cr.Stat[ ST_ENDURANCE ], DAMAGE_NORMAL, cr.Dir, 0 );
    }
}

void changedParam_Dyspnea( Critter& cr, uint, int oldValue )
{
    cr.StatBase[ ST_DYSPNEA ] = CLAMP( cr.StatBase[ ST_DYSPNEA ], 0, 100 );

    if( cr.StatBase[ ST_DYSPNEA ] <= 0 && !cr.IsDead() && cr.Param[ QST_GAMEMODE ] != GAME_START && ( cr.GetAccess() < ACCESS_MODER || cr.Param[ QST_GAMEMODE ] == GAME_TEST ) )
    {
        cr.ToDead( Random( 0, 1 ) > 0 ? ANIM2_DEAD_FRONT : ANIM2_DEAD_BACK, null );
        cr.Say( SAY_NETMSG, "Вы умерли от удушья." );
    }

}

void changedParam_SpeedMod( Critter& cr, uint, int oldValue )
{
    ChangeCritterSpeed( cr );
}

void changedParam_Luck( Critter& cr, uint, int oldValue ) {
	//cr.StatBase[ ST_CRITICAL_CHANCE_EXT ] = cr.StatBase[ST_LUCK] * 2;
}

#endif // __SERVER

/*#ifdef __CLIENT Good/Evil system, not used
   #include "_colors.fos"

   void changedParam_GoodEvilList(CritterCl& chosen, uint index, int oldValue)
   {
        if(chosen.IsChosen())
        {
                if(oldValue!=0)
                {
                        int id=oldValue&0x7FFFFFFF;
                        CritterCl@ cr=::GetCritter(id);
                        if(valid(cr))
                        {
                                cr.NameColor=COLOR_CRITTER_NAME;
                                cr.ContourColor=COLOR_CONTOUR_YELLOW;
                        }
                }

                if(chosen.GoodEvilList[index]!=0)
                {
                        int id=chosen.GoodEvilList[index];
                        bool isEvil=FLAG(id,0x80000000);
                        if(isEvil) id^=0x80000000;
                        CritterCl@ cr=::GetCritter(id);
                        if(valid(cr))
                        {
                                cr.NameColor=(isEvil?COLOR_RED:COLOR_GREEN);
                                cr.ContourColor=(isEvil?COLOR_CONTOUR_RED:COLOR_CONTOUR_GREEN);
                        }
                }
        }
   }
 #endif*/


// Parameters generation
// For server and client
// Both generation need be equal
// Input for player: 7 special, 3 tag skills, 2 traits, age, gender
// Imput for npc: data from prototype
#ifndef __CLIENT
# define _param_    cr.ParamBase
void CritterGenerate( Critter& cr ) // Export to main@critter_init
#endif
#ifdef __CLIENT
# define _param_    data
void CritterGenerate( int[]& data ) // Export to client_main@player_data_generate
#endif
{
    if( _param_[ ST_LEVEL ] <= 0 )
        _param_[ ST_LEVEL ] = 1;

    if( _param_[ TRAIT_SMALL_FRAME ] != 0 )
        _param_[ ST_AGILITY ] += 1;
    if( _param_[ TRAIT_BRUISER ] != 0 )
        _param_[ ST_STRENGTH ] += 2;
    if( _param_[ TRAIT_GOOD_NATURED ] != 0 )
    {
        _param_[ SK_FIRST_AID ] += 15;
        _param_[ SK_DOCTOR ] += 15;
        _param_[ SK_SPEECH ] += 15;
        _param_[ SK_BARTER ] += 15;
        _param_[ SK_SMALL_GUNS ] -= 10;
        _param_[ SK_BIG_GUNS ] -= 10;
        _param_[ SK_ENERGY_WEAPONS ] -= 10;
        _param_[ SK_UNARMED ] -= 10;
        _param_[ SK_MELEE_WEAPONS ] -= 10;
        _param_[ SK_THROWING ] -= 10;
    }
    // if(_param_[TRAIT_GIFTED]!=0)
    // {
    //	for(uint i=ST_STRENGTH;i<=ST_LUCK;i++) _param_[i]++;
    //	for(uint i=SKILL_BEGIN;i<=SKILL_END;i++) _param_[i]-=10;
    // }

    _param_[ SK_SMALL_GUNS ] += 5 + 4 * _param_[ ST_AGILITY ];
    _param_[ SK_BIG_GUNS ] += 0 + 2 * _param_[ ST_AGILITY ];
    _param_[ SK_ENERGY_WEAPONS ] += 0 + 2 * _param_[ ST_AGILITY ];
    _param_[ SK_UNARMED ] += 30 + 2 * ( _param_[ ST_AGILITY ] + _param_[ ST_STRENGTH ] );
    _param_[ SK_MELEE_WEAPONS ] += 20 + 2 * ( _param_[ ST_AGILITY ] + _param_[ ST_STRENGTH ] );
    _param_[ SK_THROWING ] += 0 + 4 * _param_[ ST_AGILITY ];
    _param_[ SK_FIRST_AID ] += 0 + 2 * ( _param_[ ST_PERCEPTION ] + _param_[ ST_INTELLECT ] );
    _param_[ SK_DOCTOR ] += 5 + _param_[ ST_PERCEPTION ] + _param_[ ST_INTELLECT ];
    _param_[ SK_SNEAK ] += 5 + 3 * _param_[ ST_AGILITY ];
    _param_[ SK_LOCKPICK ] += 10 + _param_[ ST_PERCEPTION ] + _param_[ ST_AGILITY ];
    _param_[ SK_STEAL ] += 0 + 3 * _param_[ ST_AGILITY ];
    _param_[ SK_TRAPS ] += 10 + _param_[ ST_PERCEPTION ] + _param_[ ST_AGILITY ];
    _param_[ SK_SCIENCE ] += 0 + 4 * _param_[ ST_INTELLECT ];
    _param_[ SK_REPAIR ] += 0 + 3 * _param_[ ST_INTELLECT ];
    _param_[ SK_SPEECH ] += 0 + 5 * _param_[ ST_CHARISMA ];
    _param_[ SK_BARTER ] += 0 + 4 * _param_[ ST_CHARISMA ];
    _param_[ SK_GAMBLING ] += 0 + 5 * _param_[ ST_LUCK ];
    _param_[ SK_OUTDOORSMAN ] += 0 + 2 * ( _param_[ ST_ENDURANCE ] + _param_[ ST_INTELLECT ] );

    if( _param_[ TAG_SKILL1 ] != 0 )
        _param_[ _param_[ TAG_SKILL1 ] ] += 30;                      // Roleplay
    if( _param_[ TAG_SKILL2 ] != 0 )
        _param_[ _param_[ TAG_SKILL2 ] ] += 30;                      // Roleplay
    if( _param_[ TAG_SKILL3 ] != 0 )
        _param_[ _param_[ TAG_SKILL3 ] ] += 30;                      // Roleplay

    if( _param_[ TRAIT_FAST_METABOLISM ] != 0 )
    {
        _param_[ ST_RADIATION_RESISTANCE ] -= _param_[ ST_ENDURANCE ] * 2;
        _param_[ ST_POISON_RESISTANCE ] -= _param_[ ST_ENDURANCE ] * 5;
        _param_[ ST_HEALING_RATE ] += 2;
    }
    if( _param_[ TRAIT_BRUISER ] != 0 )
        _param_[ ST_ACTION_POINTS ] -= 2;
    if( _param_[ TRAIT_KAMIKAZE ] != 0 )
    {
        _param_[ ST_ARMOR_CLASS ] -= _param_[ ST_AGILITY ];
        _param_[ ST_SEQUENCE ] += 5;
    }
    if( _param_[ TRAIT_HEAVY_HANDED ] != 0 )
        _param_[ ST_MELEE_DAMAGE ] += 4;
    if( _param_[ TRAIT_FINESSE ] != 0 )
        _param_[ ST_CRITICAL_CHANCE ] += 10;
    if( _param_[ TRAIT_HEAVY_HANDED ] != 0 )
        _param_[ ST_MAX_CRITICAL ] -= 30;
    //if( _param_[ TRAIT_FAST_SHOT ] != 0 )
    //    _param_[ MODE_NO_AIM ] = 1;

    #ifdef __CLIENT
    // Runtime calculations, only for client registration
    _param_[ ST_ARMOR_CLASS ] += _param_[ ST_AGILITY ] * 5;
//	_param_[ST_MAX_LIFE]+=_param_[ST_STRENGTH]+_param_[ST_ENDURANCE]*2; //Roleplay
//	_param_[ST_MAX_LIFE]+=_param_[ST_ENDURANCE]*22; //combat system
    _param_[ ST_MAX_LIFE ] += _param_[ ST_STRENGTH ] * 4 + _param_[ ST_ENDURANCE ] * 8; // qthree
    _param_[ ST_ACTION_POINTS ] += _param_[ ST_AGILITY ] / 2;
    _param_[ ST_CARRY_WEIGHT ] += LBS_TO_GRAMM( 25 + _param_[ ST_STRENGTH ] * ( 25 - _param_[ TRAIT_SMALL_FRAME ] * 10 ) );
    _param_[ ST_MELEE_DAMAGE ] += ( _param_[ ST_STRENGTH ] > 6 ? _param_[ ST_STRENGTH ] - 5 : 1 );
    _param_[ ST_POISON_RESISTANCE ] += _param_[ ST_ENDURANCE ] * 5;
    _param_[ ST_RADIATION_RESISTANCE ] += _param_[ ST_ENDURANCE ] * 2;
    _param_[ ST_SEQUENCE ] += _param_[ ST_PERCEPTION ] * 2;
    _param_[ ST_HEALING_RATE ] += MAX( 1, _param_[ ST_ENDURANCE ] / 3 );
    _param_[ ST_CRITICAL_CHANCE ] += _param_[ ST_LUCK ] * 2;
    #endif

//	_param_[ST_MAX_LIFE]+=LIFEBONUS; //Roleplay
//	_param_[ST_MAX_LIFE]+=0; //combat system
    _param_[ ST_ACTION_POINTS ] += 5;
    _param_[ ST_CURRENT_HP ] = _param_[ ST_MAX_LIFE ];
    _param_[ ST_CURRENT_AP ] = _param_[ ST_ACTION_POINTS ] * 100;
    _param_[ ST_EXPERIENCE_MULTIPLIER ] = 1;

    _param_[ ST_HUNGER ] = 100;
    _param_[ ST_THRIST ] = 100;
    _param_[ ST_DYSPNEA ] = 100;
    _param_[ ST_SPEED_MOD ] = 100;
}

#ifdef __CLIENT
# include "_msgstr.fos"

# define STR_WRONG_GENDER    ( 324 )
// Check valid of input data
bool CritterGenerateCheck( int[]& data ) // Export to client_main@player_data_check
{
    // Check special
    int special = 0;
    for( uint i = ST_STRENGTH; i <= ST_LUCK; i++ )
    {
        if( data[ i ] < 1 || data[ i ] > 10 )
        {
            Message( GetMsgStr( TEXTMSG_GAME, STR_NET_WRONG_SPECIAL ) );
            return false;
        }
        special += data[ i ];
    }
    if( special != __StartSpecialPoints )
    {
        Message( GetMsgStr( TEXTMSG_GAME, STR_NET_WRONG_SPECIAL ) );
        return false;
    }

	/*
	bool[] isBattleTag = { false, false, false };
	if( data[ TAG_SKILL1 ] >= int(SK_SMALL_GUNS) && data[ TAG_SKILL1 ] < int(SK_FIRST_AID) ) 
		isBattleTag[0] = true;
	if( data[ TAG_SKILL2 ] >= int(SK_SMALL_GUNS) && data[ TAG_SKILL2 ] < int(SK_FIRST_AID) ) 
		isBattleTag[1] = true;
	if( data[ TAG_SKILL3 ] >= int(SK_SMALL_GUNS) && data[ TAG_SKILL3 ] < int(SK_FIRST_AID) ) 
		isBattleTag[2] = true;

	if( isBattleTag[0] && isBattleTag[1] && isBattleTag[2] ) 
	{
		Message( "Хотя бы один тагнутый навык должен быть небоевым!" );
		return false;
	}
	*/
	
	// Check choosed tag skills
    if( ( data[ TAG_SKILL1 ] < int(SKILL_BEGIN) || data[ TAG_SKILL1 ] > int(SKILL_END) ) ||
        ( data[ TAG_SKILL2 ] < int(SKILL_BEGIN) || data[ TAG_SKILL2 ] > int(SKILL_END) ) ||
        ( data[ TAG_SKILL3 ] < int(SKILL_BEGIN) || data[ TAG_SKILL3 ] > int(SKILL_END) ) )
    {
        Message( GetMsgStr( TEXTMSG_GAME, STR_NET_WRONG_TAGSKILL ) );
        return false;
    }

    // girl
    // 33 34 35 36 37 38 61 63 73 74 83 94
    if( data[ ST_GENDER ] == 0 )
    {
        if( ( ( data[ ST_BODY_TYPE ] >= 33 && data[ ST_BODY_TYPE ] <= 38 ) || data[ ST_BODY_TYPE ] == 61 || data[ ST_BODY_TYPE ] == 63 || data[ ST_BODY_TYPE ] == 73 || data[ ST_BODY_TYPE ] == 74 || data[ ST_BODY_TYPE ] == 83 || data[ ST_BODY_TYPE ] == 94 ) )
        {
            Message( GetMsgStr( TEXTMSG_GAME, STR_WRONG_GENDER ) );
            return false;
        }
    }
    else
    {
        if( data[ ST_BODY_TYPE ] == 31 || ( data[ ST_BODY_TYPE ] >= 39 && data[ ST_BODY_TYPE ] <= 45 ) || data[ ST_BODY_TYPE ] == 48 || data[ ST_BODY_TYPE ] == 56 || data[ ST_BODY_TYPE ] == 57 || data[ ST_BODY_TYPE ] == 62 || data[ ST_BODY_TYPE ] == 64 || data[ ST_BODY_TYPE ] == 72  || data[ ST_BODY_TYPE ] == 77 ||
            data[ ST_BODY_TYPE ] == 78 || data[ ST_BODY_TYPE ] == 82 || data[ ST_BODY_TYPE ] == 84 || data[ ST_BODY_TYPE ] == 87 || data[ ST_BODY_TYPE ] == 88 || data[ ST_BODY_TYPE ] == 89 || data[ ST_BODY_TYPE ] == 91 || data[ ST_BODY_TYPE ] == 92 || data[ ST_BODY_TYPE ] == 93 || data[ ST_BODY_TYPE ] == 96 || data[ ST_BODY_TYPE ] == 98 )
        {
            Message( GetMsgStr( TEXTMSG_GAME, STR_WRONG_GENDER ) );
            return false;
        }
    }

    if( data[ ST_BODY_TYPE ] == 0 )
        data[ ST_BODY_TYPE ] = ( data[ ST_GENDER ] == 0 ? 62 : 61 );
    // guys
    // 98 96 93 92 91 89 88 87 84 82 78 77 72 64 62 57 56 48 45 44 43 42 41 40 39 31

    return true;
}
#endif

#ifndef __CLIENT
void NpcProcessLevel( Critter& npc ) // Export
{
    for( int i = 0, j = npc.Stat[ ST_LEVEL ]; i < j; i++ )
    {
        // Todo: ...
        // npc.StatBase[ST_MAX_LIFE]+=10;
    }
}
#endif

#ifdef __CLIENT
# define Critter                   CritterCl
# define Item                      ItemCl
#endif

int getParam_CriticalChance( Critter& cr, uint )
{
    int val = cr.StatBase[ ST_CRITICAL_CHANCE ] + cr.StatBase[ ST_CRITICAL_CHANCE_EXT ] + cr.Stat[ST_LUCK] * 2;//(getParam_Luck( cr, 0 ) * 2);
    return CLAMP( val, 0, 100 );
}

int getParam_Luck( Critter& cr, uint )
{
    int val = cr.StatBase[ ST_LUCK ] + cr.StatBase[ ST_LUCK_EXT ];
    return CLAMP( val, 1, 10 );
}
