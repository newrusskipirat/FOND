

bool LocIsModoc(uint locPid)
{
	return(locPid<=(1253));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(32)||locPid==(1216)||locPid==(43)||locPid==96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(42));
}

bool LocIsHidden(uint locPid)
{
	return false;
}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

shared interface Project
{
	string@get_Name();
	void Build();
	void SetAssociation(string@ex,string@className,string@classModule);
}

shared interface FileObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	void FormatStringData(string&nameData,string&data);
	FileObject@get_Pattern(string&name)const;
	FileObject@get_Copy(string&name);                           
	
}

shared class TimeLog
{
	uint tick;
	
	TimeLog()
	{
		refresh();
	}
	
	void refresh()
	{
		tick=GetTick();
	}
	
	bool check(uint count)
	{
		return(GetTick()-tick>=count);
	}
	
	uint get()
	{
		uint old=tick;
		refresh();
		return(tick-old);
	}
	
	void Log(string&in message)
	{
		::ClearLog(message+" ["+(GetTick()-tick)+"ms]");
	}
}

shared interface AnyDataObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	uint[]@get_SaveData();
	void InitData(uint[]&data);
}

shared interface ManagerObject
{
	FileObject@get_ProtoObject(string@name);
	void ParseProtoTypes(const string&ex,const FileObject&pattern,const string@search);
	FileObject@ParseProtoTypeFile(string&name,const string&ex,const FileObject&pattern,const string@search);
	FileObject@AddPrototype(FileObject@proto);
	FileObject@StringToFileObject(string&name,string&txt,const FileObject&pattern);
}

shared interface ValueAPI{}
shared class SettingsAPI
{
	string Name;
	bool IsDebug;
}                                                  

shared class Hexagonal
{
	Hexagonal(){Reset();}
	Hexagonal(const uint16&in x,const uint16&in y){Set(x,y);}
	Hexagonal(const Hexagonal&master){Set(master);}                                       
	
	void Set(const uint16&in x,const uint16&in y){X=x;Y=y;}
	void Set(const Hexagonal&in other){Set(other.X,other.Y);}
	void Reset(){X=Y=0;}
	uint Distantion(Hexagonal&other){return GetDistantion(X,Y,other.X,other.Y);}
	
	uint16 X;
	uint16 Y;
	
	bool opEquals(const Hexagonal&in other){return(other.X==X&&other.Y==Y);}
	Hexagonal&opAssign(const Hexagonal&in other)
	{
		Set(other);
		return this;
	}
	
	const uint get_UID(const uint w)const{return X+Y*w;}
	string get_Debug(){return"X:"+X+"Y:"+Y;}
	void Log(string&str){::Log(str+":"+Debug);}
}                            

shared class Line
{
	Line(Hexagonal&a,Hexagonal&b){@A=a;@B=b;}
	
	uint get_Length()
	{
		return B.Distantion(A);
	}
	
	uint get_Point(Hexagonal&point)
	{
		return B.Distantion(point);
	}
	
	float get_Module(Hexagonal&point)
	{
		return Point[point]/Length;
	}
	
	Hexagonal@get_opIndex(const uint&in size)
	{
		
		const float mod=float(size/Length);
		return@Hexagonal(A.X+(B.X-A.X)*mod,A.Y+(B.Y-A.Y)*mod);
	}                      
	
	string get_Debug(){return"A<"+A.Debug+">B<"+B.Debug+">";}
	void Log(string&str){::Log(str+":"+Debug);}
	
	Hexagonal@A;
	Hexagonal@B;
}                                                                                                                                              

class Sprite
{
	Sprite()
	{
		Id=0;
		Hash=0;
		Width=0;
		Height=0;
		FrmCount=0;
		DrawFrame=-1;
	}
	
	void Load(string&name,int path)
	{
		if(name.length()>0)
		Id=LoadSprite(name,path);
		else
		Id=0;
		RefreshData();
	}
	
	void Load(uint nameHash,uint8 dir)
	{
		Id=LoadSprite(nameHash,dir);
		Hash=nameHash;
		RefreshData();
	}
	
	void LoadByIni(string&iniKey,int path)
	{
		string@name=GetIfaceIniStr(iniKey);
		if(@name!=null&&name.length()>0)
		Id=LoadSprite(name,path);
		else
		Id=0;
		RefreshData();
	}
	
	void Draw(int x,int y)
	{
		if(Id!=0)
		DrawSprite(Id,DrawFrame,x,y,0);
	}
	
	void Draw(int x,int y,uint8 sprIndex)
	{
		if(Id!=0)
		DrawSprite(Id,DrawFrame,x,y,0);
	}
	
	uint GetHashName()
	{
		return Hash;
	}
	
	private void RefreshData()
	{
		if(Id!=0)
		{
			Width=GetSpriteWidth(Id,0);
			Height=GetSpriteHeight(Id,0);
			FrmCount=GetSpriteCount(Id);
			DrawFrame=-1;
		}
		else
		{
			Width=0;
			Height=0;
			FrmCount=0;
			DrawFrame=-1;
		}
	}
	
	uint Id;
	uint Hash;
	int Width;
	int Height;
	uint FrmCount;
	int DrawFrame;
}              

uint __GetColor(int r,int g,int b)
{
	r=(((r)>(255))?(255):(((r)<(0))?(0):(r)));
	g=(((g)>(255))?(255):(((g)<(0))?(0):(g)));
	b=(((b)>(255))?(255):(((b)<(0))?(0):(b)));
	return(uint((0xFF<<24)|(((r)&0xFF)<<16)|(((g)&0xFF)<<8)|((b)&0xFF)));
}

uint __GetGradient(uint colorStart,uint colorEnd,uint8 pos)
{
	pos=(((pos)>(100))?(100):(((pos)<(1))?(1):(pos)));
	
	int aS=(colorStart>>24)&0xFF,
	rS=((colorStart>>16)&0xFF),
	gS=((colorStart>>8)&0xFF),
	bS=((colorStart)&0xFF),
	
	aE=(colorEnd>>24)&0xFF,
	rE=((colorEnd>>16)&0xFF),
	gE=((colorEnd>>8)&0xFF),
	bE=((colorEnd)&0xFF); 
	
	rS=(((rE-int(rS*(pos*0.01)))>0)?(rE-int(rS*(pos*0.01))):-(rE-int(rS*(pos*0.01))));
	gS=(((gE-int(gS*(pos*0.01)))>0)?(gE-int(gS*(pos*0.01))):-(gE-int(gS*(pos*0.01))));
	bS=(((bE-int(bS*(pos*0.01)))>0)?(bE-int(bS*(pos*0.01))):-(bE-int(bS*(pos*0.01))));
	
	return __GetColor(rS,gS,bS);
}

uint __GetColor(uint8&a,uint8&r,uint8&g,uint8&b,uint color){
	a=(color>>24)&0xFF;
	r=((color>>16)&0xFF);
	g=((color>>8)&0xFF);
	b=((color)&0xFF);
	
	return 0;
}                                                                                           

string[]__critterHistoryInfo;                                                                                                                                                                                                                                                                                                                                                                                                                                   

bool IsThrowingWeapon(ItemCl@item)
{
	if(!(@item!=null))
	return false;
	if(item.GetType()!=(3))
	return false;
	uint8 use=((item.Mode)&0xF);
	return((use)==0?item.Proto.Weapon_Skill_0:((use)==1?item.Proto.Weapon_Skill_1:((use)==2?item.Proto.Weapon_Skill_2:0)))==(205);
}

uint GetMaxRange(CritterCl&cr,ItemCl@item)
{
	if(!(@item!=null))
	return 0;
	uint bonus=3*(cr.Perk[(336)]);
	uint max=3*cr.Stat[(0)];
	if(IsThrowingWeapon(item))
	{
		uint8 use=((item.Mode)&0xF);
		return bonus+(((((use)==0?item.Proto.Weapon_MaxDist_0:((use)==1?item.Proto.Weapon_MaxDist_1:((use)==2?item.Proto.Weapon_MaxDist_2:0))))<(max))?(((use)==0?item.Proto.Weapon_MaxDist_0:((use)==1?item.Proto.Weapon_MaxDist_1:((use)==2?item.Proto.Weapon_MaxDist_2:0)))):(max));
	}
	else
	{
		float lbs=0.002*item.Proto.Weight;
		lbs=(((lbs)>(1.0f))?(lbs):(1.0f));
		lbs=sqrt(lbs);
		return uint(float(max)/lbs);
	}
}

bool IsThrowable(ProtoItem&weapon)
{
	if(!(@weapon!=null))
	false;
	return!(weapon.Type==(3)&&weapon.Weapon_IsUnarmed);
}

int ThrowingToHit(CritterCl&cr,uint16 tx,uint16 ty,ProtoItem&weapon)
{
	if(!(@weapon!=null))
	return 0;
	if(weapon.Type==(3)&&weapon.Weapon_IsUnarmed)
	return 0;
	if(!cr.IsLife())
	return 0;
	
	int dist=GetDistantion(cr.HexX,cr.HexY,tx,ty);
	
	int toHit=int(cr.Skill[(205)]);
	int weaponPerk=weapon.Weapon_Perk;
	int blockers=0;  
	
	int distmod1=2;
	int distmod2=0;
	
	int perception=cr.Stat[(1)];
	int acc=dist;
	
	if(dist<distmod2)
	acc+=distmod2;
	else
	{
		if(cr.IsPlayer())
		acc-=(perception-2)*distmod1;
		else
		acc-=perception*distmod1;
	}
	
	if(-2*perception>acc)
	acc=-2*perception;
	
	acc-=2*cr.Perk[(315)];
	
	if(acc>=0)
	{
		if(cr.Damage[(502)]!=0)
		acc*=-12;
		else
		acc*=-4;
	}
	else
	acc*=-4;
	
	toHit+=acc;     
	
	blockers=GetCrittersPath(cr.HexX,cr.HexY,tx,ty,0.0f,dist,(0x01),null); 
	
	toHit-=10*blockers;
	
	if(cr.Damage[(502)]!=0)
	toHit-=25;
	toHit=(((toHit)>(95))?(95):(((toHit)<(5))?(5):(toHit)));
	return toHit;
}

int ActionPointsCost(ItemCl&item)
{
	if(IsThrowingWeapon(item))
	{
		uint8 use=((item.Mode)&0xF);
		return((use)==0?item.Proto.Weapon_ApCost_0:((use)==1?item.Proto.Weapon_ApCost_1:((use)==2?item.Proto.Weapon_ApCost_2:0)));
	}
	float lbs=0.002*item.Proto.Weight;
	lbs=(((lbs)>(1.0f))?(lbs):(1.0f));
	lbs=sqrt(lbs)+3;
	return int(lbs);
}

bool IsThrowableThere(CritterCl&cr,ItemCl@item,uint16 tx,uint16 ty)
{
	if(!(@item!=null)||!IsThrowable(item.Proto)||!cr.IsLife())
	return false;   
	
	return GetMaxRange(cr,item)>=GetDistantion(cr.HexX,cr.HexY,tx,ty);
	
}                                                                                                          

bool Active=false;
int LastCursor=0;

bool ThrowingMouseDown(int click)
{
	if(!IsThrowingActive())
	return false;
	TryThrow();
	return true;
}

bool IsThrowingActive()
{
	return Active;
}

void ThrowingKeyDown(uint8 key)
{
	if(key==0x29&&!__ConsoleActive)
	SetThrowing(true);
}

void ThrowingKeyUp(uint8 key)
{
	if(key==0x29)
	SetThrowing(false);
}

void ThrowingInputLost()
{
	SetThrowing(false);
}

void SetThrowing(bool enabled)
{
	if(enabled)
	{
		Active=true;
		LastCursor=::GetCurrentCursor();
		ChangeCursor(1);
	}
	else
	{
		Active=false;
		ChangeCursor(LastCursor);
	}
}

void RenderThrowing()
{
	if(!IsThrowingActive())
	return;
	CritterCl@chosen=GetChosen();
	if(!(@chosen!=null))
	return;
	
	uint16 hx=0,hy=0;
	if(!GetMonitorHex(__MouseX,__MouseY,hx,hy))
	return;
	
	ItemCl@item=chosen.GetItem(0,(1));
	if(!IsThrowableThere(chosen,item,hx,hy))
	return; 
	
	int x=0,y=0;
	if(!GetHexPos(hx,hy,x,y))
	return;
	
	uint tohit=::ThrowingToHit(chosen,hx,hy,item.Proto);
	int ap=::ActionPointsCost(item);
	bool hasAp=ap<=chosen.Stat[(75)]; 
	
	uint sprite=LoadSprite(item.Proto.PicInv,0);
	::DrawSprite(sprite,-1,x-50,y-15,30,30,false,false,((uint((0xFF<<24)|(((0xFF)&0xFF)<<16)|(((0xFF)&0xFF)<<8)|((0xFF)&0xFF)))));
	DrawText(tohit+"%",x+20,y-10,40,20,((uint((0xFF<<24)|(((0xAB)&0xFF)<<16)|(((0xAB)&0xFF)<<8)|((0xAB)&0xFF)))),(5),(0x0200));
	DrawText(ap+" AP",x+20,y,40,20,hasAp?((uint((0xFF<<24)|(((0xAB)&0xFF)<<16)|(((0xAB)&0xFF)<<8)|((0xAB)&0xFF)))):((uint((0xFF<<24)|(((0xC8)&0xFF)<<16)|(((0)&0xFF)<<8)|((0)&0xFF)))),(5),(0x0200));
}

void TryThrow()
{
	
	if(!IsThrowingActive())
	return;
	CritterCl@chosen=GetChosen();
	if(!(@chosen!=null))
	return;
	
	uint16 hx=0,hy=0;
	if(!GetMonitorHex(__MouseX,__MouseY,hx,hy))
	return;
	
	ItemCl@item=chosen.GetItem(0,(1));
	if(!IsThrowableThere(chosen,item,hx,hy))
	return; 
	
	RunServerScriptUnsafe("throwing@unsafe_Throw",hx,hy,0,null,null);
}

