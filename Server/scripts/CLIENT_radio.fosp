

bool LocIsModoc(uint locPid)
{
	return(locPid<=(1253));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(32)||locPid==(1216)||locPid==(43)||locPid==96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(42));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

shared interface Project
{
	string@get_Name();
	void Build();
	void SetAssociation(string@ex,string@className,string@classModule);
}

shared interface FileObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	void FormatStringData(string&nameData,string&data);
	FileObject@get_Pattern(string&name)const;
	FileObject@get_Copy(string&name);                           
	
}

shared class TimeLog
{
	uint tick;
	
	TimeLog()
	{
		refresh();
	}
	
	void refresh()
	{
		tick=GetTick();
	}
	
	bool check(uint count)
	{
		return(GetTick()-tick>=count);
	}
	
	uint get()
	{
		uint old=tick;
		refresh();
		return(tick-old);
	}
	
	void Log(string&in message)
	{
		::ClearLog(message+" ["+(GetTick()-tick)+"ms]");
	}
}

shared interface AnyDataObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	uint[]@get_SaveData();
	void InitData(uint[]&data);
}

shared interface ManagerObject
{
	FileObject@get_ProtoObject(string@name);
	void ParseProtoTypes(const string&ex,const FileObject&pattern,const string@search);
	FileObject@ParseProtoTypeFile(string&name,const string&ex,const FileObject&pattern,const string@search);
	FileObject@AddPrototype(FileObject@proto);
	FileObject@StringToFileObject(string&name,string&txt,const FileObject&pattern);
}

shared interface ValueAPI{}
shared class SettingsAPI
{
	string Name;
	bool IsDebug;
}                                                  

shared class Hexagonal
{
	Hexagonal(){Reset();}
	Hexagonal(const uint16&in x,const uint16&in y){Set(x,y);}
	Hexagonal(const Hexagonal&master){Set(master);}                                       
	
	void Set(const uint16&in x,const uint16&in y){X=x;Y=y;}
	void Set(const Hexagonal&in other){Set(other.X,other.Y);}
	void Reset(){X=Y=0;}
	uint Distantion(Hexagonal&other){return GetDistantion(X,Y,other.X,other.Y);}
	
	uint16 X;
	uint16 Y;
	
	bool opEquals(const Hexagonal&in other){return(other.X==X&&other.Y==Y);}
	Hexagonal&opAssign(const Hexagonal&in other)
	{
		Set(other);
		return this;
	}
	
	const uint get_UID(const uint w)const{return X+Y*w;}
	string get_Debug(){return"X:"+X+"Y:"+Y;}
	void Log(string&str){::Log(str+":"+Debug);}
}                            

shared class Line
{
	Line(Hexagonal&a,Hexagonal&b){@A=a;@B=b;}
	
	uint get_Length()
	{
		return B.Distantion(A);
	}
	
	uint get_Point(Hexagonal&point)
	{
		return B.Distantion(point);
	}
	
	float get_Module(Hexagonal&point)
	{
		return Point[point]/Length;
	}
	
	Hexagonal@get_opIndex(const uint&in size)
	{
		
		const float mod=float(size/Length);
		return@Hexagonal(A.X+(B.X-A.X)*mod,A.Y+(B.Y-A.Y)*mod);
	}                      
	
	string get_Debug(){return"A<"+A.Debug+">B<"+B.Debug+">";}
	void Log(string&str){::Log(str+":"+Debug);}
	
	Hexagonal@A;
	Hexagonal@B;
}                                                                                                                                                                                                                                                                                              

string[]__critterHistoryInfo;                                                                                                                                                                                                                                                                                                                                                                                                                                            

import IGUIScreenOpt@GUI_CreateScreen(int screenIndex,string@sprName)from"client_gui";

import void GUI_DeleteScreen(int screenIndex)from"client_gui";

import IGUIElementOpt@GUI_AddScreenElement(int screenIndex,string@sprName,int x,int y)from"client_gui";

import IGUIScreenOpt@GUI_GetScreenOptions(int screenIndex)from"client_gui";

import IGUIScreenOpt@GUI_GetScreenOptions()from"client_gui";

import IGUIElementOpt@GUI_GetElementOptions()from"client_gui";
import void GUI_HideScreen(int screenIndex,int p0,int p1,int p2)from"client_gui";

import void GUI_DeleteScreenElements(int screenIndex)from"client_gui"; 

import IGUIScreenOpt@GUI_CreateScreenIni(int screenIndex,string@iniKey)from"client_gui";
import IGUIElementOpt@GUI_AddScreenElementIni(int screenIndex,string@ini,int defx,int defy)from"client_gui";
import IGUIElementOpt@GUI_AddScreenElementIni(int screenIndex,string@ini,int defx,int defy,string@defSpr)from"client_gui";      

shared interface IGUIScreenCallbackShow
{
	void OnShow(int p0,int p1,int p2);
}
shared interface IGUIScreenCallbackHide
{
	void OnHide(int p0,int p1,int p2);
}
shared interface IGUIScreenCallbackMove
{
	void OnMove(int posX,int posY);
}

shared interface IGUIScreenCallbackInit{
	void OnInit();
}

shared interface IGUIScreenOpt
{
	IGUIScreenOpt@CallbackShow(IGUIScreenCallbackShow@callback);
	IGUIScreenOpt@CallbackHide(IGUIScreenCallbackHide@callback);
	IGUIScreenOpt@CallbackMove(IGUIScreenCallbackMove@callback);
	IGUIScreenOpt@Position(int x,int y);
	IGUIScreenOpt@CanMove(bool enabled);
	IGUIScreenOpt@Modal(bool enabled);
	IGUIScreenOpt@Multiinstance(bool enabled);
	IGUIScreenOpt@IgnoreBorders(bool enabled);
	IGUIScreenOpt@CloseOnMiss(bool enabled);
	IGUIScreenOpt@AutoCursor(bool enabled,int cursorType);
	IGUIScreenOpt@SetElementCount(int8 ElementCount);
	IGUIScreenOpt@Pic(string@sprName,int path);  
	
	int GetPosX();
	int GetPosY();
	uint16 GetElementsLength();
	IGUIElementOpt@GetElement(uint16 index);
	
}    

shared interface IGUIElementCallbackInit
{
	void OnInit();
}
shared interface IGUIElementCallbackDraw
{
	void OnDraw(int posX,int posY,int w,int h);
}
shared interface IGUIElementCallbackMouseClick
{
	void OnMouseClick(int click);
}
shared interface IGUIElementCallbackKeyPress
{
	void OnKeyPress(uint8 key,uint8 letter);
}

shared interface IGUIElementOpt
{
	IGUIElementOpt@CallbackInit(IGUIElementCallbackInit@callback);
	IGUIElementOpt@CallbackDraw(IGUIElementCallbackDraw@callback);
	IGUIElementOpt@CallbackMouseClick(IGUIElementCallbackMouseClick@callback);
	IGUIElementOpt@CallbackKeyPress(IGUIElementCallbackKeyPress@callback);
	IGUIElementOpt@Position(int x,int y);
	IGUIElementOpt@Position(int x,int y,int w,int h);
	IGUIElementOpt@Position(string&iniKey);
	IGUIElementOpt@DownPic(string@sprName);
	IGUIElementOpt@Text(string@text,int font,uint color,uint downColor,int flags);
	IGUIElementOpt@TextInput(bool enabled,uint maxLen,uint colorFocused);
	IGUIElementOpt@Switch(bool enabled); 
	
	IGUIElementOpt@SetVisible(bool enabled);
	IGUIElementOpt@Realese();
	IGUIElementOpt@SetElementType(uint8 type);
	IGUIElementOpt@SetDescription(string desc);
	IGUIElementOpt@SetElementBtnNum(uint8 btnNum);
	IGUIElementOpt@SetElementFastPanelType(uint8 type);
	IGUIElementOpt@SetElementFastPanelId(uint16 id);
	IGUIElementOpt@UpPic(string@sprName);
	IGUIElementOpt@Pic(string@sprName,int path);
	IGUIElementOpt@SetLayer(uint8 layer);
	IGUIElementOpt@SetSpecialValue(uint value);
	IGUIElementOpt@SetRenderLayer(uint8 layer);
	IGUIElementOpt@PicSetFrmCount(uint16 count);   
	
	int GetPosX();
	int GetPosY();
	string@GetText(); 
	
	bool GetVisible();
	uint8 GetLayer();
	uint8 GetType();
	uint8 GetBtnNum();
	uint8 GetFastPanelType();
	uint16 GetFastPanelId();
	string GetDescription();
	uint16 GetSurfaceHeight();
	uint16 GetSurfaceWidth();
	uint GetSpecValue();
	uint8 GetRenderLayer(); 
	
}              

uint __GetColor(int r,int g,int b)
{
	r=(((r)>(255))?(255):(((r)<(0))?(0):(r)));
	g=(((g)>(255))?(255):(((g)<(0))?(0):(g)));
	b=(((b)>(255))?(255):(((b)<(0))?(0):(b)));
	return(uint((0xFF<<24)|(((r)&0xFF)<<16)|(((g)&0xFF)<<8)|((b)&0xFF)));
}

uint __GetGradient(uint colorStart,uint colorEnd,uint8 pos)
{
	pos=(((pos)>(100))?(100):(((pos)<(1))?(1):(pos)));
	
	int aS=(colorStart>>24)&0xFF,
	rS=((colorStart>>16)&0xFF),
	gS=((colorStart>>8)&0xFF),
	bS=((colorStart)&0xFF),
	
	aE=(colorEnd>>24)&0xFF,
	rE=((colorEnd>>16)&0xFF),
	gE=((colorEnd>>8)&0xFF),
	bE=((colorEnd)&0xFF); 
	
	rS=(((rE-int(rS*(pos*0.01)))>0)?(rE-int(rS*(pos*0.01))):-(rE-int(rS*(pos*0.01))));
	gS=(((gE-int(gS*(pos*0.01)))>0)?(gE-int(gS*(pos*0.01))):-(gE-int(gS*(pos*0.01))));
	bS=(((bE-int(bS*(pos*0.01)))>0)?(bE-int(bS*(pos*0.01))):-(bE-int(bS*(pos*0.01))));
	
	return __GetColor(rS,gS,bS);
}

uint __GetColor(uint8&a,uint8&r,uint8&g,uint8&b,uint color){
	a=(color>>24)&0xFF;
	r=((color>>16)&0xFF);
	g=((color>>8)&0xFF);
	b=((color)&0xFF);
	
	return 0;
}

class ScreenMain:IGUIScreenCallbackShow
{
	TextboxChannel@Channel;
	ButtonSendRecv@Send;
	ButtonSendRecv@Recv;
	ButtonBroadcast@[]BroadcastSend;
	ButtonBroadcast@[]BroadcastRecv;
	int BroadcastSendType;
	int BroadcastRecvType;
	
	int RadioId;
	int RadioChannel;
	int RadioBroadcastSend;
	int RadioBroadcastRecv;
	int RadioFlags;
	
	void OnShow(int radioId,int radioChannel,int radioData)
	{
		
		RadioId=radioId;
		RadioChannel=radioChannel;
		RadioBroadcastSend=(radioData>>16)&0xFF;
		RadioBroadcastRecv=(radioData>>24)&0xFF;
		RadioFlags=radioData&0xFFFF; 
		
		Channel.SetChannel(RadioChannel);
		
		Send.SetState(not(((RadioFlags)&((0x0001)))!=0));
		Recv.SetState(not(((RadioFlags)&((0x0002)))!=0));
		
		BroadcastSendType=0;
		if(RadioBroadcastSend==(0))
		BroadcastSendType=1;
		else if(RadioBroadcastSend==(100+(5)))
		BroadcastSendType=2;
		else if(RadioBroadcastSend==(100+(2)))
		BroadcastSendType=3;
		else if(RadioBroadcastSend==(40))
		BroadcastSendType=4;
		else if(RadioBroadcastSend==(20))
		BroadcastSendType=5;
		for(uint i=0;i<BroadcastSend.length();i++)
		BroadcastSend[i].SetState(false);
		if(BroadcastSendType!=0)
		BroadcastSend[BroadcastSendType-1].SetState(true);
		
		BroadcastRecvType=0;
		if(RadioBroadcastRecv==(0))
		BroadcastRecvType=1;
		else if(RadioBroadcastRecv==(100+(5)))
		BroadcastRecvType=2;
		else if(RadioBroadcastRecv==(100+(2)))
		BroadcastRecvType=3;
		else if(RadioBroadcastRecv==(40))
		BroadcastRecvType=4;
		else if(RadioBroadcastRecv==(20))
		BroadcastRecvType=5;
		for(uint i=0;i<BroadcastRecv.length();i++)
		BroadcastRecv[i].SetState(false);
		if(BroadcastRecvType!=0)
		BroadcastRecv[BroadcastRecvType-1].SetState(true);
	}
	
	void ChangeChannel()
	{
		if(RadioChannel==Channel.RadioChannel)
		return;
		RadioChannel=Channel.RadioChannel;
		RunServerScriptUnsafe("radio@unsafe_ChangeChannel",RadioId,RadioChannel,0,null,null);
		Message((3),(471));
	}
	
	void ChangeActivity(bool isSend)
	{
		int shiftFlag=(isSend?(0x0100):(0x0200));
		int disabledFlag=(isSend?(0x0001):(0x0002));
		uint cantShiftStr=(isSend?(475):(476));
		uint beginStr=(isSend?(465):(468));
		uint endStr=(isSend?(466):(469));
		
		if(not(((RadioFlags)&(shiftFlag))!=0))
		{
			RadioFlags^=disabledFlag;
			RunServerScriptUnsafe("radio@unsafe_ChangeActivity",RadioId,isSend?1:0,0,null,null);
			
			if(not(((RadioFlags)&(disabledFlag))!=0))
			Message((3),beginStr);
			else
			Message((3),endStr);
		}
		else
		{
			Message((3),cantShiftStr);
		}
		
		if(isSend)
		Send.SetState(not(((RadioFlags)&(disabledFlag))!=0));
		else
		Recv.SetState(not(((RadioFlags)&(disabledFlag))!=0));
	}
	
	void ChangeBroadcast(bool isSend,int type)
	{
		int shiftFlag=(isSend?(0x0400):(0x0800));
		uint cantShiftStr=(isSend?(477):(478));
		uint changeStr=(isSend?(467):(470));
		
		if((RadioFlags&shiftFlag)!=0)
		{
			Message((3),cantShiftStr);
			return;
		}
		
		if(isSend)
		BroadcastSendType=type;
		else
		BroadcastRecvType=type;
		
		int newBroadcastSend=(0);
		if(BroadcastSendType==2)
		newBroadcastSend=(100+(5));
		else if(BroadcastSendType==3)
		newBroadcastSend=(100+(2));
		else if(BroadcastSendType==4)
		newBroadcastSend=(40);
		else if(BroadcastSendType==5)
		newBroadcastSend=(20);
		else
		BroadcastSendType=1;
		int newBroadcastRecv=(0);
		if(BroadcastRecvType==2)
		newBroadcastRecv=(100+(5));
		else if(BroadcastRecvType==3)
		newBroadcastRecv=(100+(2));
		else if(BroadcastRecvType==4)
		newBroadcastRecv=(40);
		else if(BroadcastRecvType==5)
		newBroadcastRecv=(20);
		else
		BroadcastRecvType=1;
		
		if(RadioBroadcastSend==newBroadcastSend&&RadioBroadcastRecv==newBroadcastRecv)
		return;
		
		RadioBroadcastSend=newBroadcastSend;
		RadioBroadcastRecv=newBroadcastRecv;
		RunServerScriptUnsafe("radio@unsafe_ChangeBroadcast",RadioId,RadioBroadcastSend,RadioBroadcastRecv,null,null);
		Message((3),changeStr);
		
		for(uint i=0;i<BroadcastSend.length();i++)
		BroadcastSend[i].SetState(false);
		BroadcastSend[BroadcastSendType-1].SetState(true);
		for(uint i=0;i<BroadcastRecv.length();i++)
		BroadcastRecv[i].SetState(false);
		BroadcastRecv[BroadcastRecvType-1].SetState(true);
	}
}

class TextboxChannel:IGUIElementCallbackInit,IGUIElementCallbackKeyPress
{
	ScreenMain@Instance;
	IGUIElementOpt@Options;
	uint16 RadioChannel;
	
	TextboxChannel(ScreenMain&instance)
	{
		@Instance=instance;
		@Instance.Channel=this;
	}
	
	void OnInit()
	{
		@Options=GUI_GetElementOptions();
	}
	
	void OnKeyPress(uint8 key,uint8 letter)
	{
		string@text=Options.GetText();
		
		if((Instance.RadioFlags&(0x1000))==0)
		{
			if(text.length()>0&&text[text.length()-1]==10)
			text.resize(text.length()-1);
			
			int channel=0;
			StrToInt(text,channel);
			channel=(((channel)>(0xFFFF))?(0xFFFF):(((channel)<(0))?(0):(channel)));
			text=""+channel;
			
			RadioChannel=channel;
			if(key==0x1C||key==0x9C)
			Instance.ChangeChannel();
		}
		else
		{
			text=""+RadioChannel;
			Message((3),(474));
		}
	}
	
	void SetChannel(uint16 channel)
	{
		RadioChannel=channel;
		Options.Text(""+channel,(5),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008));
	}
}

class ButtonRefresh:IGUIElementCallbackMouseClick
{
	ScreenMain@Instance;
	
	ButtonRefresh(ScreenMain&instance)
	{
		@Instance=instance;
	}
	
	void OnMouseClick(int click)
	{
		if((Instance.RadioFlags&(0x1000))==0)
		Instance.ChangeChannel();
		else
		Message((3),(474));
	}
}

class ButtonSendRecv:IGUIElementCallbackInit,IGUIElementCallbackMouseClick
{
	ScreenMain@Instance;
	IGUIElementOpt@Options;
	bool IsSend;
	
	ButtonSendRecv(ScreenMain&instance,bool isSend)
	{
		@Instance=instance;
		IsSend=isSend;
		if(IsSend)
		@Instance.Send=this;
		else
		@Instance.Recv=this;
	}
	
	void OnInit()
	{
		@Options=GUI_GetElementOptions();
	}
	
	void OnMouseClick(int click)
	{
		if(click==(0))
		Instance.ChangeActivity(IsSend);
	}
	
	void SetState(bool state)
	{
		Options.Switch(state);
	}
}

class ButtonBroadcast:IGUIElementCallbackInit,IGUIElementCallbackMouseClick
{
	ScreenMain@Instance;
	IGUIElementOpt@Options;
	bool IsSend;
	int Type;
	
	ButtonBroadcast(ScreenMain&instance,bool isSend,int type)
	{
		@Instance=instance;
		IsSend=isSend;
		Type=type;
		if(isSend)
		@Instance.BroadcastSend[type-1]=this;
		else
		@Instance.BroadcastRecv[type-1]=this;
	}
	
	void OnInit()
	{
		@Options=GUI_GetElementOptions();
	}
	
	void OnMouseClick(int click)
	{
		if(click==(0))
		Instance.ChangeBroadcast(IsSend,Type);
	}
	
	void SetState(bool state)
	{
		Options.Switch(state);
	}
}

void InitRadioScreen()
{
	
	ScreenMain screenMain();
	GUI_CreateScreen((41),GetIfaceIniStr("RadioMainPic"))
	.CallbackShow(screenMain)
	.CloseOnMiss(true)
	.AutoCursor(true,(0));
	
	GUI_AddScreenElement((41),null,0,0)
	.Position("RadioMainText")
	.Text(GetMsgStr((3),(455)),(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),0,(0x0004)|(0x0008)|(0x0200)); 
	
	TextboxChannel textboxChannel(screenMain);
	GUI_AddScreenElement((41),null,0,0)
	.Position("RadioChannel")
	.CallbackInit(textboxChannel)
	.CallbackKeyPress(textboxChannel)
	.TextInput(true,5,((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xFF)&0xFF)<<8)|((0)&0xFF)))));
	
	GUI_AddScreenElement((41),null,0,0)
	.Position("RadioChannelText")
	.Text(GetMsgStr((3),(456)),(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),0,(0x0004)|(0x0008)|(0x0200)); 
	
	ButtonRefresh buttonRefresh(screenMain);
	GUI_AddScreenElement((41),null,0,0)
	.Position("RadioRefresh")
	.CallbackMouseClick(buttonRefresh)
	.DownPic(GetIfaceIniStr("RadioRefreshPicDn"));
	
	GUI_AddScreenElement((41),null,0,0)
	.Position("RadioRefreshText")
	.Text(GetMsgStr((3),(457)),(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),0,(0x0004)|(0x0008)|(0x0200)); 
	
	GUI_AddScreenElement((41),null,0,0)
	.Position("RadioBroadcastSendText")
	.Text(GetMsgStr((3),(458)),(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),0,(0x0008)|(0x0200));
	GUI_AddScreenElement((41),null,0,0)
	.Position("RadioBroadcastRecvText")
	.Text(GetMsgStr((3),(459)),(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),0,(0x0010)|(0x0008)|(0x0200));
	
	ButtonSendRecv buttonSend(screenMain,true);
	GUI_AddScreenElement((41),null,0,0)
	.Position("RadioBroadcastSend")
	.CallbackInit(buttonSend)
	.CallbackMouseClick(buttonSend)
	.DownPic(GetIfaceIniStr("RadioBroadcastSendPicDn"));
	
	ButtonSendRecv buttonRecv(screenMain,false);
	GUI_AddScreenElement((41),null,0,0)
	.Position("RadioBroadcastRecv")
	.CallbackInit(buttonRecv)
	.CallbackMouseClick(buttonRecv)
	.DownPic(GetIfaceIniStr("RadioBroadcastRecvPicDn"));
	
	screenMain.BroadcastSend.resize(5);
	screenMain.BroadcastRecv.resize(5);
	for(uint i=1;i<=5;i++)
	{
		ButtonBroadcast buttonBroadcastSend(screenMain,true,i);
		GUI_AddScreenElement((41),null,0,0)
		.Position("RadioBroadcastSend"+i)
		.CallbackInit(buttonBroadcastSend)
		.CallbackMouseClick(buttonBroadcastSend)
		.DownPic(GetIfaceIniStr("RadioBroadcastSend"+i+"PicDn"));
		
		ButtonBroadcast buttonBroadcastRecv(screenMain,false,i);
		GUI_AddScreenElement((41),null,0,0)
		.Position("RadioBroadcastRecv"+i)
		.CallbackInit(buttonBroadcastRecv)
		.CallbackMouseClick(buttonBroadcastRecv)
		.DownPic(GetIfaceIniStr("RadioBroadcastRecv"+i+"PicDn"));
		
		GUI_AddScreenElement((41),null,0,0)
		.Position("RadioBroadcast"+i+"Text")
		.Text(GetMsgStr((3),(460)+i-1),(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),0,(0x0004)|(0x0008)|(0x0200));
	}
}

void ShowEditScreen(int itemId,int,int,string@,int[]@)
{
	CritterCl@chosen=GetChosen();
	if(not(@chosen!=null))
	return;
	
	ItemCl@[]items;
	uint count=chosen.GetItems(-1,items);
	for(uint i=0,j=items.length();i<j;i++)
	{
		ItemCl@item=items[i];
		if(item.Id==uint(itemId))
		ShowScreen((41),item.Id,item.RadioChannel,
		(item.RadioBroadcastRecv<<24)|(item.RadioBroadcastSend<<16)|(item.RadioFlags));
	}
} 

