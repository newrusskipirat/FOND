

bool LocIsModoc(uint locPid)
{
	return(locPid<=(1253));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(32)||locPid==(1216)||locPid==(43)||locPid==96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(42));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

shared interface Project
{
	string@get_Name();
	void Build();
	void SetAssociation(string@ex,string@className,string@classModule);
}

shared interface FileObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	void FormatStringData(string&nameData,string&data);
	FileObject@get_Pattern(string&name)const;
	FileObject@get_Copy(string&name); 
	
	void set_GlobalData(string@name,string@value);          
	
	string@get_GlobalData(string@name);            
	
}

shared class TimeLog
{
	uint tick;
	
	TimeLog()
	{
		refresh();
	}
	
	void refresh()
	{
		tick=GetTick();
	}
	
	bool check(uint count)
	{
		return(GetTick()-tick>=count);
	}
	
	uint get()
	{
		uint old=tick;
		refresh();
		return(tick-old);
	}
	
	void Log(string&in message)
	{
		::ClearLog(message+" ["+(GetTick()-tick)+"ms]");
	}
}

shared interface AnyDataObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	uint[]@get_SaveData();
	void InitData(uint[]&data);
}

shared interface ManagerObject
{
	FileObject@get_ProtoObject(string@name);
	void ParseProtoTypes(const string&ex,const FileObject&pattern,const string@search);
	FileObject@ParseProtoTypeFile(string&name,const string&ex,const FileObject&pattern,const string@search);
	FileObject@AddPrototype(FileObject@proto);
	FileObject@StringToFileObject(string&name,string&txt,const FileObject&pattern);
}

shared interface ValueAPI{}
shared class SettingsAPI
{
	string Name;
	bool IsDebug;
} 

shared class GlobalData
{
	uint Hash;
	string Value;
	
	GlobalData(string@name)
	{
		Hash=GetStrHash(name);
		Value="";
	} 
	
	void SaveData(uint[]&outArray,uint&position)
	{
		uint len=Value.length();
		
		outArray.resize(position+2+len/2);
		
		outArray[position++]=Hash;
		outArray[position++]=len;
		
		for(uint i=0;i<len;i++)
		{
			outArray[position]|=Value[i++]<<24;
			outArray[position]|=Value[i++]<<16;
			outArray[position]|=Value[i++]<<8;
			outArray[position++]|=Value[i];
		}
	} 
	
	void LoadData(uint[]&in outArray,uint&position)
	{
		Hash=outArray[position++];
		uint len=outArray[position++];
		Value.resize(len);
		
		for(uint i=0;i<len;i++)
		{
			Value[i++]=(outArray[position]>>24)&0xFF;
			Value[i++]=(outArray[position]>>16)&0xFF;
			Value[i++]=(outArray[position]>>8)&0xFF;
			Value[i]=outArray[position++]&0xFF;
			
		}
	}
} 

shared class Hexagonal
{
	Hexagonal(){Reset();}
	Hexagonal(const uint16&in x,const uint16&in y){Set(x,y);}
	Hexagonal(const Hexagonal&master){Set(master);}
	
	Hexagonal(const Critter&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Item&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Scenery&master){Set(master.HexX,master.HexY);}
	
	bool Entire(Map&map,int entNum){return map.GetEntireCoords(entNum,0,X,Y);}
	bool IsPassed(Map&map){return ValidPosition(map)&&map.IsHexPassed(X,Y);}
	bool IsPassed(Map&map,Hexagonal&begin,Hexagonal&end){return ValidPosition(map,begin,end)&&map.IsHexPassed(X,Y);}
	
	bool ValidPosition(Map&map)
	{
		Hexagonal end,begin;
		if(end.Entire(map,0)&&begin.Entire(map,255))
		return ValidPosition(map,begin,end);
		return false;
	}
	
	bool ValidPosition(Map&map,Hexagonal&begin,Hexagonal&end)
	{
		return(X>=begin.X&&Y>=begin.Y
		&&X<=end.X&&Y<=end.Y);
	}
	
	bool Transit(Critter&critter,Map&map){return Transit(critter,map,critter.Dir);}
	bool Transit(Critter&critter,Map&map,uint8 direction)
	{
		if(!IsPassed(map))return false;
		return critter.TransitToMap(map.Id,X,Y,direction);
	}
	
	bool Transit(Critter&critter,uint mapId){return Transit(critter,mapId,critter.Dir);}
	bool Transit(Critter&critter,uint mapId,uint8 direction)
	{
		if(mapId==0)return false;
		Map@map=GetMap(mapId);
		if(@map is null)return false;
		return Transit(critter,map,direction);
	} 
	
	void Set(const uint16&in x,const uint16&in y){X=x;Y=y;}
	void Set(const Hexagonal&in other){Set(other.X,other.Y);}
	void Reset(){X=Y=0;}
	uint Distantion(Hexagonal&other){return GetDistantion(X,Y,other.X,other.Y);}
	
	uint16 X;
	uint16 Y;
	
	bool opEquals(const Hexagonal&in other){return(other.X==X&&other.Y==Y);}
	Hexagonal&opAssign(const Hexagonal&in other)
	{
		Set(other);
		return this;
	}
	
	const uint get_UID(const uint w)const{return X+Y*w;}
	string get_Debug(){return"X:"+X+"Y:"+Y;}
	void Log(string&str){::Log(str+":"+Debug);}
}    

shared class MapHash
{
	MapHash(const uint16&in protoId)
	{
		ProtoId=protoId;
		@Min=null;
		@Max=null;
	}
	
	MapHash&opAssign(Map&map)
	{
		@Min=Hexagonal(0,0);
		@Max=Hexagonal(0,0);
		map.GetEntireCoords(0,0,Max.X,Max.Y);
		map.GetEntireCoords((255),0,Min.X,Min.Y);
		return this;
	}
	
	uint16 ProtoId;
	Hexagonal@Min;
	Hexagonal@Max;
} 

shared class Line
{
	Line(Hexagonal&a,Hexagonal&b){@A=a;@B=b;}
	
	uint get_Length()
	{
		return B.Distantion(A);
	}
	
	uint get_Point(Hexagonal&point)
	{
		return B.Distantion(point);
	}
	
	float get_Module(Hexagonal&point)
	{
		return Point[point]/Length;
	}
	
	Hexagonal@get_opIndex(const uint&in size)
	{
		
		const float mod=float(size/Length);
		return@Hexagonal(A.X+(B.X-A.X)*mod,A.Y+(B.Y-A.Y)*mod);
	} 
	
	Line(Map&map,uint16 grid,MapHash@hash)
	{
		if(@hash is null)
		{
			Hexagonal min,max;
			map.GetTransferParams(min.X,min.Y,max.X,max.Y,grid);
			
			@A=@Hexagonal(min.X,min.Y);
			@B=@Hexagonal(max.X,max.Y);
		}
		else
		{
			if(@hash.Min is null||@hash.Max is null)
			map.GetTransferParams(hash.Min.X,hash.Min.Y,hash.Max.X,hash.Max.Y,grid);
			
			@A=@Hexagonal(hash.Min.X,hash.Min.Y);
			@B=@Hexagonal(hash.Max.X,hash.Max.Y);
		}
	} 
	
	string get_Debug(){return"A<"+A.Debug+">B<"+B.Debug+">";}
	void Log(string&str){::Log(str+":"+Debug);}
	
	Hexagonal@A;
	Hexagonal@B;
}  

import MapHash@GetMapHash(const uint16&in pid)from"world";
import uint CreateLocation(Hexagonal&coordinate,uint16 locationPid)from"world"; 

import ManagerObject@get_objectManager()from"world"; 

import EventTree@get_EventRoot()from"world"; 

import Project@CreateProject(string@name,string@path)from"main";
import Project@get_Project(string@name)from"main";                                                                                                                         

void SetItemRespawn(Item&item,uint mode,uint respTime)
{
	item.Val5=mode;
	item.Val4=respTime;
	item.SetEvent((4),"e_ItemOnSkill");
	item.SetScript("_RespItemInit");
	item.Update();
}

void SetItemNoPick(Item&item,uint varNum)
{
	item.Val3=varNum;
	item.SetEvent((4),"e_ItemOnSkill");
	item.SetScript("_RespItemInit");
	item.Update();
}

bool CheckItemValidToRespawn(Item@item)
{
	if(!(@item!=null))
	return false;
	
	uint8 protoType=item.GetType();
	return protoType==(1)||protoType==(2)||protoType==(3)||protoType==(5)||protoType==(7);
}

bool e_ItemOnSkill(Item&item,Critter&cr,int skill)
{
	
	if(skill<0)
	{
		
		if(item.Val3!=0)
		{
			GameVar@canPick=GetLocalVar(item.Val3,cr.Id);
			if((@canPick!=null))
			{
				if(canPick.GetValue()==0)
				{
					cr.SayMsg((11),(0),(3600));
					return true;
				}
				else
				{
					canPick=0;
				}
			}
		}
		
		if(item.Val4>0&&(@cr.GetMap()!=null))
		{
			
			uint[]values=
			{
				cr.GetMap().Id,
				item.GetProtoId(),
				item.GetCount(),
				item.GetScriptId(),
				item.HexX,
				item.HexY,
				item.Val3,
				item.Val5,
				item.Val4,
				item.Info
			};
			
			CreateTimeEvent(__FullSecond+item.Val4,"e_RespawnItem",values,true);
		}
		
		item.SetEvent((4),"");
	}
	return false;
}

void RespawnItem(uint mapId,uint16 itemPid,uint itemCount,uint scriptId,uint16 hX,uint16 hY,uint varNum,uint modeResp,uint timeResp,uint itemInfo)
{
	uint[]values={mapId,itemPid,itemCount,scriptId,hX,hY,varNum,modeResp,timeResp,itemInfo};
	e_RespawnItem(values);
}

uint e_RespawnItem(uint[]@values)
{
	if(values.length()==10)
	{
		uint mapId=values[0];
		uint16 proto=values[1];
		uint count=values[2];
		string script=(values[3]==0?"":(::GetScriptName(values[3])));
		uint16 hx=values[4];
		uint16 hy=values[5];
		uint varNum=values[6];
		uint mode=values[7];
		uint respTime=values[8];
		uint info=values[9];
		Item@item;
		
		Map@map=GetMap(mapId);
		if(!(@map!=null))
		return 0;
		
		uint tryNum=0;
		
		while(tryNum<10)
		{
			switch(mode)
			{
				case(0):
				@item=RespawnItemCoords(map,hx,hy,proto,count);
				break;
				case(1):
				@item=RespawnItemAnyCritter(map,proto,count);
				break;
				case(2):
				@item=RespawnItemContainer(map,proto,count);
				break;
				default:
				@item=RespawnItemNearEntire(map,mode,proto,count);
				break;
			}
			tryNum++;
			if((@item!=null))
			break;
		}
		if((@item!=null))
		{
			
			if(values[3]>0)
			item.SetScript(script);
			item.Info=info;
			SetItemNoPick(item,varNum);
			SetItemRespawn(item,mode,respTime);
		}
	}
	
	return 0;
} 

Item@RespawnItemNearEntire(Map&map,uint8 entire,uint16 protoId,uint count)
{
	uint eCount=map.CountEntire(entire);
	if(eCount==0)
	return null;
	
	uint numTry=0;
	uint16 hx=0;
	uint16 hy=0;
	Item@[]items;
	bool foundItem=false;
	while(numTry<10)
	{
		foundItem=false;
		if(map.GetEntireCoords(entire,Random(0,eCount-1),hx,hy))
		{
			@items;
			if(map.GetItems(hx,hy,items)==0)
			{
				
				return RespawnItemCoords(map,hx,hy,protoId,count);
			}
			for(uint i=0;i<items.length();i++)
			{
				if(items[i].GetProtoId()==protoId)
				{
					foundItem=true;
					break;
				}
			}
			if(!foundItem)
			{
				
				return RespawnItemCoords(map,hx,hy,protoId,count);
			}
		}
		numTry++;
	}
	
	return null;
}

Item@RespawnItemContainer(Map&map,uint protoId,uint count)
{
	Item@[]containers;
	map.GetItemsByType((8),containers);
	
	Item@container=containers[Random(0,containers.length()-1)];
	if(!(@container!=null))
	return null;
	return container.AddItem(protoId,count,0);
	
}

Item@RespawnItemAnyCritter(Map&map,uint16 protoId,uint count)
{
	Critter@[]critters;
	if(map.GetCritters(0,(0x0F)|(0x20),critters)>0)
	{
		return critters[Random(0,critters.length()-1)].AddItem(protoId,count);
	}
	return null;
}

Item@RespawnItemCoords(Map&map,uint16 hexX,uint16 hexY,uint16 protoId,uint count)
{
	if(hexX==0||hexY==0)
	return null;
	return map.AddItem(hexX,hexY,protoId,count);
}

void _RespItemInit(Item&item,bool firstTime)
{
	item.SetEvent((4),"e_ItemOnSkill");
}

void _RespawnItemInit(Item&item,bool firstTime)
{
	item.SetEvent((4),"e_ItemOnSkill");
}
