// рандомная раскладка итемов на карте рэндом энка -- ну просто полная рандомность!! :)
// PowerMagic
// #include "ITEMPID.H"
#include "_defines.fos"
#include "mapgen_group.fos"

import void SetWear( Item& item, int wearProcent ) from "repair";


void PasteItems( Map& map, Critter& cr )
{
    for( uint16 i = 0; i < caveGroup.length(); i++ )
    {
        if( CheckItemsMod( cr, caveGroupMod[ i ] )  == true )
        {
            PasteItemOnGround( map, caveGroup[ i ] ); // GetItemsInf(0,i));
        }
    }
}

bool ChangeProto( Item& item, uint pid )
{
	if( @GetProtoItem( pid ) is null )
	{
		Log( "Невалиден прототип предмета под пидом: " + pid );
		return false;
	}
	
	return item.ChangeProto( pid );
}

void GetItemsOnSecretMap( Map& map, Critter& pl )
{
    Item@[] items;
    Map @ itemMap = GetMapByPid( 400, 0 );
    uint8 radius = ( pl.Skill[ SK_OUTDOORSMAN ] / 50 ) * ( pl.StatBase[ ST_PERCEPTION ] / 2 );
    itemMap.GetItems( ReturnGmapSector( pl, true ) + MAP_ITEM_HEX, ReturnGmapSector( pl, false ) + MAP_ITEM_HEX, items );
    for( uint i = 0; i < items.length(); i++ )
    {

        if( ReturnFindRadius( pl, items[ i ], radius ) == true ) // pl.StatBase[ST_LUCK]*5 + pl.Skill[SK_OUTDOORSMAN] > Random(50,250))
        {
            if( !ReturnValidItem( items[ i ].GetProtoId() ) )
            {
                MoveItem( items[ i ], Random( 1, items[ i ].GetCount() ), map, Random( ReturnCoord( map, 25, true ), ReturnCoord( map, 26, true ) ), Random( ReturnCoord( map, 25, false ), ReturnCoord( map, 27, false ) ) ); // Random(ReturnCoord(map, 25, true),map.GetWidth()), Random(ReturnCoord(map, 25, false)
//      map.AddItem(Random(50,100), Random(50,100), items[i].GetProtoId(), Random(1, items[i].GetCount()));
//        Log("item add");
            }
            else
            {
                ChangeProto( items[ i ], ReturnRandomJunk( 0 ) );
            }
        }
    }
}

void GetAllItemsOnMap( Map& map, Critter& pl )
{
//   Log("run getAllItemsOnMap");
    Item@[] items;
//   Critter @ cr = map.
//   Map @ mapItem = GetMapByPid(421, 0);
//   if(!valid(items)) {Log("items not valid");return;}
    for( uint itemType = 1; itemType < 7; itemType++ )
    {
        map.GetItemsByType( itemType, items );
        for( uint i = 0; i < items.length(); i++ )
        {
            if( !ReturnValidItem( items[ i ].GetProtoId() ) )
            {
                items[ i ].Val7 = pl.WorldX;
                items[ i ].Val8 = pl.WorldY;
//      pl.Say(SAY_NETMSG,"item save");
            }
            else
            {
                DeleteItem( items[ i ] );
            }                        // items[i].ChangeProto(ReturnRandomJunk(1));}

//     map.GetItemsByType(itemType, items);
            MoveItems( items, GetMapByPid( SUPER_SECRET_MAP, 0 ), ReturnGmapSector( pl, true ) + MAP_ITEM_HEX, ReturnGmapSector( pl, false ) + MAP_ITEM_HEX );
            /* for (uint i = 0; i < items.length(); i++)
               {
                 Item @ itemTrans = map.AddItem(ReturnGmapSector(pl,true) + 70, ReturnGmapSector(pl, false) + 70, items[i].GetProtoId(), items[i].GetCount());
                 if(itemTrans.IsWeared)
                 {
                   SetWear(itemTrans, item.BrokenWear);
                 }

               }*/
        }
    }
}

void AddItemsToCont( Map& map )
{
    Item@[] container;
    map.GetItemsByType( ITEM_CONTAINER, container );

    for( uint i = 0; i < container.length(); i++ )
    {

        container[ i ].AddItem( PID_STIMPAK, 1, 0 );
        i += Random( 0, container.length() - 1 );
    }
}

void PasteItemOnGround( Map& map, uint16 itemPid )
{

    uint16 hexX = Random( ReturnCoord( map, 25, true ), ReturnCoord( map, 26, true ) );
    uint16 hexY = Random( ReturnCoord( map, 25, false ), ReturnCoord( map, 27, false ) );
    string logMsg;

    if( map.IsHexPassed( hexX, hexY ) )                   // проверяем доступность гекса
    {
        map.AddItem( hexX, hexY, itemPid, 1 );            // в случае удачи добавляем итем
//      logMsg = "Item: "+itemPid+" HexX: "+hexX+" HexY: "+hexY;	//отладочная инфа,чтобы знать где отреспаунили итем
        // Log(logMsg);
        Item @ item = map.GetItem( hexX, hexY, itemPid );
        ChangeBrokeAndAmmo( item );
    }
}

bool CheckItemsMod( Critter& cr, uint16 itemMod ) // , uint16[] itemsMd)Map& map,
{

    int tempStat = cr.StatBase[ ST_LUCK ] * 10 + cr.Skill[ SK_OUTDOORSMAN ];
    if( tempStat > Random( 0, 200 ) + itemMod )
    {
        return true;
    }
    return false;
}

// Val4 - координата х на карте
// Val5 - координата у на карте
// Val6 - состоянии открыт-закрыт
// Val7 - координата х на глобальной карте
// Val8 - координата у на глобально карте

void GetTreasureHoles( Map& map, Critter& pl )
{
    Item@[] holes;
    Map @ itemMap = GetMapByPid( SUPER_SECRET_MAP, 0 );
    map.GetItemsByType( ITEM_CONTAINER, holes );

    for( uint16 i = 0; i < holes.length(); i++ )
    {
        if( holes[ i ].GetProtoId() == ITEM_TREASURE_HOLE )
        {
            if( holes[ i ].Val6 == 0 )
            {
//      Log("treasure save");
                MoveItem( holes[ i ], 1, itemMap, ReturnGmapSector( pl, true ) + MAP_TREASURE_HEX, ReturnGmapSector( pl, false ) + MAP_TREASURE_HEX );
            }
        }
    }
}

void FindTreasure( Map& map, Critter& pl )
{
    Item@[] holes;
    Map @ itemMap = GetMapByPid( SUPER_SECRET_MAP, 0 );
    itemMap.GetItems( ReturnGmapSector( pl, true ) + MAP_TREASURE_HEX, ReturnGmapSector( pl, false ) + MAP_TREASURE_HEX, holes );
    for( uint16 i = 0; i < holes.length(); i++ )
    {
        if( holes[ i ].GetProtoId() == ITEM_TREASURE_HOLE )
        {
            if( holes[ i ].Val7 == pl.WorldX && holes[ i ].Val8 == pl.WorldY )
            {
                MoveItem( holes[ i ], 1, map, holes[ i ].Val4, holes[ i ].Val5 );
            }
        }
    }
}
//       //player.Skill[SK_REPAIR]
/*
   void AddDeadBody(Map& map)
   {
   map.AddNpc(34, 80, 80, 1);
   Critter @ body = GetCritter(80,80);
   body.AddItem(74,1);
   body.ToDead(2, body);
   }
 */
void ChangeBrokeAndAmmo( Item& item )
{
    if( item.IsWeared() )                                       // проверяем ломается ли итем
    {
        SetWear( item, Random( 30, 90 ) );                      // ломаем его
        if( item.WeaponAmmoCount > 0 )
        {
            item.WeaponAmmoCount = Random( 0, item.WeaponAmmoCount );
//                CaseAmmoWeaponCount(item, item.WeaponAmmoCount);
        }
    }
}

bool ReturnValidItem( uint16 protoId )
{
    switch( protoId )
    {
    case MAPGEN_FRT_TREE:
        return true;
//     case MAPGEN_FRT_STONE	: return true;
    default:
        return false;
    }
    return false;
}

uint16 ReturnRandomJunk( uint dummy )
{
    uint8 rnd = Random( 0, 1 );
    switch( rnd )
    {
    case 0:
        return PID_REAL_BOTTLE_CAPS;
    case 1:
        return PID_CRAFT_M_BARS;
    default:
        return PID_ROCK;
    }
    return 0;
}

/*uint16 CaseAmmoWeaponCount(Item& item, uint16 ammoCount) //функция выдает рандомное кол-во патров в вепоне - инфа с фолл.ру
   {
   switch(ammoCount)
   {
    case 1:  return item.WeaponAmmoCount = Random(0,1); //shIIItgun
    case 2:  return item.WeaponAmmoCount = Random(0,2); //shotgun
    case 5:  return item.WeaponAmmoCount = Random(0,5); //.223 pistol
    case 6:  return item.WeaponAmmoCount = Random(0,6); //14mm pistol
    case 7:  return item.WeaponAmmoCount = Random(0,7); //9mm mauser
    case 8:  return item.WeaponAmmoCount = Random(0,8); //desert eagle
    case 10: return item.WeaponAmmoCount = Random(0,10); //needler
    case 12: return item.WeaponAmmoCount = Random(0,12); //10mm pistol
    case 20: return item.WeaponAmmoCount = Random(0,20); //desert eagle +mag
    default: return 0;
   }
   return 0;
   }*/
