

string@critter_animation(int animType,uint crType,uint anim1,uint anim2,uint&pass,uint&flags,int&ox,int&oy)
{
	if(animType==(2))
	return ProcessTactics(crType,anim1,anim2,pass,flags,ox,oy);
	if(animType==(3))
	return ProcessArcanum(crType,anim1,anim2,pass,flags,ox,oy);
	return null;
}

string@ProcessTactics(uint crType,uint anim1,uint anim2,uint&pass,uint&flags,int&ox,int&oy)
{ 
	
	string@crTypeName=GetCritterTypeName(crType);
	string animName; 
	
	bool isTurret=false;
	bool isVehicle=false;
	bool isMutantFreak=false;
	bool isBrain=false;
	
	switch(crTypeName[0])
	{
		case 67:
		animName="sprites/characters/";
		isMutantFreak=(crTypeName=="CMutantFreak");
		isBrain=(crTypeName=="CBrain");
		break;
		case 65:
		animName="sprites/critters/";
		break;
		case 82:
		animName="sprites/robots/";
		break;
		case 84:
		animName="sprites/robots/RobotTurrets/";
		isTurret=true;
		break;
		case 86:
		if(crTypeName=="VTankTurret")
		crTypeName="VTank Turret";
		animName="sprites/vehicles/";
		isVehicle=true;
		break;
		default:
		return null;
	}
	animName+=substring(crTypeName,1,crTypeName.length()-1);
	animName+="$";      
	
	const string[]colorOffsets=
	{
		
		"0,0,0",
		"30,-30,-30",
		"-30,30,-30",
		"-30,-30,30",
		"-30,30,30",
		"30,-30,30",
		"30,30,-30",
		"30,30,30",
		"60,60,60",
		"-30,-30,-30",
		"-60,-60,-60",
		"0,0,0",
		"0,0,0",
		"0,0,0",
		"0,0,0",
		"0,0,0"
	};
	uint skinColor=(anim1>>20)&0xF;
	uint hairColor=(anim1>>24)&0xF;
	uint armorColor=(anim1>>28)&0xF;
	if(skinColor!=0)
	animName+="[1,"+colorOffsets[skinColor]+"]";
	if(hairColor!=0)
	animName+="[2,"+colorOffsets[hairColor]+"]";
	if(armorColor!=0)
	animName+="[3,"+colorOffsets[armorColor]+"]"; 
	
	bool isDead=(anim2>=(100)&&anim2<=(120));
	bool isCrouch=(!isDead&&(anim1&(0x0100))!=0);
	bool isProne=(!isDead&&!isCrouch&&(anim1&(0x0200))!=0); 
	
	anim1&=(0x000000FF); 
	
	if(isTurret)
	{
		
		animName+="StandArmed.spr";
		return animName;
	} 
	
	if(isVehicle)
	{
		
		animName+="Idle.spr";
		return animName;
	} 
	
	if(isMutantFreak)
	{
		if(isDead)
		animName+="Death.spr";
		else if(anim2>=(43)&&anim2<=(48))
		animName+="Attack.spr";
		else
		animName+="Breathe.spr";
		return animName;
	} 
	
	if(!isDead)
	{
		
		if(pass==10)
		{
			animName+="Default.spr";
			return animName;
		} 
		
		if(isCrouch)
		animName+="Crouch";
		else if(isProne)
		animName+="Prone";
		else
		animName+="Stand";
		
		switch(anim2)
		{
			
			case(3):
			animName+="Walk";
			break;
			case(4):
			animName+="Walk";
			break;
			case(7):
			animName+="Walk";
			break;
			case(5):
			animName+="Run";
			break;
			case(6):
			animName+="Run";
			break;
			case(8):
			animName+="Run";
			break;
			case(70):
			animName+="DodgeOne";
			break;
			case(71):
			animName+="DodgeTwo";
			break;
			case(72):
			animName+="Recoil";
			break;
			case(73):
			animName+="Recoil";
			break;
			case(82):
			animName+="Fallback";
			break;
			case(83):
			animName+="Fallforward";
			break;
			case(88):
			animName+="Getupback";
			break;
			case(89):
			animName+="Getupforward";
			break;
			case(86):
			animName+="Fallenback";
			break;
			case(87):
			animName+="Fallenforward";
			break;
			case(27):
			animName+="Pickup";
			break;
			case(35):
			animName+="Pickup";
			break;
			case(37):
			animName+="Attack";
			break;
			case(43):
			animName+="Attack";
			break;
			case(46):
			animName+="Attack";
			break;
			case(49):
			animName+="Attack";
			break;
			case(51):
			animName+="Attack";
			break;
			case(54):
			animName+="Attack";
			break;
			case(55):
			animName+="Attack";
			break;
			case(56):
			animName+="Attack";
			break;
			case(58):
			animName+="Attack";
			break;
			case(53):
			animName+="Attack";
			break;
			case(24):
			animName+="Fidget";
			break;
			case(10):
			animName+="Stand";
			break;
			case(11):
			animName+="Crouch";
			break;
			case(12):
			animName+="Prone";
			break;
			
			case(1):
			animName+="Breathe";
			if(anim1==(1))
			pass=10;
			break;
			
			case(20):
			case(21):
			case(28):
			case(29):
			case(36):
			if(pass==0)
			{
				animName+="Magic";
				pass++;
			}
			else
			{
				animName+="Magichigh";
			}
			break;
			
			default:
			return null;
		}
		
		switch(anim1)
		{
			case(1):
			animName+="";
			break;
			case(4):
			animName+="Knife";
			break;
			case(5):
			animName+="Club";
			break;
			case(6):
			animName+="Club";
			break;
			case(7):
			animName+="Spear";
			break;
			case(8):
			animName+="Pistol";
			break;
			case(9):
			animName+="SMG";
			break;
			case(10):
			animName+="Rifle";
			break;
			case(11):
			animName+="Heavy";
			break;
			case(12):
			animName+="Minigun";
			break;
			case(13):
			animName+="Rocket";
			break;
			case(14):
			animName+="Heavy";
			break;
			case(15):
			animName+="Rifle";
			break;
			case(16):
			animName+="Knife";
			break;
			case(17):
			animName+="Knife";
			break;
			case(18):
			animName+="Club";
			break;
			case(19):
			animName+="Spear";
			break;
			default:
			break;
		} 
		
		switch(anim2)
		{
			case(43):
			case(44):
			case(45):
			if(isBrain)
			animName+="HeadButt";
			else
			animName+="UnarmedOne";
			break;
			case(46):
			case(47):
			case(48):
			if(isBrain)
			animName+="Whip";
			else
			animName+="UnarmedTwo";
			break;
			
			case(54):
			animName+="Single";
			break;
			case(55):
			animName+="Burst";
			break;
			case(56):
			animName+="Burst";
			break;
			case(58):
			animName+="Single";
			break;
			case(53):
			animName+="Throw";
			break;
			
			case(49):
			case(50):
			case(51):
			case(52):
			if(anim1==(4)||anim1==(16)||anim1==(17))
			animName+="Slash";
			else if(anim1==(5)||anim1==(6)||anim1==(18))
			animName+="Swing";
			else
			animName+="Thrust";
			break;
			
			default:
			break;
		}
	}
	else
	{
		animName+="";
		switch(anim2)
		{
			case(100):
			animName+="StandFallenback";
			break;
			case(101):
			animName+="StandFallenforward";
			break;
			case(102):
			animName+="Death";
			break;
			case(103):
			animName+="Death";
			break;
			case(110):
			animName+="DeathBighole";
			break;
			case(111):
			animName+="DeathRiddled";
			break;
			case(112):
			animName+="DeathRiddled";
			break;
			case(113):
			animName+="DeathMelt";
			break;
			case(114):
			animName+="DeathElectrify";
			break;
			case(115):
			animName+="DeathCutinhalf";
			break;
			case(116):
			animName+="DeathMelt";
			break;
			case(117):
			animName+="DeathExplode";
			break;
			case(118):
			animName+="DeathFire";
			break;
			case(119):
			animName+="DeathFire";
			break;
			default:
			return null;
		}
	}
	
	animName+=".spr";
	return animName;
}

string@ProcessArcanum(uint crType,uint anim1,uint anim2,uint&pass,uint&flags,int&ox,int&oy)
{
	string@crTypeName=GetCritterTypeName(crType);
	string animName; 
	
	if(crTypeName[0]==67)
	{
		animName+="art/critter/";
		animName+=substring(crTypeName,1,3)+"/"+substring(crTypeName,1,5);
	}
	
	else if(crTypeName[0]==77)
	{
		animName+="art/monster/";
		animName+=substring(crTypeName,1,3)+"/"+substring(crTypeName,1,5);
	}
	
	else
	{
		animName+="art/unique_npc/";
		animName+=substring(crTypeName,1,5)+"/"+substring(crTypeName,1,5);
	} 
	
	uint palette=anim1>>((8)+8);
	palette&=3; 
	
	if(anim1&(0x1000)!=0)
	animName+="s";
	else
	animName+="x"; 
	
	anim1&=(0x000000FF); 
	
	switch(anim1)
	{
		case(1):
		
		if(pass==0)
		{
			animName+="a";
			pass++;
		}
		else
		{
			animName+="b";
		}
		break;
		
		case(4):
		animName+="c";
		break;
		case(5):
		animName+="f";
		break;
		case(6):
		animName+="f";
		break;
		case(7):
		animName+="n";
		break;
		case(8):
		animName+="g";
		break;
		case(9):
		animName+="g";
		break;
		case(10):
		animName+="k";
		break;
		case(11):
		animName+="k";
		break;
		case(12):
		animName+="k";
		break;
		case(13):
		animName+="k";
		break;
		case(14):
		animName+="k";
		break;
		case(15):
		animName+="k";
		break;
		case(16):
		animName+="d";
		break;
		case(17):
		animName+="h";
		break;
		case(18):
		animName+="e";
		break;
		case(19):
		animName+="i";
		break;
		default:
		break;
	} 
	
	bool changeAtoB=false;
	switch(anim2)
	{
		case(1):
		animName+="a";
		if(crType<(600)||crType>(699))
		changeAtoB=true;
		break;
		case(41):
		animName+="a";
		changeAtoB=true;
		break;
		case(2):
		animName+="x";
		changeAtoB=true;
		break;
		case(3):
		animName+="b";
		break;
		case(5):
		animName+="g";
		break;
		case(7):
		animName+="d";
		break;
		case(8):
		animName+="d";
		break;
		case(82):
		animName+="h";
		break;
		case(83):
		animName+="h";
		break;
		case(88):
		animName+="i";
		break;
		case(89):
		animName+="i";
		break;
		case(86):
		animName+="i";
		flags|=(0x01);
		break;
		case(87):
		animName+="i";
		flags|=(0x01);
		break;
		case(27):
		animName+="k";
		break;
		case(35):
		animName+="k";
		break;
		case(20):
		animName+="m";
		break;
		case(21):
		animName+="m";
		break;
		case(28):
		animName+="m";
		break;
		case(30):
		animName+="m";
		break;
		case(31):
		animName+="m";
		break;
		case(29):
		animName+="m";
		break;
		case(36):
		animName+="m";
		break;
		case(37):
		animName+="u";
		changeAtoB=true;
		break;
		case(43):
		animName+="u";
		changeAtoB=true;
		break;
		case(46):
		animName+="v";
		changeAtoB=true;
		break;
		case(49):
		animName+="u";
		changeAtoB=true;
		break;
		case(51):
		animName+="v";
		changeAtoB=true;
		break;
		case(54):
		animName+="u";
		changeAtoB=true;
		break;
		case(55):
		animName+="u";
		changeAtoB=true;
		break;
		case(56):
		animName+="u";
		changeAtoB=true;
		break;
		case(58):
		animName+="u";
		changeAtoB=true;
		break;
		case(53):
		animName+="o";
		break;
		case(24):
		animName+="a";
		break;
		
		case(100):
		case(101):
		animName+="h";
		flags|=(0x02);
		break;
		case(102):
		case(103):
		animName+="h";
		break;
		case(110):
		case(111):
		animName+="r";
		break;
		case(112):
		case(113):
		case(114):
		case(115):
		animName+="s";
		break;
		case(116):
		case(117):
		case(118):
		case(119):
		animName+="t";
		break;
		default:
		return null;
	}
	
	if(anim1!=(1)&&anim2==(1))
	flags|=(0x01);
	if(anim1==(1)&&changeAtoB)
	animName[animName.length()-2]=98;                        
	
	if(palette!=0)
	animName+="$"+palette;
	
	animName+=".art";
	return animName;
}  

bool critter_animation_substitute(int animType,uint crTypeBase,uint anim1Base,uint anim2Base,uint&crType,uint&anim1,uint&anim2)
{
	
	if((anim1&(0x1000))!=0)
	{
		anim1^=(0x1000);
		return true;
	} 
	
	if(crTypeBase!=0)
	{
		uint crTypeAlias=GetCritterAlias(crTypeBase);
		if(crType==crTypeBase&&crType!=crTypeAlias)
		{
			switch(anim2)
			{
				case(113):
				case(114):
				case(118):
				case(119):
				crType=crTypeAlias;
				return true;
				default:
				break;
			}
		}
	}
	crType=crTypeBase; 
	
	if((anim1&(0x000000FF))==(1))
	{
		bool swapped=true;
		switch(anim2)
		{
			case(4):
			anim2=(3);
			break;
			case(5):
			anim2=(3);
			break;
			case(6):
			anim2=(5);
			break;
			case(7):
			anim2=(3);
			break;
			case(8):
			anim2=(7);
			break;
			case(27):
			anim2=(28);
			break;
			case(29):
			anim2=(28);
			break;
			default:
			swapped=false;
			break;
		}
		if(swapped)
		return true;
	} 
	
	bool swapped=true;
	switch(anim2)
	{
		case(2):
		anim2=(1);
		break;
		case(41):
		anim2=(1);
		break;
		case(26):
		anim2=(28);
		break;
		case(44):
		anim2=(43);
		break;
		case(45):
		anim2=(44);
		break;
		case(46):
		anim2=(43);
		break;
		case(47):
		anim2=(46);
		break;
		case(48):
		anim2=(46);
		break;
		case(51):
		anim2=(49);
		break;
		case(50):
		anim2=(49);
		break;
		case(52):
		anim2=(51);
		break;
		case(56):
		anim2=(55);
		break;
		case(55):
		anim2=(54);
		break;
		case(57):
		anim2=(43);
		break;
		case(58):
		anim2=(54);
		break;
		case(59):
		anim2=(28);
		break;
		case(53):
		anim2=(43);
		break;
		case(30):
		anim2=(28);
		break;
		case(31):
		anim2=(30);
		break;
		case(71):
		anim2=(70);
		break;
		case(73):
		anim2=(72);
		break;
		case(75):
		anim2=(74);
		break;
		case(77):
		anim2=(76);
		break;
		case(79):
		anim2=(78);
		break;
		case(81):
		anim2=(80);
		break;
		case(35):
		anim2=(27);
		break;
		case(36):
		anim2=(28);
		break;
		case(37):
		anim2=(43);
		break;
		case(20):
		anim2=(28);
		break;
		case(21):
		anim2=(28);
		break;
		
		case(83):
		anim2=(82);
		break;
		case(85):
		anim2=(84);
		break;
		case(87):
		anim2=(86);
		break;
		case(89):
		anim2=(88);
		break;
		case(101):
		anim2=(100);
		break;
		case(91):
		anim2=(90);
		break;
		case(93):
		anim2=(92);
		break;
		case(95):
		anim2=(94);
		break;
		
		case(102):
		anim2=(82);
		break;
		case(103):
		anim2=(83);
		break;
		case(110):
		case(111):
		case(112):
		case(113):
		case(114):
		case(115):
		case(116):
		case(117):
		case(118):
		case(119):
		anim2=(102);
		break;
		
		default:
		swapped=false;
		break;
	}
	if(swapped)
	return true; 
	
	anim2=anim2Base; 
	
	uint flags=anim1&(0xFFFFFF00);
	anim1&=(0x000000FF);
	switch(anim1)
	{
		case(4):
		anim1=(1);
		break;
		case(5):
		anim1=(4);
		break;
		case(6):
		anim1=(5);
		break;
		case(7):
		anim1=(4);
		break;
		case(8):
		anim1=(1);
		break;
		case(9):
		anim1=(8);
		break;
		case(10):
		anim1=(9);
		break;
		case(15):
		anim1=(10);
		break;
		case(12):
		anim1=(15);
		break;
		case(13):
		anim1=(12);
		break;
		case(14):
		anim1=(13);
		break;
		case(11):
		anim1=(15);
		break;
		case(16):
		anim1=(4);
		break;
		case(17):
		anim1=(4);
		break;
		case(18):
		anim1=(6);
		break;
		case(19):
		anim1=(4);
		break;
		default:
		return false;
	}
	anim1|=flags;
	
	return true;
}                                                          

bool critter_animation_fallout(uint crType,uint&anim1,uint&anim2,uint&anim1ex,uint&anim2ex,uint&flags)
{
	
	anim1&=(0x000000FF); 
	
	switch(anim1)
	{
		case(1):
		anim1=(1);
		break;
		case(4):
		anim1=(4);
		break;
		case(5):
		anim1=(5);
		break;
		case(6):
		anim1=(6);
		break;
		case(7):
		anim1=(7);
		break;
		case(8):
		anim1=(8);
		break;
		case(9):
		anim1=(9);
		break;
		case(10):
		anim1=(10);
		break;
		case(11):
		anim1=(11);
		break;
		case(12):
		anim1=(12);
		break;
		case(13):
		anim1=(13);
		break;
		case(14):
		anim1=(11);
		break;
		case(15):
		anim1=(11);
		break;
		case(16):
		anim1=(16);
		break;
		case(17):
		anim1=(4);
		break;
		case(18):
		anim1=(5);
		break;
		case(19):
		anim1=(1);
		break;
		default:
		anim1=(1);
		break;
	} 
	
	switch(anim2)
	{
		case(1):
		anim2=(1);
		flags|=(0x01);
		break;
		case(2):
		anim2=(1);
		flags|=(0x01);
		break;
		case(3):
		anim2=(2);
		break;
		case(4):
		anim2=(2);
		break;
		case(5):
		anim2=(20);
		anim1=(1);
		break;
		case(6):
		anim2=(20);
		anim1=(1);
		break;
		case(20):
		anim2=(3);
		break;
		case(21):
		anim2=(4);
		break;
		case(22):
		anim2=(8);
		break;
		case(23):
		anim2=(9);
		break;
		case(24):
		anim2=(1);
		break;
		
		case(27):
		anim2=(11);
		anim1=(1);
		break;
		case(28):
		anim2=(12);
		anim1=(1);
		break;
		case(29):
		anim2=(12);
		anim1=(1);
		break;
		case(35):
		anim2=(11);
		anim1=(1);
		break;
		case(36):
		anim2=(12);
		anim1=(1);
		break;
		case(37):
		anim2=(17);
		anim1=(1);
		break;
		case(41):
		anim2=(1);
		flags|=(0x01);
		break;
		case(43):
		anim2=(17);
		anim1=(1);
		break;
		case(46):
		anim2=(18);
		anim1=(1);
		break;
		case(49):
		anim2=(6);
		break;
		case(50):
		anim2=(6);
		break;
		case(51):
		anim2=(7);
		break;
		case(52):
		anim2=(7);
		break;
		case(54):
		anim2=(10);
		break;
		case(55):
		anim2=(11);
		break;
		case(56):
		anim2=(11);
		break;
		case(58):
		anim2=(12);
		break;
		case(57):
		anim2=(17);
		anim1=(1);
		break;
		case(53):
		anim2=(anim1==(1)?(19):(13));
		break;
		case(70):
		anim2=(anim1==(1)?(14):(5));
		break;
		case(71):
		anim2=(anim1==(1)?(14):(5));
		break;
		case(72):
		anim2=(15);
		break;
		case(73):
		anim2=(16);
		break;
		case(74):
		anim2=(15);
		break;
		case(75):
		anim2=(16);
		break;
		case(82):
		anim2=(1);
		anim1=(2);
		break;
		case(83):
		anim2=(2);
		anim1=(2);
		break;
		case(88):
		anim2=(10);
		anim1=(3);
		break;
		case(89):
		anim2=(8);
		anim1=(3);
		break;
		case(100):
		anim2=(15);
		anim1=(2);
		break;
		case(101):
		anim2=(16);
		anim1=(2);
		break;
		case(110):
		anim2=(4);
		anim1=(2);
		break;
		case(111):
		anim2=(6);
		anim1=(2);
		break;
		case(112):
		anim2=(7);
		anim1=(2);
		break;
		case(113):
		anim2=(8);
		anim1=(2);
		break;
		case(114):
		anim2=(11);
		anim1=(2);
		break;
		case(115):
		anim2=(9);
		anim1=(2);
		break;
		case(116):
		anim2=(13);
		anim1=(2);
		break;
		case(117):
		anim2=(12);
		anim1=(2);
		break;
		
		case(86):
		anim2=(1);
		anim1=(2);
		flags|=(0x02);
		break;
		case(87):
		anim2=(2);
		anim1=(2);
		flags|=(0x02);
		break;
		
		case(118):
		anim2=(5);
		anim1=(2);
		break;
		case(119):
		anim2=(14);
		anim1=(2);
		anim2ex=(5);
		anim1ex=(2);
		break;
		
		case(102):
		anim1=(2);
		anim1ex=(2);
		anim2=(1);
		anim2ex=(15);
		break;
		case(103):
		anim1=(2);
		anim1ex=(2);
		anim2=(2);
		anim2ex=(16);
		break;
		case(59):
		case(30):
		case(31):
		anim1ex=anim1;
		anim2=(8);
		anim2ex=(9);
		break;                    
		
		default:
		return false;
	}
	return true;
} 

void PlayAnimSound(uint crType,int gender,uint anim1,uint anim2)
{
	if(anim2==(3)||anim2==(4)||anim2==(5)||
	anim2==(6)||anim2==(7)||anim2==(8))
	return;
	
	bool isFemale=gender==(1);
	int animType=GetCritterAnimType(crType);
	string crTypeSound=GetCritterSoundName(crType); 
	
	anim1&=(0x000000FF);
	
	if(animType==(0))
	{
		
		uint fAnim1=anim1,fAnim2=anim2,fAnim1ex=0,fAnim2ex=0,fFlags=0;
		if(!critter_animation_fallout(crType,fAnim1,fAnim2,fAnim1ex,fAnim2ex,fFlags)||fFlags!=0)
		return; 
		
		const string abc="_abcdefghijklmnopqrstuvwxyz0123456789";
		string sound=crTypeSound;
		sound.resize(sound.length()+1);
		sound[sound.length()-1]=abc[fAnim1];
		sound.resize(sound.length()+1);
		sound[sound.length()-1]=abc[fAnim2];
		sound+=".acm"; 
		
		if(sound[0]==104&&sound[1]==97)
		sound[1]=(isFemale?102:109); 
		
		if(PlaySound(sound))
		return; 
		
		if(sound[0]==104)
		{
			
			for(uint i=2,j=crTypeSound.length();i<j;i++)
			sound[i]=120;
			if(PlaySound(sound))
			return; 
			
			if(sound[1]==102)
			{
				sound[1]=109;
				if(PlaySound(sound))
				return;
			}
		}
	}
	else
	{
		uint sexPos=crTypeSound.length()-1;
		if(crTypeSound[sexPos]==85)
		crTypeSound[sexPos]=(isFemale?70:77);
		
		for(uint pass=0;pass<4;pass++)
		{
			if(pass==2)
			{
				if(crTypeSound[sexPos]==73)
				break;
				crTypeSound[sexPos]=85;
			}
			
			string sound=crTypeSound+"_";
			
			if(pass==0||pass==2)
			{
				switch(anim1)
				{
					case(1):
					sound+="Unarmed";
					break;
					case(4):
					sound+="Knife";
					break;
					case(5):
					sound+="Club";
					break;
					case(6):
					sound+="Hammer";
					break;
					case(7):
					sound+="Spear";
					break;
					case(8):
					sound+="Pistol";
					break;
					case(9):
					sound+="SMG";
					break;
					case(10):
					sound+="Shootgun";
					break;
					case(11):
					sound+="HeavyRifle";
					break;
					case(12):
					sound+="Minigun";
					break;
					case(13):
					sound+="RocketLauncher";
					break;
					case(14):
					sound+="Flamer";
					break;
					case(15):
					sound+="Rifle";
					break;
					case(16):
					sound+="Sword";
					break;
					case(17):
					sound+="LongSword";
					break;
					case(18):
					sound+="Axe";
					break;
					case(19):
					sound+="Bow";
					break;
					default:
					break;
				}
			}
			
			switch(anim2)
			{
				case(1):
				sound+="Idle";
				break;
				case(2):
				sound+="IdleStunned";
				break;
				case(3):
				sound+="Walk";
				break;
				case(4):
				sound+="Limp";
				break;
				case(5):
				sound+="Run";
				break;
				case(6):
				sound+="PanicRun";
				break;
				case(7):
				sound+="SneakWalk";
				break;
				case(8):
				sound+="SneakRun";
				break;
				case(10):
				sound+="Stand";
				break;
				case(11):
				sound+="Crouch";
				break;
				case(12):
				sound+="Prone";
				break;
				case(20):
				sound+="ShowWeapon";
				break;
				case(21):
				sound+="HideWeapon";
				break;
				case(22):
				sound+="PrepareWeapon";
				break;
				case(23):
				sound+="TurnoffWeapon";
				break;
				case(24):
				sound+="Fidget";
				break;
				case(26):
				sound+="Climbing";
				break;
				case(27):
				sound+="Pickup";
				break;
				case(28):
				sound+="Use";
				break;
				case(29):
				sound+="SwitchItems";
				break;
				case(30):
				sound+="Reload";
				break;
				case(31):
				sound+="Repair";
				break;
				case(35):
				sound+="Loot";
				break;
				case(36):
				sound+="Steal";
				break;
				case(37):
				sound+="Push";
				break;
				case(40):
				sound+="BeginCombat";
				break;
				case(41):
				sound+="IdleCombat";
				break;
				case(42):
				sound+="EndCombat";
				break;
				case(43):
				sound+="PunchRight";
				break;
				case(44):
				sound+="PunchLeft";
				break;
				case(45):
				sound+="PunchCombo";
				break;
				case(46):
				sound+="KickHi";
				break;
				case(47):
				sound+="KickLo";
				break;
				case(48):
				sound+="KickCombo";
				break;
				case(49):
				sound+="Thrust1H";
				break;
				case(50):
				sound+="Thrust2H";
				break;
				case(51):
				sound+="Swing1H";
				break;
				case(52):
				sound+="Swing2H";
				break;
				case(53):
				sound+="Throw";
				break;
				case(54):
				sound+="Single";
				break;
				case(55):
				sound+="Burst";
				break;
				case(56):
				sound+="Sweep";
				break;
				case(57):
				sound+="Butt";
				break;
				case(58):
				sound+="Flame";
				break;
				case(59):
				sound+="NoRecoil";
				break;
				case(70):
				sound+="DodgeFront";
				break;
				case(71):
				sound+="DodgeBack";
				break;
				case(72):
				sound+="DamageFront";
				break;
				case(73):
				sound+="DamageBack";
				break;
				case(74):
				sound+="DamageMulFront";
				break;
				case(75):
				sound+="DamageMulBack";
				break;
				case(76):
				sound+="WalkDamageFront";
				break;
				case(77):
				sound+="WalkDamageBack";
				break;
				case(78):
				sound+="LimpDamageFront";
				break;
				case(79):
				sound+="LimpDamageBack";
				break;
				case(80):
				sound+="RunDamageFront";
				break;
				case(81):
				sound+="RunDamageBack";
				break;
				case(82):
				sound+="KnockFront";
				break;
				case(83):
				sound+="KnockBack";
				break;
				case(84):
				sound+="LaydownFront";
				break;
				case(85):
				sound+="LaydownBack";
				break;
				case(86):
				sound+="IdleProneFront";
				break;
				case(87):
				sound+="IdleProneBack";
				break;
				case(88):
				sound+="StandupFront";
				break;
				case(89):
				sound+="StandupBack";
				break;
				case(90):
				sound+="DamageProneFront";
				break;
				case(91):
				sound+="DamageProneBack";
				break;
				case(92):
				sound+="DamageMulProneFront";
				break;
				case(93):
				sound+="DamageMulProneBack";
				break;
				case(94):
				sound+="TwitchProneFront";
				break;
				case(95):
				sound+="TwitchProneBack";
				break;
				case(100):
				sound+="DeadProneFront";
				break;
				case(101):
				sound+="DeadProneBack";
				break;
				case(102):
				sound+="DeadFront";
				break;
				case(103):
				sound+="DeadBack";
				break;
				case(110):
				sound+="DeadBloodySingle";
				break;
				case(111):
				sound+="DeadBloodyBack";
				break;
				case(112):
				sound+="DeadBurst";
				break;
				case(113):
				sound+="DeadPulse";
				break;
				case(114):
				sound+="DeadPulseDust";
				break;
				case(115):
				sound+="DeadLaser";
				break;
				case(116):
				sound+="DeadFused";
				break;
				case(117):
				sound+="DeadExplode";
				break;
				case(118):
				sound+="DeadBurn";
				break;
				case(119):
				sound+="DeadBurnRun";
				break;
				default:
				break;
			} 
			
			if(PlaySound(sound+".wav"))
			return; 
			
			uint len=0;
			int pos=findLast(sound,"Front");
			if(pos!=-1)
			len=5;
			else
			{
				pos=findLast(sound,"Back");
				if(pos!=-1)
				len=4;
				else
				continue;
			}
			sound.resize(sound.length()-len);
			
			if(PlaySound(sound+".wav"))
			return;
		}
	}
}

