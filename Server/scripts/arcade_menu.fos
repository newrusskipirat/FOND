// Author: TabaK

#include "_macros.fos"

#define SKIN_BRAHMIN           ( 15 )
#define SKIN_DOG               ( 16 )
#define SKIN_RAT_GRIZLY        ( 19 )
#define SKIN_SCORP             ( 22 )
#define SKIN_FLOATER           ( 23 )
#define SKIN_RAT               ( 24 )
#define SKIN_CENTAUR           ( 25 )
#define SKIN_CLAW              ( 51 )
#define SKIN_MANTIS            ( 52 )
#define SKIN_RAT_PIG           ( 55 )
#define SKIN_SCORP_SMALL       ( 59 )
#define SKIN_CLAW_SMALL        ( 60 )
#define SKIN_GECKO_SILVER      ( 67 )
#define SKIN_GECKO_GOLD        ( 68 )
#define SKIN_RAT_KING          ( 76 )
#define SKIN_ALIEN             ( 80 )
#define SKIN_GECKO_FIRE        ( 81 )
#define SKIN_ALIEN_QUEEN       ( 86 )
#define SKIN_GIGANT_ANT        ( 97 )
#define SKIN_CLAW_KING         ( 100 )

#define GMAP_WIDTH             ( 7 )
#define GMAP_HEIGH             ( 12 )
#define GMAP_SECTORS           ( 5 )

#define MAP_SATTER_WILD        ( 101 )

#define DEATH_TIMEOUT          ( 25 )

#define ANYDATA_ARCADE_HIVE    "ARCADE_HIVE"

import void skin( Critter& cr, int crType ) from "skins";
import void ChangeCritterSpeed( Critter& cr ) from "speed"; // pm add
// uint16[]  body = {24, 52, 97, 55, 67, 16, 68, 15, 19, 76, 59, 22, 60, 80, 25, 51, 23, 86, 100, 81};
//  Index:         0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,  18, 19.
// uint16[] realbody(8,0);

import uint GetAllPlayers( Critter@[]& crs ) from "manager";
// import uint GetWildness(uint16 x, uint16 y) from "world";

void unsafe_arcade( Critter& player, int param0, int param1, int param2, string@ param3, int[] @ param4 )
{
    if( player.Param[ QST_GAMEMODE ] != GAME_START )
    {
        player.Say( SAY_NETMSG, "ошибка, обратитесь к Мастерам" );
        return;
    }
    if( player.Stat[ ST_LEVEL ] > 1 || player.Stat[ ST_EXPERIENCE ] > 0 || player.Stat[ ST_MUTATION ] > 0 )
    {
        player.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 106941 );
        return;
    }

    Item@[] items;
    player.GetItems( SLOT_INV, items );
    player.GetItems( SLOT_HAND1, items );
    player.GetItems( SLOT_HAND2, items );
    DeleteItems( items );
    DontPickItUp( player );

    if( player.Param[ QST_GAMEMODE ] == GAME_ARCADE )
    {
        player.SayMsg( SAY_NETMSG, TEXTMSG_GAME, 106940 );
        return;
    }
    else
    {
        // player.Say(SAY_NETMSG, "Включен аркадный режим игры. Выбор существа через "+DEATH_TIMEOUT+" секунд.");
        // ArcadeDead(player, DEATH_TIMEOUT);
        // SkinMenu(player);

        player.ParamBase[ QST_GAMEMODE ] = GAME_ARCADE;
        Map@ map = GetMapByPid( 94, 0 );
        if( !valid( map ) )
        {
            player.Say( SAY_NETMSG, "Нет карты аркады, обратитесь к Мастерам." );
            return;
        }
        player.Say( SAY_NETMSG, "Включен аркадный режим игры." );
        player.TransitToMap( map.Id, 0 );
    }
    return;
}
// ////////////////

void _InitArcadeWell( Item& item, bool firstTime )
{
    item.SetEvent( ITEM_EVENT_SKILL, "e_WellPick" );
}

bool e_WellPick( Item& item, Critter& cr, int skill )
{
    if( ( skill == SKILL_PICK_ON_GROUND ) && ( item.Accessory == ACCESSORY_HEX ) )
    {
        StartArcadeMenu( cr );
    }
    return false;
}

void ShowHiveButtons( Critter& cr )
{
    int[] arcadeHive;
    if( IsAnyData( ANYDATA_ARCADE_HIVE ) && @cr != null )
        GetArcadeData( arcadeHive );
    else
    {
        Log( "arcade show buttons error" );
        return;
    }
    cr.RunClientScript( "client_screen_additional@SendHiveInfo", 0, 0, 0, null, arcadeHive );
}

void ArcadeDead( Critter& cr, uint8 time )
{
    // cr.Say(SAY_NETMSG, "dead");
    // uint16[] id = {cr.Id};
    // CreateTimeEvent(__FullSecond+REAL_MS((time > 0 ? time : DEATH_TIMEOUT)*1000), "e_arcade_dead", cr.Id, true);
    // cr.Say(SAY_NETMSG, "dead2");
    // cr.RunClientScript("client_screen_additional@ShowGlobalMap", 0, 0, 0, null, arcadeHive);

    if( cr.GetTimeEvents( CTE_ARCADEDANGER, null, null, null ) == 0 )
    {
        cr.Say( SAY_NETMSG, "Вы умерли, ждите 30 секунд до воскрешения." );
        cr.AddTimeEvent( "cte_arcade_dead", REAL_SECOND( 30 ), CTE_ARCADEDANGER, 0 );
    }
}

uint cte_arcade_dead( Critter& cr, int identifier, uint& rate )
{
    Log( "arcade respawn try" );
    Map@ map = GetMapByPid( 94, 0 );
    if( !valid( map ) )
        return 0;
    Map@ map2 = cr.GetMap();
    if( !valid( map ) || map.GetProtoId() != 94 )
        cr.TransitToMap( map.Id, 0 );
    cr.StatBase[ ST_ARCADE_DEAD ] = 1;
    cr.ToLife();
    Log( "arcade respawn done" );
    return 0;
}

void StartArcadeMenu( Critter@ cr ) // Export
{
    cr.ParamBase[ QST_GAMEMODE ] = GAME_ARCADE;
    cr.StatBase[ ST_ARCADE_DEAD ] = 1;
    Critter@[] crs;
    GetAllPlayers( crs );
    bool thereistarget = false;
    uint j = 0, max = crs.length();
    if( max < 2 )
        return;

    int    BonusWild = 0;
    uint16 time = 0;
    uint16 hour = 0;
    GetTime( time, time, time, time, hour, time, time, time );
    if( 7 > hour && hour > 22 )
        BonusWild = 20;                     // bonus wildness at night

    for( uint i = 0; i < max; i++ )
    {
        j = Random( 0, max - 1 );
        if( not valid( crs[ j ] ) )
            continue;
        Map@ map = crs[ j ].GetMap();
        if( not valid( map ) )
            continue;
        if( crs[ j ].Param[ QST_GAMEMODE ] == GAME_TEST || crs[ j ].Param[ QST_GAMEMODE ] == GAME_START || crs[ j ].Param[ QST_GAMEMODE ] == GAME_ARCADE ||
            crs[ j ].GetAccess() >= ACCESS_MODER || crs[ j ].IsDead() )
            continue;
        if( map.GetProtoId() != 91 && ( map.GetProtoId() < 15 || map.GetProtoId() > 20 ) )
            continue;

        Location @ loc = map.GetLocation();
        int x = 0, y = 0;
        x = loc.WorldX * 0.1;
        y = loc.WorldY * 0.1;
        int Wild1 = 100, Wild2 = 100, Wild = 100;
        if( ABS( x - 7 ) + ABS( y - 7 ) <= 10 )
        {
            Wild1 = ( ABS( x - 7 ) + ABS( y - 7 ) ) * 10;
            Wild1 = CLAMP( Wild1, 0, 100 );
        }
        if( ABS( x - 17 ) + ABS( y - 15 ) <= 8 )
        {
            Wild2 = ( ABS( x - 17 ) + ABS( y - 15 ) + 2 ) * 10;
            Wild2 = CLAMP( Wild2, 0, 100 );
        }
        Wild = CLAMP( Wild, 0, Wild1 );
        Wild = CLAMP( Wild, 0, Wild2 );


        int level = cr.Stat[ ST_LEVEL ];
        int danger = crs[ j ].ParamBase[ ST_ARCADE_DANGER ];

        if( ( Wild + BonusWild ) < danger )
            continue;

        if( Wild > 0 )
        {
            Wild = Wild + BonusWild;
            int delta = Wild - danger;
            cr.ParamBase[ ST_KILLER_PERSON ] = crs[ j ].Id;
            cr.ParamBase[ ST_VAR0 ] = Wild;
            thereistarget = true;
            if( Wild < 50 )
            {
                if( Wild >= 40 /*&& level >=6*/ )
                    cr.ShowScreen( SCREEN_DIALOGBOX, 12, "answer_StartArcadeMenu_1" );
                else if( Wild >= 30 /*&& level >=4*/ )
                    cr.ShowScreen( SCREEN_DIALOGBOX, 10, "answer_StartArcadeMenu_1" );
                else if( Wild >= 20 /*&& level >=2*/ )
                    cr.ShowScreen( SCREEN_DIALOGBOX, 7, "answer_StartArcadeMenu_1" );
                else
                    cr.ShowScreen( SCREEN_DIALOGBOX, 4, "answer_StartArcadeMenu_1" );
                cr.Say( SAY_DIALOGBOX_TEXT, "Цель в городских окраинах, доступно " + delta + " едениц агрессии" );
                cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "2 Крыса" );
                cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "2 Мантис" );
                cr.Say( SAY_DIALOGBOX_BUTTON( 2 ), "2 муравей" );
                cr.Say( SAY_DIALOGBOX_BUTTON( 3 ), "4 м. скорпион" );
                if( Wild >= 20 /*&& level >=2*/ )
                {
                    cr.Say( SAY_DIALOGBOX_BUTTON( 4 ), "7 свинокрыс" );
                    cr.Say( SAY_DIALOGBOX_BUTTON( 5 ), "10 собака" );
                    cr.Say( SAY_DIALOGBOX_BUTTON( 6 ), "10 гекко" );
                }
                if( Wild >= 30 /*&& level >=4*/ )
                {
                    cr.Say( SAY_DIALOGBOX_BUTTON( 7 ), "12 кротокрыс" );
                    cr.Say( SAY_DIALOGBOX_BUTTON( 8 ), "15 большой скорпион" );
                    cr.Say( SAY_DIALOGBOX_BUTTON( 9 ), "15 золотой гекко" );
                }
                if( Wild >= 40 /*&& level >=6*/ )
                {
                    cr.Say( SAY_DIALOGBOX_BUTTON( 10 ), "20 мутант кротокрыс" );
                    cr.Say( SAY_DIALOGBOX_BUTTON( 11 ), "25 малый коготь" );
                }
            }
            if( Wild >= 50 )
            {
                if( Wild >= 100 /*&& level >=12*/ )
                    cr.ShowScreen( SCREEN_DIALOGBOX, 9, "answer_StartArcadeMenu_2" );
                else if( Wild >= 70 /*&& level >=9*/ )
                    cr.ShowScreen( SCREEN_DIALOGBOX, 8, "answer_StartArcadeMenu_2" );
                else if( Wild >= 60 /*&& level >=6*/ )
                    cr.ShowScreen( SCREEN_DIALOGBOX, 6, "answer_StartArcadeMenu_2" );
                else
                    cr.ShowScreen( SCREEN_DIALOGBOX, 4, "answer_StartArcadeMenu_2" );
                cr.Say( SAY_DIALOGBOX_TEXT, "Цель в диких землях, доступно " + delta + " едениц агрессии" );
                cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "20 волк" );
                cr.Say( SAY_DIALOGBOX_BUTTON( 1 ), "20 большой скорп" );
                cr.Say( SAY_DIALOGBOX_BUTTON( 2 ), "25 мутант кротокрыс" );
                cr.Say( SAY_DIALOGBOX_BUTTON( 3 ), "25 малый коготь" );
                if( Wild >= 60 /*&& level >=6*/ )
                {
                    cr.Say( SAY_DIALOGBOX_BUTTON( 4 ), "50 огнегекко" );
                    cr.Say( SAY_DIALOGBOX_BUTTON( 5 ), "40 большой коготь" );
                }
                if( Wild >= 70 /*&& level >=9*/ )
                {
                    cr.Say( SAY_DIALOGBOX_BUTTON( 6 ), "35 летатель" );
                    cr.Say( SAY_DIALOGBOX_BUTTON( 7 ), "35 кентавр" );
                }
                if( Wild >= 100 /*&& level >=12*/ )
                {
                    cr.Say( SAY_DIALOGBOX_BUTTON( 8 ), "100 серый коготь" );
                }
            }
        }
    }
    if( !thereistarget )
    {
        cr.ShowScreen( SCREEN_DIALOGBOX, 1, "answer_StartArcadeMenu_No" );
        cr.Say( SAY_DIALOGBOX_TEXT, "Сейчас нет доступных аркаде целей, попробуйте попозже" );
        cr.Say( SAY_DIALOGBOX_BUTTON( 0 ), "Проверить еще раз" );
    }
}

void answer_StartArcadeMenu_No( Critter& player, uint answerI, string& answerS )
{
    if( answerI == 0 )
    {
        StartArcadeMenu( player );
    }
}

void answer_StartArcadeMenu_1( Critter& player, uint answerI, string& answerS )
{
    Critter@ targetCr = GetCritter( player.ParamBase[ ST_KILLER_PERSON ] );
    if( targetCr is null )
        return;
    int Wild = player.ParamBase[ ST_VAR0 ];
    if( answerI == 0 )
    {
        player.ParamBase[ ST_ARCADE_DANGER ] = 10;
        if( Wild <= 10 )
            set_arcade_stat( player, SKIN_RAT, 0 );
        else if( Wild <= 20 )
            set_arcade_stat( player, SKIN_RAT, 1 );
        else
            set_arcade_stat( player, SKIN_RAT, 2 );
        JumpToTarget( player, targetCr, 2 );
    }
    if( answerI == 1 )
    {
        player.ParamBase[ ST_ARCADE_DANGER ] = 10;
        if( Wild <= 10 )
            set_arcade_stat( player, SKIN_MANTIS, 0 );
        else if( Wild <= 20 )
            set_arcade_stat( player, SKIN_MANTIS, 1 );
        else
            set_arcade_stat( player, SKIN_MANTIS, 2 );
        JumpToTarget( player, targetCr, 2 );
    }
    if( answerI == 2 )
    {
        player.ParamBase[ ST_ARCADE_DANGER ] = 10;
        if( Wild <= 10 )
            set_arcade_stat( player, SKIN_GIGANT_ANT, 0 );
        else if( Wild <= 20 )
            set_arcade_stat( player, SKIN_GIGANT_ANT, 1 );
        else
            set_arcade_stat( player, SKIN_GIGANT_ANT, 2 );
        JumpToTarget( player, targetCr, 2 );
    }
    if( answerI == 3 )
    {
        player.ParamBase[ ST_ARCADE_DANGER ] = 10;
        if( Wild <= 10 )
            set_arcade_stat( player, SKIN_SCORP_SMALL, 0 );
        else if( Wild <= 20 )
            set_arcade_stat( player, SKIN_SCORP_SMALL, 1 );
        else
            set_arcade_stat( player, SKIN_SCORP_SMALL, 2 );
        JumpToTarget( player, targetCr, 4 );
    }
    if( answerI == 4 )
    {
        player.ParamBase[ ST_ARCADE_DANGER ] = 20;
        if( Wild <= 20 )
            set_arcade_stat( player, SKIN_RAT_PIG, 0 );
        else if( Wild <= 30 )
            set_arcade_stat( player, SKIN_RAT_PIG, 1 );
        else
            set_arcade_stat( player, SKIN_RAT_PIG, 2 );
        JumpToTarget( player, targetCr, 7 );
    }
    if( answerI == 5 )
    {
        player.ParamBase[ ST_ARCADE_DANGER ] = 20;
        if( Wild <= 20 )
            set_arcade_stat( player, SKIN_DOG, 0 );
        else if( Wild <= 30 )
            set_arcade_stat( player, SKIN_DOG, 1 );
        else
            set_arcade_stat( player, SKIN_DOG, 2 );
        JumpToTarget( player, targetCr, 10 );
    }
    if( answerI == 6 )
    {
        player.ParamBase[ ST_ARCADE_DANGER ] = 20;
        if( Wild <= 20 )
            set_arcade_stat( player, SKIN_GECKO_SILVER, 0 );
        else if( Wild <= 30 )
            set_arcade_stat( player, SKIN_GECKO_SILVER, 1 );
        else
            set_arcade_stat( player, SKIN_GECKO_SILVER, 2 );
        JumpToTarget( player, targetCr, 10 );
    }
    if( answerI == 7 )
    {
        player.ParamBase[ ST_ARCADE_DANGER ] = 30;
        if( Wild <= 30 )
            set_arcade_stat( player, SKIN_RAT_GRIZLY, 0 );
        else
            set_arcade_stat( player, SKIN_RAT_GRIZLY, 1 );
        JumpToTarget( player, targetCr, 12 );
    }
    if( answerI == 8 )
    {
        player.ParamBase[ ST_ARCADE_DANGER ] = 30;
        if( Wild <= 30 )
            set_arcade_stat( player, SKIN_SCORP, 0 );
        else
            set_arcade_stat( player, SKIN_SCORP, 1 );
        JumpToTarget( player, targetCr, 15 );
    }
    if( answerI == 9 )
    {
        player.ParamBase[ ST_ARCADE_DANGER ] = 30;
        if( Wild <= 30 )
            set_arcade_stat( player, SKIN_GECKO_GOLD, 0 );
        else
            set_arcade_stat( player, SKIN_GECKO_GOLD, 1 );
        JumpToTarget( player, targetCr, 15 );
    }
    if( answerI == 10 )
    {
        player.ParamBase[ ST_ARCADE_DANGER ] = 40;
        set_arcade_stat( player, SKIN_RAT_KING, 0 );
        JumpToTarget( player, targetCr, 20 );
    }
    if( answerI == 11 )
    {
        player.ParamBase[ ST_ARCADE_DANGER ] = 40;
        set_arcade_stat( player, SKIN_CLAW_SMALL, 0 );
        JumpToTarget( player, targetCr, 25 );
    }
}

void answer_StartArcadeMenu_2( Critter& player, uint answerI, string& answerS )
{
    Critter@ targetCr = GetCritter( player.ParamBase[ ST_KILLER_PERSON ] );
    if( targetCr is null )
        return;
    int Wild = player.ParamBase[ ST_VAR0 ];
    if( answerI == 0 )
    {
        player.ParamBase[ ST_ARCADE_DANGER ] = 30;
        set_arcade_stat( player, SKIN_DOG, 2 );
        JumpToTarget( player, targetCr, 15 );
    }
    if( answerI == 1 )
    {
        player.ParamBase[ ST_ARCADE_DANGER ] = 30;
        set_arcade_stat( player, SKIN_SCORP, 2 );
        JumpToTarget( player, targetCr, 20 );
    }
    if( answerI == 2 )
    {
        player.ParamBase[ ST_ARCADE_DANGER ] = 40;
        if( Wild <= 50 )
            set_arcade_stat( player, SKIN_RAT_KING, 1 );
        else
            set_arcade_stat( player, SKIN_RAT_KING, 2 );
        JumpToTarget( player, targetCr, 25 );
    }
    if( answerI == 3 )
    {
        player.ParamBase[ ST_ARCADE_DANGER ] = 40;
        if( Wild <= 50 )
            set_arcade_stat( player, SKIN_CLAW_SMALL, 1 );
        else
            set_arcade_stat( player, SKIN_CLAW_SMALL, 2 );
        JumpToTarget( player, targetCr, 25 );
    }
    if( answerI == 4 )
    {
        player.ParamBase[ ST_ARCADE_DANGER ] = 60;
        if( Wild <= 60 )
            set_arcade_stat( player, SKIN_GECKO_FIRE, 0 );
        else if( Wild <= 70 )
            set_arcade_stat( player, SKIN_GECKO_FIRE, 1 );
        else
            set_arcade_stat( player, SKIN_GECKO_FIRE, 2 );
        JumpToTarget( player, targetCr, 60 );
    }
    if( answerI == 5 )
    {
        player.ParamBase[ ST_ARCADE_DANGER ] = 60;
        if( Wild <= 60 )
            set_arcade_stat( player, SKIN_CLAW, 0 );
        else if( Wild <= 70 )
            set_arcade_stat( player, SKIN_CLAW, 1 );
        else
            set_arcade_stat( player, SKIN_CLAW, 2 );
        JumpToTarget( player, targetCr, 40 );
    }
    if( answerI == 6 )
    {
        player.ParamBase[ ST_ARCADE_DANGER ] = 70;
        if( Wild <= 70 )
            set_arcade_stat( player, SKIN_FLOATER, 0 );
        else if( Wild <= 80 )
            set_arcade_stat( player, SKIN_FLOATER, 1 );
        else
            set_arcade_stat( player, SKIN_FLOATER, 2 );
        JumpToTarget( player, targetCr, 35 );
    }
    if( answerI == 7 )
    {
        player.ParamBase[ ST_ARCADE_DANGER ] = 70;
        if( Wild <= 70 )
            set_arcade_stat( player, SKIN_CENTAUR, 0 );
        else if( Wild <= 80 )
            set_arcade_stat( player, SKIN_CENTAUR, 1 );
        else
            set_arcade_stat( player, SKIN_CENTAUR, 2 );
        JumpToTarget( player, targetCr, 35 );
    }
    if( answerI == 8 )
    {
        player.ParamBase[ ST_ARCADE_DANGER ] = 100;
        set_arcade_stat( player, SKIN_CLAW_KING, 0 );
        JumpToTarget( player, targetCr, 100 );
    }
}

void JumpToTarget( Critter& cr, Critter@ targetCr, int cost )
{
    Map@   map = targetCr.GetMap();
    uint16 x = 0, y = 0;
    map.GetEntireCoords( 255, 0, x, y );
    cr.TransitToMap( map.Id, x, y + Random( 10, 130 ), 0 );
    cr.StatBase[ ST_ARCADE_DEAD ] = 0;
    uint8 dir = GetDirection( cr.HexX, cr.HexY, targetCr.HexX, targetCr.HexY );
    cr.ParamBase[ ST_CURRENT_HP ] = cr.ParamBase[ ST_MAX_LIFE ] + 200;
    ChangeCritterSpeed( cr );
    string place;
    if( dir == 0 )
        place = "северо-востоке";
    else if( dir == 1 )
        place = "востоке";
    else if( dir == 2 )
        place = "юго-востоке";
    else if( dir == 3 )
        place = "юго-западе";
    else if( dir == 4 )
        place = "западе";
    else
        place = "северо-западе";
    cr.ToKnockout( KNOCKOUT_ANIM2_DEFAULT( ( Random( 0, 1 ) == 1 ) ), 10, cr.HexX, cr.HexY );
    cr.Say( SAY_NETMSG, "Вы чуете жертву на " + place );

    if( targetCr.GetTimeEvents( CTE_ARCADEDANGER, null, null, null ) == 0 )
        targetCr.AddTimeEvent( "cte_arcade_danger", __FullSecond, CTE_ARCADEDANGER, cost );
    else
        targetCr.ParamBase[ ST_ARCADE_DANGER ] += cost;

    cr.AddTimeEvent( "cte_arcade_smelltarget", __FullSecond + REAL_SECOND( 5 ), CTE_ARCADEDANGER, targetCr.Id );
}

uint cte_arcade_danger( Critter& cr, int identifier, uint& rate )
{
    if( cr.ParamBase[ ST_ARCADE_DANGER ] == 0 )
        cr.ParamBase[ ST_ARCADE_DANGER ] = rate;
    if( cr.ParamBase[ ST_ARCADE_DANGER ] > 0 )
        cr.ParamBase[ ST_ARCADE_DANGER ]--;
    if( cr.ParamBase[ ST_ARCADE_DANGER ] <= 0 )
        return 0;
    return ( REAL_SECOND( 20 ) );
}

uint cte_arcade_smelltarget( Critter& cr, int identifier, uint& rate )
{
    Critter@ targetCr = GetCritter( cr.ParamBase[ ST_KILLER_PERSON ] );
    if( !valid( targetCr ) )
    {
        cr.Say( SAY_NETMSG, "Вы потеряли след" );
        cr.ToDead( 0, null );
        return 0;
    }
    if( cr.StatBase[ ST_ARCADE_DEAD ] == 1 || cr.IsDead() )
    {
        cr.Say( SAY_NETMSG, "Вы мертвы" );
        return 0;
    }
    Map @ map = cr.GetMap();
    Map @ mapTg = targetCr.GetMap();
    if( !valid( mapTg ) )
    {
        cr.Say( SAY_NETMSG, "Вы потеряли след" );
        cr.ToDead( 0, null );
        return 0;
    }
    string place = "";
    if( map.Id != mapTg.Id )
    {
        Location @ loc = map.GetLocation();
        Location @ locTg = mapTg.GetLocation();
        if( ( loc.WorldX - locTg.WorldX ) > 20 || ( loc.WorldY - locTg.WorldY ) > 20 )
            cr.ToDead( 0, null );
        if( loc.WorldX < locTg.WorldX )
            place += "восточнее";
        else if( loc.WorldX > locTg.WorldX )
            place += "западнее";
        if( loc.WorldY > locTg.WorldY )
            place += " южнее";
        else if( loc.WorldY < locTg.WorldY )
            place += " севернее";
        cr.Say( SAY_NETMSG, "Вы чуете цель далеко " + place );
    }
    else
    {
        uint8 dir = GetDirection( cr.HexX, cr.HexY, targetCr.HexX, targetCr.HexY );
        if( dir == 0 )
            place = "северо-востоке";
        else if( dir == 1 )
            place = "востоке";
        else if( dir == 2 )
            place = "юго-востоке";
        else if( dir == 3 )
            place = "юго-западе";
        else if( dir == 4 )
            place = "западе";
        else
            place = "северо-западе";
        cr.Say( SAY_NETMSG, "Вы чуете жертву на " + place );
    }
    return ( REAL_SECOND( 5 ) );
}


uint e_arcade_dead( uint[] @ values )
{
    uint16 id = values[ 0 ];
    // Critter @ cr = GetCritter(id);
    // int[] arcadeHive;
    // if(IsAnyData(ANYDATA_ARCADE_HIVE) && @cr != null) GetArcadeData(arcadeHive); else {Log("arcade death time event error"); return 0;}
    // cr.RunClientScript("client_screen_additional@SendHiveInfo", 0, 0, 0, null, arcadeHive);

    // cr.ToLife();
    // cr.TransitToGlobal(false);

    // cr.StatBase[ST_ARCADE_DEAD] = 1;
    // StartArcadeMenu(cr); // выбор цели

    return 0;
}

bool GetArcadeData( int[]& arcadeHive )
{
    // Log("dead1");
    if( IsAnyData( ANYDATA_ARCADE_HIVE ) )
    {
        GetAnyData( ANYDATA_ARCADE_HIVE, arcadeHive );
    }
    else
        return false;
    // Log("dead2");
    return true;
}

void arcadehiveinsert( Critter& cr, uint16 x, uint16 y, uint8 type )
{
    int[] arcadeHive;
    /*if(IsAnyData(ANYDATA_ARCADE_HIVE))
       {
            GetAnyData(ANYDATA_ARCADE_HIVE, arcadeHive);
       }*/
    if( !GetArcadeData( arcadeHive ) )
    {
        cr.Say( SAY_NETMSG, "нет логов, создаем новым массив." );
    }
    uint data = ( int(x) & 0x3FF ) | ( ( int(y) & 0x3FF ) << 10 ) | ( ( int(type) & 0xFFF ) << 20 );
    arcadeHive.insertLast( data );
    if( SetAnyData( ANYDATA_ARCADE_HIVE, arcadeHive ) )
        cr.Say( SAY_NETMSG, "добавлен логово No " + arcadeHive.length() + " x " + x + " y " + y + " тип " + type );
    else
        cr.Say( SAY_NETMSG, "ошибка записи, массив не записан. данные не изменены." );
}

void arcadehivelist( Critter& cr )
{
    int[] arcadeHive;
    if( !GetArcadeData( arcadeHive ) )
    {
        cr.Say( SAY_NETMSG, "нет логов, операция невозможна. выход." );
        return;
    }
    for( uint8 i = 0; i < arcadeHive.length(); i++ )
    {
        uint16 x = ( arcadeHive[ i ] ) & 0x3FF;
        uint16 y = ( arcadeHive[ i ] >> 10 ) & 0x3FF;
        uint16 type = ( arcadeHive[ i ] >> 20 ) & 0xFFF;

        cr.Say( SAY_NETMSG, "логово No " + i + " x " + x + " y " + y + " тип(по БТ) " + type );
    }
}

void arcadehivedelone( Critter& cr, uint8 index )
{
    int[] arcadeHive;
    if( !GetArcadeData( arcadeHive ) )
    {
        cr.Say( SAY_NETMSG, "нет логов, операция невозможна. выход." );
        return;
    }
    uint8 length = arcadeHive.length();
    if( index > length )
    {
        cr.Say( SAY_NETMSG, "индекс > длинны. выход" );
        return;
    }
    arcadeHive.removeAt( index );
    if( SetAnyData( ANYDATA_ARCADE_HIVE, arcadeHive ) )
        cr.Say( SAY_NETMSG, "удален индекс No " + index + " старая длинна " + length + " новая " + arcadeHive.length() + " массив сдвинут на один влево с удаление элемента." );
    else
        cr.Say( SAY_NETMSG, "ошибка записи, массив не записан. данные не изменены." );

}

void arcadehiveclear( Critter& cr )
{
    int[] arcadeHive;
    if( !GetArcadeData( arcadeHive ) )
    {
        cr.Say( SAY_NETMSG, "нет логов, операция невозможна. выход." );
        return;
    }
    EraseAnyData( ANYDATA_ARCADE_HIVE );
    cr.Say( SAY_NETMSG, "Количество удаленных логов : " + arcadeHive.length() );


}
// ////////////////////

void DontPickItUp( Critter& cr ) // Export
{
    cr.SetEvent( CRITTER_EVENT_USE_SKILL, "_noPickUp" );
}

bool _noPickUp( Critter& cr, int skill, Critter@ onCritter, Item@ onItem, Scenery@ onScenery )
{
    if( skill == SKILL_PICK_ON_GROUND || skill == SKILL_LOOT_CRITTER || skill == SKILL_TALK || skill == SK_STEAL )
        return true;
    return false;
}

/* deprecated
   void SkinMenu(Critter@ cr) // Export
   {
        //return;
        uint16 StartValue;
        uint16 maxValue;
        GameVar@ firegecko=GetGlobalVar(GVAR_firegecko_population);
        GameVar@ alien=GetGlobalVar(GVAR_alien_population);
        GameVar@ deathclaw=GetGlobalVar(GVAR_deathclaw_population);
        GameVar@ flocent=GetGlobalVar(GVAR_floaterandcentaur_population);

        GameVar@ firegeckoNow=GetGlobalVar(GVAR_firegecko_now);
        GameVar@ alienNow=GetGlobalVar(GVAR_alien_now);
        GameVar@ deathclawNow=GetGlobalVar(GVAR_deathclaw_now);
        GameVar@ flocentNow=GetGlobalVar(GVAR_floaterandcentaur_now);
        GameVar@ clawNow=GetGlobalVar(GVAR_claw_now);
        GameVar@ clawkidNow=GetGlobalVar(GVAR_clawkid_now);

        int level=cr.Stat[ST_LEVEL];
        if(level<2) maxValue=1;
        else if(level==2) maxValue=2;
        else if(level==3) maxValue=5;
        else if(level==4) maxValue=7;
        else if(level==5) maxValue=8;
        else if(level==6) maxValue=9;
        else if(level==7) maxValue=10;
        else if(level==8) maxValue=11;
        else if(level==9) maxValue=13;
        else if(level==10) maxValue=15;
        else if(level==11) maxValue=16;
        else if(level>11) maxValue=19;
        StartValue=maxValue;
        if(StartValue>=13 && alien>=15) maxValue--;
        if(StartValue>=17 && (alien>=15 || alienNow > 0)) {maxValue--; cr.Say(SAY_NETMSG, "alien");}
        if(StartValue>=19 && (firegecko>=15 || firegeckoNow > 0)) {maxValue--; cr.Say(SAY_NETMSG, "fireG");}
        if(StartValue>=12 && (deathclaw>=15 || clawkidNow > 2)) maxValue--;
        if(StartValue>=15 && (deathclaw>=15 || clawNow > 2)) maxValue--;
        if(StartValue>=18 && (deathclaw>=15 || deathclawNow > 0)) {maxValue--; cr.Say(SAY_NETMSG, "DC");}
        if(StartValue>=14 && (flocent>=15 || flocentNow >= 3)) {maxValue--; cr.Say(SAY_NETMSG, "floater");}
        if(StartValue>=16 && (flocent>=15 || flocentNow >= 3)) {maxValue--; cr.Say(SAY_NETMSG, "centaur");}
        int rate=StartValue|(maxValue<<16);
        cr.AddTimeEvent("Menu", 1, CTE_CHOOSESKIN, rate);
   }

   uint Menu(Critter& cr, int identifier, uint& rate)
   {
        //return 0;
        uint8 butNumber=10;
        uint16 StartValue=(rate)&0xFFFF;
        uint16 maxValue=(rate>>16)&0xFFFF;
        GameVar@ firegecko=GetGlobalVar(GVAR_firegecko_population);
        GameVar@ alien=GetGlobalVar(GVAR_alien_population);
        GameVar@ deathclaw=GetGlobalVar(GVAR_deathclaw_population);
        GameVar@ flocent=GetGlobalVar(GVAR_floaterandcentaur_population);

        GameVar@ firegeckoNow=GetGlobalVar(GVAR_firegecko_now);
        GameVar@ alienNow=GetGlobalVar(GVAR_alien_now);
        GameVar@ deathclawNow=GetGlobalVar(GVAR_deathclaw_now);
        GameVar@ flocentNow=GetGlobalVar(GVAR_floaterandcentaur_now);
        GameVar@ clawNow=GetGlobalVar(GVAR_claw_now);
        GameVar@ clawkidNow=GetGlobalVar(GVAR_clawkid_now);

        //cr.ShowScreen(SCREEN_CLOSE, 0, "");
        cr.ShowScreen(SCREEN_DIALOGBOX, maxValue, "answer_skinChoose");
        cr.SayMsg(SAY_DIALOGBOX_TEXT, TEXTMSG_GAME, 106910);
        cr.SayMsg(SAY_DIALOGBOX_BUTTON(0),TEXTMSG_GAME, 106911);
        if(StartValue>1)cr.SayMsg(SAY_DIALOGBOX_BUTTON(1),TEXTMSG_GAME, 106913);
        if(StartValue>2)cr.SayMsg(SAY_DIALOGBOX_BUTTON(2),TEXTMSG_GAME, 106914);
        if(StartValue>3)cr.SayMsg(SAY_DIALOGBOX_BUTTON(3),TEXTMSG_GAME, 106915);
        if(StartValue>4)cr.SayMsg(SAY_DIALOGBOX_BUTTON(4),TEXTMSG_GAME, 106916);
        if(StartValue>5)cr.SayMsg(SAY_DIALOGBOX_BUTTON(5),TEXTMSG_GAME, 106917);
        if(StartValue>6)cr.SayMsg(SAY_DIALOGBOX_BUTTON(6),TEXTMSG_GAME, 106918);
        if(StartValue>7)cr.SayMsg(SAY_DIALOGBOX_BUTTON(7),TEXTMSG_GAME, 106919);
        if(StartValue>8)cr.SayMsg(SAY_DIALOGBOX_BUTTON(8),TEXTMSG_GAME, 106920);
        if(StartValue>9)cr.SayMsg(SAY_DIALOGBOX_BUTTON(9),TEXTMSG_GAME, 106922);
        if(StartValue>10)cr.SayMsg(SAY_DIALOGBOX_BUTTON(10),TEXTMSG_GAME, 106923);

        if(StartValue>11 && deathclaw<15)
        {
                if(clawkidNow < 2)
                {
                butNumber++;
                realbody[butNumber-11]=12;
                cr.SayMsg(SAY_DIALOGBOX_BUTTON(butNumber),TEXTMSG_GAME, 106924);
                }
        }

        if(StartValue>12 && deathclaw<15) //alien<15
        {
                if(clawNow < 2)
                {
                butNumber++;
                realbody[butNumber-11]=13;
                cr.SayMsg(SAY_DIALOGBOX_BUTTON(butNumber),TEXTMSG_GAME, 106925);
                }
        }

        if(StartValue>13 && flocent<15) // && flocentNow < 3
        {
                if(flocentNow < 3)
                {
                butNumber++;
                realbody[butNumber-11]=14;
                cr.SayMsg(SAY_DIALOGBOX_BUTTON(butNumber),TEXTMSG_GAME, 106926);
                }
        }

        if(StartValue>14 && deathclaw<15)
        {
                butNumber++;
                realbody[butNumber-11]=15;
                cr.SayMsg(SAY_DIALOGBOX_BUTTON(butNumber),TEXTMSG_GAME, 106927);
        }

        if(StartValue>15 && flocent<15) // && flocentNow < 3
        {
                if(flocentNow < 3)
                {
                butNumber++;
                realbody[butNumber-11]=16;
                cr.SayMsg(SAY_DIALOGBOX_BUTTON(butNumber),TEXTMSG_GAME, 106928);
                }
        }

        if(StartValue>16 && alien<15) // && alienNow == 0
        {
                if(alienNow == 0)
                {
                butNumber++;
                realbody[butNumber-11]=17;
                cr.SayMsg(SAY_DIALOGBOX_BUTTON(butNumber),TEXTMSG_GAME, 106929);
                }
        }

        if(StartValue>17 && deathclaw<15) //&& deathclawNow == 0
        {
                if(deathclawNow == 0)
                {
                butNumber++;
                realbody[butNumber-11]=18;
                cr.SayMsg(SAY_DIALOGBOX_BUTTON(butNumber),TEXTMSG_GAME, 106930);
                }
        }

        if(StartValue>18 && firegecko<15)
        {
                if(firegeckoNow == 0)
                {
                butNumber++;
                realbody[butNumber-11]=19;
                cr.SayMsg(SAY_DIALOGBOX_BUTTON(butNumber),TEXTMSG_GAME, 106931);
                }
        }
        return REAL_SECOND(30);
   }

   void answer_skinChoose(Critter& cr, uint answerI, string& answerS)
   {
        if(answerI==0) LetsGo(cr, Random(0,1));
        else if(answerI<11) LetsGo(cr, answerI+1);
        else LetsGo(cr, answerI);
        return;
   }

   void LetsGo(Critter& cr, int num)
   {
        if(cr.Param[QST_GAMEMODE]!=GAME_ARCADE)
        {
                Log("Функция LetsGo была вызвана неверно!");
                return;
        }

        cr.EraseTimeEvents(CTE_CHOOSESKIN);
        uint16 x=0, y=0;
        bool freeToGo=false;
        if(cr.IsDead()) cr.ToLife();
        if(num<11) skin(cr, cr.Id, body[num],0);
        else
        {
                skin(cr, cr.Id, body[realbody[num-11]],0);

                GameVar@ firegeckoNow=GetGlobalVar(GVAR_firegecko_now);
                GameVar@ alienNow=GetGlobalVar(GVAR_alien_now);
                GameVar@ deathclawNow=GetGlobalVar(GVAR_deathclaw_now);
                GameVar@ flocentNow=GetGlobalVar(GVAR_floaterandcentaur_now);
                GameVar@ clawNow=GetGlobalVar(GVAR_claw_now);
                GameVar@ clawKidNow=GetGlobalVar(GVAR_clawkid_now);

                uint8 bt = 0;

                switch(body[realbody[num-11]])
                {
                        case BT_CENTAUR : flocentNow.opAddAssign(1); bt = 9; break;
                        case BT_FLOATER : flocentNow.opAddAssign(1); bt= 9; break;
                        case BT_ALIEN_QUEEN : alienNow.opAddAssign(1); bt = 16; break;
                        case BT_CLAW_KING : deathclawNow.opAddAssign(1); bt = 13; break;
                        case BT_GECKO_FIRE : firegeckoNow.opAddAssign(1); bt = 15; break;
                        case BT_CLAW : clawNow.opAddAssign(1); bt = 13; break;
                        case BT_CLAW_SMALL : clawKidNow.opAddAssign(1); bt = 13; break;
                        default : break;
                }

                BreakBalls(bt);

                //cr.Say(SAY_NETMSG, "num "+body[realbody[num-11]]);
        }


        cr.StatBase[ST_CURRENT_HP]=cr.Stat[ST_MAX_LIFE];
        Map@ map=GetMapByPid(101,0);
        uint maxIndex=map.CountEntire(111);

        while(!freeToGo)
        {
                map.GetEntireCoords(111, Random(0, maxIndex-1), x, y);
                if(map.IsHexPassed(x,y)) freeToGo=true;
        }
        ValidateParams(cr);
        ChangeCritterSpeed(cr);

        /*uint16 globalX = Random(0, GMAP_WIDTH*GMAP_SECTORS), globalY = Random(0, GMAP_HEIGH*GMAP_SECTORS);
        //cr.WorldX = globalX;
        bool toDel = false;
        Location@[]@ locs;
        GetLocations(globalX, globalY, 10, locs);
        if(locs.length() == 0) {@locs[0] = GetLocation(CreateLocation(101, globalX, globalY, null)); toDel = true;}
        if(@locs[0] == null) {cr.Say(SAY_NETMSG,"error with transit"); return;}
        Map@[]@ maps;
        locs[0].GetMaps(maps);
        if(@maps[0] == null) {cr.Say(SAY_NETMSG,"error with transit"); return;}
        cr.TransitToMap(maps[0].Id, 0);
        cr.TransitToGlobal(false);
        if(toDel) DeleteLocation(locs[0].Id);
 *
        cr.TransitToMap(map.Id, x,y,Random(0,5));
        return;
   }*/

void BreakBalls( uint16 crType ) // i've got balls of steel ;D
{
    Map @ map = GetMapByPid( MAP_SATTER_WILD, 0 );
    if( @map == null )
        return;
    Critter@[] crs;
    map.GetCritters( 0, FIND_LIFE | FIND_ONLY_NPC, crs );
    uint length = crs.length();
    if( length == 0 )
        return;
    for( uint i = 0; i < length; i++ )
    {
        if( @crs[ i ] != null && crs[ i ].StatBase[ ST_BASE_CRTYPE ] == 58 && crs[ i ].StatBase[ ST_BODY_TYPE ] == crType )
        {
            crs[ i ].ToDead( 0, null );
            return;
        }
    }
}
// ody = {24, 52, 97, 55, 67, 16, 68, 15, 19, 76, 59, 22, 60, 80, 25, 51, 23, 86, 100, 81};

/*deprecated move -> general_unsafe

   //pm added, all critters bonus, stats, and other here
   bool ValidateParams(Critter& cr)
   {
        //cr.Say(SAY_NETMSG, ""+cr.StatBase[ST_BODY_TYPE]);
        //cr.Say(SAY_NETMSG, ""+cr.StatBase[ST_BASE_CRTYPE]);

        cr.ParamBase[ST_CURRENT_HP] = cr.ParamBase[ST_MAX_LIFE] * 0.1;
        cr.ParamBase[PE_AWARENESS] = 0;

        cr.ParamBase[DAMAGE_EYE]=0;
        cr.ParamBase[DAMAGE_RIGHT_ARM]=0;
        cr.ParamBase[DAMAGE_LEFT_ARM]=0;
        cr.ParamBase[DAMAGE_RIGHT_LEG]=0;
        cr.ParamBase[DAMAGE_LEFT_LEG]=0;

        switch(cr.StatBase[ST_BASE_CRTYPE])
        {
                case SKIN_RAT :
                                cr.ParamBase[ST_STRENGTH] = 2;
                                cr.ParamBase[ST_PERCEPTION] = 6;
                                cr.ParamBase[ST_ENDURANCE] = 2;
                                cr.ParamBase[ST_CHARISMA] = 1;
                                cr.ParamBase[ST_INTELLECT] = 1;
                                cr.ParamBase[ST_AGILITY] = 4;
                                cr.ParamBase[ST_LUCK] = 1;
                                cr.ParamBase[ST_MAX_LIFE] = 0;
                                cr.ParamBase[ST_ACTION_POINTS] = 5;
                                cr.ParamBase[ST_ARMOR_CLASS] = 40;
                                cr.ParamBase[ST_MELEE_DAMAGE] = 3;
                                cr.ParamBase[ST_HEALING_RATE] = 20;
                                cr.ParamBase[ST_CRITICAL_CHANCE] = 1;

                                cr.ParamBase[SK_UNARMED] = 100;
                                cr.ParamBase[SK_SNEAK] = 200;

                  break;

                  case SKIN_MANTIS :
                                cr.ParamBase[ST_STRENGTH] = 2;
                                cr.ParamBase[ST_PERCEPTION] = 6;
                                cr.ParamBase[ST_ENDURANCE] = 2;
                                cr.ParamBase[ST_CHARISMA] = 1;
                                cr.ParamBase[ST_INTELLECT] = 1;
                                cr.ParamBase[ST_AGILITY] = 4;
                                cr.ParamBase[ST_LUCK] = 1;
                                cr.ParamBase[ST_MAX_LIFE] = 0;
                                cr.ParamBase[ST_ACTION_POINTS] = 4;
                                cr.ParamBase[ST_ARMOR_CLASS] = 40;
                                cr.ParamBase[ST_MELEE_DAMAGE] = 5;
                                cr.ParamBase[ST_HEALING_RATE] = 10;
                                cr.ParamBase[ST_CRITICAL_CHANCE] = 1;

                                cr.ParamBase[SK_UNARMED] = 150;
                                cr.ParamBase[SK_SNEAK] = 150;
                  break;

                  case SKIN_GIGANT_ANT :
                                cr.ParamBase[ST_STRENGTH] = 3;
                                cr.ParamBase[ST_PERCEPTION] = 6;
                                cr.ParamBase[ST_ENDURANCE] = 3;
                                cr.ParamBase[ST_CHARISMA] = 1;
                                cr.ParamBase[ST_INTELLECT] = 1;
                                cr.ParamBase[ST_AGILITY] = 5;
                                cr.ParamBase[ST_LUCK] = 1;
                                cr.ParamBase[ST_MAX_LIFE] = 20;
                                cr.ParamBase[ST_ACTION_POINTS] = 6;
                                cr.ParamBase[ST_ARMOR_CLASS] = 30;
                                cr.ParamBase[ST_MELEE_DAMAGE] = 7;
                                cr.ParamBase[ST_HEALING_RATE] = 10;
                                cr.ParamBase[ST_CRITICAL_CHANCE] = 3;

                                cr.ParamBase[SK_UNARMED] = 170;
                                cr.ParamBase[SK_SNEAK] = 130;
                  break;

                  case SKIN_RAT_PIG :
                                cr.ParamBase[ST_STRENGTH] = 4;
                                cr.ParamBase[ST_PERCEPTION] = 6;
                                cr.ParamBase[ST_ENDURANCE] = 4;
                                cr.ParamBase[ST_CHARISMA] = 1;
                                cr.ParamBase[ST_INTELLECT] = 1;
                                cr.ParamBase[ST_AGILITY] = 5;
                                cr.ParamBase[ST_LUCK] = 1;
                                cr.ParamBase[ST_MAX_LIFE] = 35;
                                cr.ParamBase[ST_ACTION_POINTS] = 6;
                                cr.ParamBase[ST_ARMOR_CLASS] = 30;
                                cr.ParamBase[ST_MELEE_DAMAGE] = 10;
                                cr.ParamBase[ST_HEALING_RATE] = 6;
                                cr.ParamBase[ST_CRITICAL_CHANCE] = 3;

                                cr.ParamBase[SK_UNARMED] = 180;
                                cr.ParamBase[SK_SNEAK] = 110;
                  break;

                  case SKIN_GECKO_SILVER :
                                cr.ParamBase[ST_STRENGTH] = 4;
                                cr.ParamBase[ST_PERCEPTION] = 6;
                                cr.ParamBase[ST_ENDURANCE] = 4;
                                cr.ParamBase[ST_CHARISMA] = 1;
                                cr.ParamBase[ST_INTELLECT] = 1;
                                cr.ParamBase[ST_AGILITY] = 5;
                                cr.ParamBase[ST_LUCK] = 1;
                                cr.ParamBase[ST_MAX_LIFE] = 35;
                                cr.ParamBase[ST_ACTION_POINTS] = 6;
                                cr.ParamBase[ST_ARMOR_CLASS] = 20;
                                cr.ParamBase[ST_MELEE_DAMAGE] = 16;
                                cr.ParamBase[ST_HEALING_RATE] = 4;
                                cr.ParamBase[ST_CRITICAL_CHANCE] = 3;

                                cr.ParamBase[SK_UNARMED] = 150;
                                cr.ParamBase[SK_SNEAK] = 70;
                  break;

                  case SKIN_DOG :
                                cr.ParamBase[ST_STRENGTH] = 5;
                                cr.ParamBase[ST_PERCEPTION] = 6;
                                cr.ParamBase[ST_ENDURANCE] = 5;
                                cr.ParamBase[ST_CHARISMA] = 1;
                                cr.ParamBase[ST_INTELLECT] = 1;
                                cr.ParamBase[ST_AGILITY] = 5;
                                cr.ParamBase[ST_LUCK] = 1;
                                cr.ParamBase[ST_MAX_LIFE] = 35;
                                cr.ParamBase[ST_ACTION_POINTS] = 7;
                                cr.ParamBase[ST_ARMOR_CLASS] = 25;
                                cr.ParamBase[ST_MELEE_DAMAGE] = 7;
                                cr.ParamBase[ST_HEALING_RATE] = 6;
                                cr.ParamBase[ST_CRITICAL_CHANCE] = 3;

                                cr.ParamBase[SK_UNARMED] = 180;
                                cr.ParamBase[SK_SNEAK] = 110;
                  break;

                  case SKIN_GECKO_GOLD :
                                cr.ParamBase[ST_STRENGTH] = 5;
                                cr.ParamBase[ST_PERCEPTION] = 6;
                                cr.ParamBase[ST_ENDURANCE] = 5;
                                cr.ParamBase[ST_CHARISMA] = 1;
                                cr.ParamBase[ST_INTELLECT] = 1;
                                cr.ParamBase[ST_AGILITY] = 6;
                                cr.ParamBase[ST_LUCK] = 2;
                                cr.ParamBase[ST_MAX_LIFE] = 40;
                                cr.ParamBase[ST_ACTION_POINTS] = 6;
                                cr.ParamBase[ST_ARMOR_CLASS] = 25;
                                cr.ParamBase[ST_MELEE_DAMAGE] = 16;
                                cr.ParamBase[ST_HEALING_RATE] = 5;
                                cr.ParamBase[ST_CRITICAL_CHANCE] = 3;

                                cr.ParamBase[SK_UNARMED] = 180;
                                cr.ParamBase[SK_SNEAK] = 80;
                  break;

                  case SKIN_BRAHMIN :
                                cr.ParamBase[ST_STRENGTH] = 5;
                                cr.ParamBase[ST_PERCEPTION] = 6;
                                cr.ParamBase[ST_ENDURANCE] = 5;
                                cr.ParamBase[ST_CHARISMA] = 1;
                                cr.ParamBase[ST_INTELLECT] = 1;
                                cr.ParamBase[ST_AGILITY] = 6;
                                cr.ParamBase[ST_LUCK] = 2;
                                cr.ParamBase[ST_MAX_LIFE] = 70;
                                cr.ParamBase[ST_ACTION_POINTS] = 12;
                                cr.ParamBase[ST_ARMOR_CLASS] = 30;
                                cr.ParamBase[ST_MELEE_DAMAGE] = 4;
                                cr.ParamBase[ST_HEALING_RATE] = 7;
                                cr.ParamBase[ST_CRITICAL_CHANCE] = 3;

                                cr.ParamBase[SK_UNARMED] = 200;
                                cr.ParamBase[SK_SNEAK] = 40;
                  break;

                  case SKIN_RAT_GRIZLY :
                                cr.ParamBase[ST_STRENGTH] = 6;
                                cr.ParamBase[ST_PERCEPTION] = 6;
                                cr.ParamBase[ST_ENDURANCE] = 6;
                                cr.ParamBase[ST_CHARISMA] = 1;
                                cr.ParamBase[ST_INTELLECT] = 1;
                                cr.ParamBase[ST_AGILITY] = 6;
                                cr.ParamBase[ST_LUCK] = 2;
                                cr.ParamBase[ST_MAX_LIFE] = 60;
                                cr.ParamBase[ST_ACTION_POINTS] = 7;
                                cr.ParamBase[ST_ARMOR_CLASS] = 25;
                                cr.ParamBase[ST_MELEE_DAMAGE] = 16;
                                cr.ParamBase[ST_HEALING_RATE] = 5;
                                cr.ParamBase[ST_CRITICAL_CHANCE] = 3;

                                cr.ParamBase[SK_UNARMED] = 180;
                                cr.ParamBase[SK_SNEAK] = 40;
                  break;

                  case SKIN_RAT_KING :
                                cr.ParamBase[ST_STRENGTH] = 6;
                                cr.ParamBase[ST_PERCEPTION] = 6;
                                cr.ParamBase[ST_ENDURANCE] = 6;
                                cr.ParamBase[ST_CHARISMA] = 1;
                                cr.ParamBase[ST_INTELLECT] = 1;
                                cr.ParamBase[ST_AGILITY] = 6;
                                cr.ParamBase[ST_LUCK] = 2;
                                cr.ParamBase[ST_MAX_LIFE] = 80;
                                cr.ParamBase[ST_ACTION_POINTS] = 8;
                                cr.ParamBase[ST_ARMOR_CLASS] = 30;
                                cr.ParamBase[ST_MELEE_DAMAGE] = 16;
                                cr.ParamBase[ST_HEALING_RATE] = 5;
                                cr.ParamBase[ST_CRITICAL_CHANCE] = 3;

                                cr.ParamBase[SK_UNARMED] = 200;
                                cr.ParamBase[SK_SNEAK] = 40;
                  break;

                  case SKIN_SCORP_SMALL :
                                cr.ParamBase[ST_STRENGTH] = 6;
                                cr.ParamBase[ST_PERCEPTION] = 6;
                                cr.ParamBase[ST_ENDURANCE] = 6;
                                cr.ParamBase[ST_CHARISMA] = 1;
                                cr.ParamBase[ST_INTELLECT] = 1;
                                cr.ParamBase[ST_AGILITY] = 6;
                                cr.ParamBase[ST_LUCK] = 2;
                                cr.ParamBase[ST_MAX_LIFE] = 80;
                                cr.ParamBase[ST_ACTION_POINTS] = 8;
                                cr.ParamBase[ST_ARMOR_CLASS] = 30;
                                cr.ParamBase[ST_MELEE_DAMAGE] = 12;
                                cr.ParamBase[ST_HEALING_RATE] = 5;
                                cr.ParamBase[ST_CRITICAL_CHANCE] = 3;

                                cr.ParamBase[SK_UNARMED] = 200;
                                cr.ParamBase[SK_SNEAK] = 140;
                  break;

                  case SKIN_SCORP :
                                cr.ParamBase[ST_STRENGTH] = 7;
                                cr.ParamBase[ST_PERCEPTION] = 6;
                                cr.ParamBase[ST_ENDURANCE] = 7;
                                cr.ParamBase[ST_CHARISMA] = 1;
                                cr.ParamBase[ST_INTELLECT] = 1;
                                cr.ParamBase[ST_AGILITY] = 6;
                                cr.ParamBase[ST_LUCK] = 2;
                                cr.ParamBase[ST_MAX_LIFE] = 100;
                                cr.ParamBase[ST_ACTION_POINTS] = 8;
                                cr.ParamBase[ST_ARMOR_CLASS] = 30;
                                cr.ParamBase[ST_MELEE_DAMAGE] = 16;
                                cr.ParamBase[ST_HEALING_RATE] = 4;
                                cr.ParamBase[ST_CRITICAL_CHANCE] = 3;

                                cr.ParamBase[SK_UNARMED] = 210;
                                cr.ParamBase[SK_SNEAK] = 80;
                  break;

                  case SKIN_CLAW_SMALL :
                                cr.ParamBase[ST_STRENGTH] = 7;
                                cr.ParamBase[ST_PERCEPTION] = 6;
                                cr.ParamBase[ST_ENDURANCE] = 7;
                                cr.ParamBase[ST_CHARISMA] = 1;
                                cr.ParamBase[ST_INTELLECT] = 1;
                                cr.ParamBase[ST_AGILITY] = 6;
                                cr.ParamBase[ST_LUCK] = 3;
                                cr.ParamBase[ST_MAX_LIFE] = 80;
                                cr.ParamBase[ST_ACTION_POINTS] = 6;
                                cr.ParamBase[ST_ARMOR_CLASS] = 25;
                                cr.ParamBase[ST_MELEE_DAMAGE] = 10;
                                cr.ParamBase[ST_HEALING_RATE] = 4;
                                cr.ParamBase[ST_CRITICAL_CHANCE] = 3;

                                cr.ParamBase[SK_UNARMED] = 210;
                                cr.ParamBase[SK_SNEAK] = 140;
                  break;

                  case SKIN_ALIEN :
                                cr.ParamBase[ST_STRENGTH] = 7;
                                cr.ParamBase[ST_PERCEPTION] = 6;
                                cr.ParamBase[ST_ENDURANCE] = 7;
                                cr.ParamBase[ST_CHARISMA] = 1;
                                cr.ParamBase[ST_INTELLECT] = 1;
                                cr.ParamBase[ST_AGILITY] = 7;
                                cr.ParamBase[ST_LUCK] = 3;
                                cr.ParamBase[ST_MAX_LIFE] = 120;
                                cr.ParamBase[ST_ACTION_POINTS] = 8;
                                cr.ParamBase[ST_ARMOR_CLASS] = 30;
                                cr.ParamBase[ST_MELEE_DAMAGE] = 15;
                                cr.ParamBase[ST_HEALING_RATE] = 4;
                                cr.ParamBase[ST_CRITICAL_CHANCE] = 3;

                                cr.ParamBase[SK_UNARMED] = 240;
                                cr.ParamBase[SK_SNEAK] = 80;
                  break;

                  case SKIN_CENTAUR :
                                cr.ParamBase[ST_STRENGTH] = 8;
                                cr.ParamBase[ST_PERCEPTION] = 6;
                                cr.ParamBase[ST_ENDURANCE] = 8;
                                cr.ParamBase[ST_CHARISMA] = 1;
                                cr.ParamBase[ST_INTELLECT] = 1;
                                cr.ParamBase[ST_AGILITY] = 7;
                                cr.ParamBase[ST_LUCK] = 4;
                                cr.ParamBase[ST_MAX_LIFE] = 150;
                                cr.ParamBase[ST_ACTION_POINTS] = 8;
                                cr.ParamBase[ST_ARMOR_CLASS] = 30;
                                cr.ParamBase[ST_MELEE_DAMAGE] = 15;
                                cr.ParamBase[ST_HEALING_RATE] = 3;
                                cr.ParamBase[ST_CRITICAL_CHANCE] = 3;

                                cr.ParamBase[SK_UNARMED] = 240;
                                cr.ParamBase[SK_SNEAK] = 40;
                  break;

                  case SKIN_CLAW :
                                cr.ParamBase[ST_STRENGTH] = 8;
                                cr.ParamBase[ST_PERCEPTION] = 6;
                                cr.ParamBase[ST_ENDURANCE] = 8;
                                cr.ParamBase[ST_CHARISMA] = 1;
                                cr.ParamBase[ST_INTELLECT] = 1;
                                cr.ParamBase[ST_AGILITY] = 7;
                                cr.ParamBase[ST_LUCK] = 4;
                                cr.ParamBase[ST_MAX_LIFE] = 170;
                                cr.ParamBase[ST_ACTION_POINTS] = 6;
                                cr.ParamBase[ST_ARMOR_CLASS] = 25;
                                cr.ParamBase[ST_MELEE_DAMAGE] = 13;
                                cr.ParamBase[ST_HEALING_RATE] = 3;
                                cr.ParamBase[ST_CRITICAL_CHANCE] = 3;

                                cr.ParamBase[SK_UNARMED] = 240;
                                cr.ParamBase[SK_SNEAK] = 80;
                  break;

                  case SKIN_FLOATER :
                                cr.ParamBase[ST_STRENGTH] = 8;
                                cr.ParamBase[ST_PERCEPTION] = 6;
                                cr.ParamBase[ST_ENDURANCE] = 8;
                                cr.ParamBase[ST_CHARISMA] = 1;
                                cr.ParamBase[ST_INTELLECT] = 1;
                                cr.ParamBase[ST_AGILITY] = 7;
                                cr.ParamBase[ST_LUCK] = 3;
                                cr.ParamBase[ST_MAX_LIFE] = 220;
                                cr.ParamBase[ST_ACTION_POINTS] = 8;
                                cr.ParamBase[ST_ARMOR_CLASS] = 20;
                                cr.ParamBase[ST_MELEE_DAMAGE] = 15;
                                cr.ParamBase[ST_HEALING_RATE] = 2;
                                cr.ParamBase[ST_CRITICAL_CHANCE] = 3;

                                cr.ParamBase[SK_UNARMED] = 250;
                                cr.ParamBase[SK_SNEAK] = 100;
                  break;

                  case SKIN_ALIEN_QUEEN :
                                cr.ParamBase[ST_STRENGTH] = 9;
                                cr.ParamBase[ST_PERCEPTION] = 6;
                                cr.ParamBase[ST_ENDURANCE] = 9;
                                cr.ParamBase[ST_CHARISMA] = 1;
                                cr.ParamBase[ST_INTELLECT] = 1;
                                cr.ParamBase[ST_AGILITY] = 7;
                                cr.ParamBase[ST_LUCK] = 3;
                                cr.ParamBase[ST_MAX_LIFE] = 200;
                                cr.ParamBase[ST_ACTION_POINTS] = 8;
                                cr.ParamBase[ST_ARMOR_CLASS] = 30;
                                cr.ParamBase[ST_MELEE_DAMAGE] = 25;
                                cr.ParamBase[ST_HEALING_RATE] = 1;
                                cr.ParamBase[ST_CRITICAL_CHANCE] = 5;

                                cr.ParamBase[SK_UNARMED] = 260;
                                cr.ParamBase[SK_SNEAK] = 120;
                  break;

                  case SKIN_CLAW_KING :
                                cr.ParamBase[ST_STRENGTH] = 9;
                                cr.ParamBase[ST_PERCEPTION] = 6;
                                cr.ParamBase[ST_ENDURANCE] = 9;
                                cr.ParamBase[ST_CHARISMA] = 1;
                                cr.ParamBase[ST_INTELLECT] = 1;
                                cr.ParamBase[ST_AGILITY] = 7;
                                cr.ParamBase[ST_LUCK] = 3;
                                cr.ParamBase[ST_MAX_LIFE] = 250;
                                cr.ParamBase[ST_ACTION_POINTS] = 6;
                                cr.ParamBase[ST_ARMOR_CLASS] = 20;
                                cr.ParamBase[ST_MELEE_DAMAGE] = 15;
                                cr.ParamBase[ST_HEALING_RATE] = 1;
                                cr.ParamBase[ST_CRITICAL_CHANCE] = 5;

                                cr.ParamBase[SK_UNARMED] = 240;
                                cr.ParamBase[SK_SNEAK] = 80;
                  break;

                  case SKIN_GECKO_FIRE :
                                cr.ParamBase[ST_STRENGTH] = 9;
                                cr.ParamBase[ST_PERCEPTION] = 6;
                                cr.ParamBase[ST_ENDURANCE] = 9;
                                cr.ParamBase[ST_CHARISMA] = 1;
                                cr.ParamBase[ST_INTELLECT] = 1;
                                cr.ParamBase[ST_AGILITY] = 7;
                                cr.ParamBase[ST_LUCK] = 3;
                                cr.ParamBase[ST_MAX_LIFE] = 150;
                                cr.ParamBase[ST_ACTION_POINTS] = 6;
                                cr.ParamBase[ST_ARMOR_CLASS] = 15;
                                cr.ParamBase[ST_MELEE_DAMAGE] = 10;
                                cr.ParamBase[ST_HEALING_RATE] = 4;
                                cr.ParamBase[ST_CRITICAL_CHANCE] = 1;

                                cr.ParamBase[SK_UNARMED] = 240;
                                cr.ParamBase[SK_SNEAK] = 100;
                  break;


        }
   return false;
   }
 */


/*создание логова
   спаун криттеров логова
 */

bool SpawnHiveLocal( Map& map, uint8 hiveType, uint16 hexX, uint16 hexY )
{
    return true;
}

void set_arcade_stat( Critter& cr, int type, int mode )
{
    switch( type )
    {
    case SKIN_RAT:
        cr.ParamBase[ ST_STRENGTH ] = 2;
        cr.ParamBase[ ST_PERCEPTION ] = 6;
        cr.ParamBase[ ST_ENDURANCE ] = 2;
        cr.ParamBase[ ST_CHARISMA ] = 1;
        cr.ParamBase[ ST_INTELLECT ] = 1;
        cr.ParamBase[ ST_AGILITY ] = 4;
        cr.ParamBase[ ST_LUCK ] = 1;
        cr.ParamBase[ ST_MAX_LIFE ] = 0;
        cr.ParamBase[ ST_ACTION_POINTS ] = 5;
        cr.ParamBase[ ST_ARMOR_CLASS ] = 40;
        cr.ParamBase[ ST_MELEE_DAMAGE ] = 3;
        cr.ParamBase[ ST_HEALING_RATE ] = 20;
        cr.ParamBase[ ST_CRITICAL_CHANCE ] = 1;

        cr.ParamBase[ SK_UNARMED ] = 100;
        cr.ParamBase[ SK_SNEAK ] = 200;
        cr.ParamBase[ ST_BODY_TYPE ] = BT_RAT;
        break;

    case SKIN_MANTIS:
        cr.ParamBase[ ST_STRENGTH ] = 2;
        cr.ParamBase[ ST_PERCEPTION ] = 6;
        cr.ParamBase[ ST_ENDURANCE ] = 2;
        cr.ParamBase[ ST_CHARISMA ] = 1;
        cr.ParamBase[ ST_INTELLECT ] = 1;
        cr.ParamBase[ ST_AGILITY ] = 4;
        cr.ParamBase[ ST_LUCK ] = 1;
        cr.ParamBase[ ST_MAX_LIFE ] = 0;
        cr.ParamBase[ ST_ACTION_POINTS ] = 4;
        cr.ParamBase[ ST_ARMOR_CLASS ] = 40;
        cr.ParamBase[ ST_MELEE_DAMAGE ] = 5;
        cr.ParamBase[ ST_HEALING_RATE ] = 10;
        cr.ParamBase[ ST_CRITICAL_CHANCE ] = 1;

        cr.ParamBase[ SK_UNARMED ] = 150;
        cr.ParamBase[ SK_SNEAK ] = 150;
        cr.ParamBase[ ST_BODY_TYPE ] = BT_MANTI;
        break;

    case SKIN_GIGANT_ANT:
        cr.ParamBase[ ST_STRENGTH ] = 3;
        cr.ParamBase[ ST_PERCEPTION ] = 6;
        cr.ParamBase[ ST_ENDURANCE ] = 3;
        cr.ParamBase[ ST_CHARISMA ] = 1;
        cr.ParamBase[ ST_INTELLECT ] = 1;
        cr.ParamBase[ ST_AGILITY ] = 5;
        cr.ParamBase[ ST_LUCK ] = 1;
        cr.ParamBase[ ST_MAX_LIFE ] = 20;
        cr.ParamBase[ ST_ACTION_POINTS ] = 6;
        cr.ParamBase[ ST_ARMOR_CLASS ] = 30;
        cr.ParamBase[ ST_MELEE_DAMAGE ] = 7;
        cr.ParamBase[ ST_HEALING_RATE ] = 10;
        cr.ParamBase[ ST_CRITICAL_CHANCE ] = 3;

        cr.ParamBase[ SK_UNARMED ] = 170;
        cr.ParamBase[ SK_SNEAK ] = 130;
        cr.ParamBase[ ST_BODY_TYPE ] = BT_GIANT_ANT;
        break;

    case SKIN_RAT_PIG:
        cr.ParamBase[ ST_STRENGTH ] = 4;
        cr.ParamBase[ ST_PERCEPTION ] = 6;
        cr.ParamBase[ ST_ENDURANCE ] = 4;
        cr.ParamBase[ ST_CHARISMA ] = 1;
        cr.ParamBase[ ST_INTELLECT ] = 1;
        cr.ParamBase[ ST_AGILITY ] = 5;
        cr.ParamBase[ ST_LUCK ] = 1;
        cr.ParamBase[ ST_MAX_LIFE ] = 35;
        cr.ParamBase[ ST_ACTION_POINTS ] = 6;
        cr.ParamBase[ ST_ARMOR_CLASS ] = 30;
        cr.ParamBase[ ST_MELEE_DAMAGE ] = 10;
        cr.ParamBase[ ST_HEALING_RATE ] = 6;
        cr.ParamBase[ ST_CRITICAL_CHANCE ] = 3;

        cr.ParamBase[ SK_UNARMED ] = 180;
        cr.ParamBase[ SK_SNEAK ] = 110;
        cr.ParamBase[ ST_BODY_TYPE ] = BT_RAT;
        break;

    case SKIN_GECKO_SILVER:
        cr.ParamBase[ ST_STRENGTH ] = 4;
        cr.ParamBase[ ST_PERCEPTION ] = 6;
        cr.ParamBase[ ST_ENDURANCE ] = 4;
        cr.ParamBase[ ST_CHARISMA ] = 1;
        cr.ParamBase[ ST_INTELLECT ] = 1;
        cr.ParamBase[ ST_AGILITY ] = 5;
        cr.ParamBase[ ST_LUCK ] = 1;
        cr.ParamBase[ ST_MAX_LIFE ] = 35;
        cr.ParamBase[ ST_ACTION_POINTS ] = 6;
        cr.ParamBase[ ST_ARMOR_CLASS ] = 20;
        cr.ParamBase[ ST_MELEE_DAMAGE ] = 16;
        cr.ParamBase[ ST_HEALING_RATE ] = 4;
        cr.ParamBase[ ST_CRITICAL_CHANCE ] = 3;

        cr.ParamBase[ SK_UNARMED ] = 150;
        cr.ParamBase[ SK_SNEAK ] = 70;
        cr.ParamBase[ ST_BODY_TYPE ] = BT_GECKO;
        break;

    case SKIN_DOG:
        cr.ParamBase[ ST_STRENGTH ] = 5;
        cr.ParamBase[ ST_PERCEPTION ] = 6;
        cr.ParamBase[ ST_ENDURANCE ] = 5;
        cr.ParamBase[ ST_CHARISMA ] = 1;
        cr.ParamBase[ ST_INTELLECT ] = 1;
        cr.ParamBase[ ST_AGILITY ] = 5;
        cr.ParamBase[ ST_LUCK ] = 1;
        cr.ParamBase[ ST_MAX_LIFE ] = 35;
        cr.ParamBase[ ST_ACTION_POINTS ] = 7;
        cr.ParamBase[ ST_ARMOR_CLASS ] = 25;
        cr.ParamBase[ ST_MELEE_DAMAGE ] = 7;
        cr.ParamBase[ ST_HEALING_RATE ] = 6;
        cr.ParamBase[ ST_CRITICAL_CHANCE ] = 3;

        cr.ParamBase[ SK_UNARMED ] = 180;
        cr.ParamBase[ SK_SNEAK ] = 110;
        cr.ParamBase[ ST_BODY_TYPE ] = BT_DOG;
        break;

    case SKIN_GECKO_GOLD:
        cr.ParamBase[ ST_STRENGTH ] = 5;
        cr.ParamBase[ ST_PERCEPTION ] = 6;
        cr.ParamBase[ ST_ENDURANCE ] = 5;
        cr.ParamBase[ ST_CHARISMA ] = 1;
        cr.ParamBase[ ST_INTELLECT ] = 1;
        cr.ParamBase[ ST_AGILITY ] = 6;
        cr.ParamBase[ ST_LUCK ] = 2;
        cr.ParamBase[ ST_MAX_LIFE ] = 40;
        cr.ParamBase[ ST_ACTION_POINTS ] = 6;
        cr.ParamBase[ ST_ARMOR_CLASS ] = 25;
        cr.ParamBase[ ST_MELEE_DAMAGE ] = 16;
        cr.ParamBase[ ST_HEALING_RATE ] = 5;
        cr.ParamBase[ ST_CRITICAL_CHANCE ] = 3;

        cr.ParamBase[ SK_UNARMED ] = 180;
        cr.ParamBase[ SK_SNEAK ] = 80;
        cr.ParamBase[ ST_BODY_TYPE ] = BT_GECKO;
        break;

    case SKIN_BRAHMIN:
        cr.ParamBase[ ST_STRENGTH ] = 5;
        cr.ParamBase[ ST_PERCEPTION ] = 6;
        cr.ParamBase[ ST_ENDURANCE ] = 5;
        cr.ParamBase[ ST_CHARISMA ] = 1;
        cr.ParamBase[ ST_INTELLECT ] = 1;
        cr.ParamBase[ ST_AGILITY ] = 6;
        cr.ParamBase[ ST_LUCK ] = 2;
        cr.ParamBase[ ST_MAX_LIFE ] = 70;
        cr.ParamBase[ ST_ACTION_POINTS ] = 12;
        cr.ParamBase[ ST_ARMOR_CLASS ] = 30;
        cr.ParamBase[ ST_MELEE_DAMAGE ] = 4;
        cr.ParamBase[ ST_HEALING_RATE ] = 7;
        cr.ParamBase[ ST_CRITICAL_CHANCE ] = 3;

        cr.ParamBase[ SK_UNARMED ] = 200;
        cr.ParamBase[ SK_SNEAK ] = 40;
        cr.ParamBase[ ST_BODY_TYPE ] = BT_BRAHMIN;
        break;

    case SKIN_RAT_GRIZLY:
        cr.ParamBase[ ST_STRENGTH ] = 6;
        cr.ParamBase[ ST_PERCEPTION ] = 6;
        cr.ParamBase[ ST_ENDURANCE ] = 6;
        cr.ParamBase[ ST_CHARISMA ] = 1;
        cr.ParamBase[ ST_INTELLECT ] = 1;
        cr.ParamBase[ ST_AGILITY ] = 6;
        cr.ParamBase[ ST_LUCK ] = 2;
        cr.ParamBase[ ST_MAX_LIFE ] = 60;
        cr.ParamBase[ ST_ACTION_POINTS ] = 7;
        cr.ParamBase[ ST_ARMOR_CLASS ] = 25;
        cr.ParamBase[ ST_MELEE_DAMAGE ] = 16;
        cr.ParamBase[ ST_HEALING_RATE ] = 5;
        cr.ParamBase[ ST_CRITICAL_CHANCE ] = 3;

        cr.ParamBase[ SK_UNARMED ] = 180;
        cr.ParamBase[ SK_SNEAK ] = 40;
        cr.ParamBase[ ST_BODY_TYPE ] = BT_RAT;
        break;

    case SKIN_RAT_KING:
        cr.ParamBase[ ST_STRENGTH ] = 6;
        cr.ParamBase[ ST_PERCEPTION ] = 6;
        cr.ParamBase[ ST_ENDURANCE ] = 6;
        cr.ParamBase[ ST_CHARISMA ] = 1;
        cr.ParamBase[ ST_INTELLECT ] = 1;
        cr.ParamBase[ ST_AGILITY ] = 6;
        cr.ParamBase[ ST_LUCK ] = 2;
        cr.ParamBase[ ST_MAX_LIFE ] = 80;
        cr.ParamBase[ ST_ACTION_POINTS ] = 8;
        cr.ParamBase[ ST_ARMOR_CLASS ] = 30;
        cr.ParamBase[ ST_MELEE_DAMAGE ] = 16;
        cr.ParamBase[ ST_HEALING_RATE ] = 5;
        cr.ParamBase[ ST_CRITICAL_CHANCE ] = 3;

        cr.ParamBase[ SK_UNARMED ] = 200;
        cr.ParamBase[ SK_SNEAK ] = 40;
        cr.ParamBase[ ST_BODY_TYPE ] = BT_RAT;
        break;

    case SKIN_SCORP_SMALL:
        cr.ParamBase[ ST_STRENGTH ] = 6;
        cr.ParamBase[ ST_PERCEPTION ] = 6;
        cr.ParamBase[ ST_ENDURANCE ] = 6;
        cr.ParamBase[ ST_CHARISMA ] = 1;
        cr.ParamBase[ ST_INTELLECT ] = 1;
        cr.ParamBase[ ST_AGILITY ] = 6;
        cr.ParamBase[ ST_LUCK ] = 2;
        cr.ParamBase[ ST_MAX_LIFE ] = 80;
        cr.ParamBase[ ST_ACTION_POINTS ] = 8;
        cr.ParamBase[ ST_ARMOR_CLASS ] = 30;
        cr.ParamBase[ ST_MELEE_DAMAGE ] = 12;
        cr.ParamBase[ ST_HEALING_RATE ] = 5;
        cr.ParamBase[ ST_CRITICAL_CHANCE ] = 3;

        cr.ParamBase[ SK_UNARMED ] = 200;
        cr.ParamBase[ SK_SNEAK ] = 140;
        cr.ParamBase[ ST_BODY_TYPE ] = BT_RADSCORPION;
        break;

    case SKIN_SCORP:
        cr.ParamBase[ ST_STRENGTH ] = 7;
        cr.ParamBase[ ST_PERCEPTION ] = 6;
        cr.ParamBase[ ST_ENDURANCE ] = 7;
        cr.ParamBase[ ST_CHARISMA ] = 1;
        cr.ParamBase[ ST_INTELLECT ] = 1;
        cr.ParamBase[ ST_AGILITY ] = 6;
        cr.ParamBase[ ST_LUCK ] = 2;
        cr.ParamBase[ ST_MAX_LIFE ] = 100;
        cr.ParamBase[ ST_ACTION_POINTS ] = 8;
        cr.ParamBase[ ST_ARMOR_CLASS ] = 30;
        cr.ParamBase[ ST_MELEE_DAMAGE ] = 16;
        cr.ParamBase[ ST_HEALING_RATE ] = 4;
        cr.ParamBase[ ST_CRITICAL_CHANCE ] = 3;

        cr.ParamBase[ SK_UNARMED ] = 210;
        cr.ParamBase[ SK_SNEAK ] = 80;
        cr.ParamBase[ ST_BODY_TYPE ] = BT_RADSCORPION;
        break;

    case SKIN_CLAW_SMALL:
        cr.ParamBase[ ST_STRENGTH ] = 7;
        cr.ParamBase[ ST_PERCEPTION ] = 6;
        cr.ParamBase[ ST_ENDURANCE ] = 7;
        cr.ParamBase[ ST_CHARISMA ] = 1;
        cr.ParamBase[ ST_INTELLECT ] = 1;
        cr.ParamBase[ ST_AGILITY ] = 6;
        cr.ParamBase[ ST_LUCK ] = 3;
        cr.ParamBase[ ST_MAX_LIFE ] = 80;
        cr.ParamBase[ ST_ACTION_POINTS ] = 6;
        cr.ParamBase[ ST_ARMOR_CLASS ] = 25;
        cr.ParamBase[ ST_MELEE_DAMAGE ] = 10;
        cr.ParamBase[ ST_HEALING_RATE ] = 4;
        cr.ParamBase[ ST_CRITICAL_CHANCE ] = 3;

        cr.ParamBase[ SK_UNARMED ] = 210;
        cr.ParamBase[ SK_SNEAK ] = 140;
        cr.ParamBase[ ST_BODY_TYPE ] = BT_DEADCLAW;
        break;

    case SKIN_ALIEN:
        cr.ParamBase[ ST_STRENGTH ] = 7;
        cr.ParamBase[ ST_PERCEPTION ] = 6;
        cr.ParamBase[ ST_ENDURANCE ] = 7;
        cr.ParamBase[ ST_CHARISMA ] = 1;
        cr.ParamBase[ ST_INTELLECT ] = 1;
        cr.ParamBase[ ST_AGILITY ] = 7;
        cr.ParamBase[ ST_LUCK ] = 3;
        cr.ParamBase[ ST_MAX_LIFE ] = 120;
        cr.ParamBase[ ST_ACTION_POINTS ] = 8;
        cr.ParamBase[ ST_ARMOR_CLASS ] = 30;
        cr.ParamBase[ ST_MELEE_DAMAGE ] = 15;
        cr.ParamBase[ ST_HEALING_RATE ] = 4;
        cr.ParamBase[ ST_CRITICAL_CHANCE ] = 3;

        cr.ParamBase[ SK_UNARMED ] = 240;
        cr.ParamBase[ SK_SNEAK ] = 80;
        cr.ParamBase[ ST_BODY_TYPE ] = BT_ALIEN;
        break;

    case SKIN_CENTAUR:
        cr.ParamBase[ ST_STRENGTH ] = 8;
        cr.ParamBase[ ST_PERCEPTION ] = 6;
        cr.ParamBase[ ST_ENDURANCE ] = 8;
        cr.ParamBase[ ST_CHARISMA ] = 1;
        cr.ParamBase[ ST_INTELLECT ] = 1;
        cr.ParamBase[ ST_AGILITY ] = 7;
        cr.ParamBase[ ST_LUCK ] = 4;
        cr.ParamBase[ ST_MAX_LIFE ] = 150;
        cr.ParamBase[ ST_ACTION_POINTS ] = 8;
        cr.ParamBase[ ST_ARMOR_CLASS ] = 30;
        cr.ParamBase[ ST_MELEE_DAMAGE ] = 15;
        cr.ParamBase[ ST_HEALING_RATE ] = 3;
        cr.ParamBase[ ST_CRITICAL_CHANCE ] = 3;

        cr.ParamBase[ SK_UNARMED ] = 240;
        cr.ParamBase[ SK_SNEAK ] = 40;
        cr.ParamBase[ ST_BODY_TYPE ] = BT_CENTAUR;
        break;

    case SKIN_CLAW:
        cr.ParamBase[ ST_STRENGTH ] = 8;
        cr.ParamBase[ ST_PERCEPTION ] = 6;
        cr.ParamBase[ ST_ENDURANCE ] = 8;
        cr.ParamBase[ ST_CHARISMA ] = 1;
        cr.ParamBase[ ST_INTELLECT ] = 1;
        cr.ParamBase[ ST_AGILITY ] = 7;
        cr.ParamBase[ ST_LUCK ] = 4;
        cr.ParamBase[ ST_MAX_LIFE ] = 170;
        cr.ParamBase[ ST_ACTION_POINTS ] = 6;
        cr.ParamBase[ ST_ARMOR_CLASS ] = 25;
        cr.ParamBase[ ST_MELEE_DAMAGE ] = 13;
        cr.ParamBase[ ST_HEALING_RATE ] = 3;
        cr.ParamBase[ ST_CRITICAL_CHANCE ] = 3;

        cr.ParamBase[ SK_UNARMED ] = 240;
        cr.ParamBase[ SK_SNEAK ] = 80;
        cr.ParamBase[ ST_BODY_TYPE ] = BT_DEADCLAW;
        break;

    case SKIN_FLOATER:
        cr.ParamBase[ ST_STRENGTH ] = 8;
        cr.ParamBase[ ST_PERCEPTION ] = 6;
        cr.ParamBase[ ST_ENDURANCE ] = 8;
        cr.ParamBase[ ST_CHARISMA ] = 1;
        cr.ParamBase[ ST_INTELLECT ] = 1;
        cr.ParamBase[ ST_AGILITY ] = 7;
        cr.ParamBase[ ST_LUCK ] = 3;
        cr.ParamBase[ ST_MAX_LIFE ] = 220;
        cr.ParamBase[ ST_ACTION_POINTS ] = 8;
        cr.ParamBase[ ST_ARMOR_CLASS ] = 20;
        cr.ParamBase[ ST_MELEE_DAMAGE ] = 15;
        cr.ParamBase[ ST_HEALING_RATE ] = 2;
        cr.ParamBase[ ST_CRITICAL_CHANCE ] = 3;

        cr.ParamBase[ SK_UNARMED ] = 250;
        cr.ParamBase[ SK_SNEAK ] = 100;
        cr.ParamBase[ ST_BODY_TYPE ] = BT_FLOATER;
        break;

    case SKIN_ALIEN_QUEEN:
        cr.ParamBase[ ST_STRENGTH ] = 9;
        cr.ParamBase[ ST_PERCEPTION ] = 6;
        cr.ParamBase[ ST_ENDURANCE ] = 9;
        cr.ParamBase[ ST_CHARISMA ] = 1;
        cr.ParamBase[ ST_INTELLECT ] = 1;
        cr.ParamBase[ ST_AGILITY ] = 7;
        cr.ParamBase[ ST_LUCK ] = 3;
        cr.ParamBase[ ST_MAX_LIFE ] = 200;
        cr.ParamBase[ ST_ACTION_POINTS ] = 8;
        cr.ParamBase[ ST_ARMOR_CLASS ] = 30;
        cr.ParamBase[ ST_MELEE_DAMAGE ] = 25;
        cr.ParamBase[ ST_HEALING_RATE ] = 1;
        cr.ParamBase[ ST_CRITICAL_CHANCE ] = 5;

        cr.ParamBase[ SK_UNARMED ] = 260;
        cr.ParamBase[ SK_SNEAK ] = 120;
        cr.ParamBase[ ST_BODY_TYPE ] = BT_ALIEN;
        break;

    case SKIN_CLAW_KING:
        cr.ParamBase[ ST_STRENGTH ] = 9;
        cr.ParamBase[ ST_PERCEPTION ] = 6;
        cr.ParamBase[ ST_ENDURANCE ] = 9;
        cr.ParamBase[ ST_CHARISMA ] = 1;
        cr.ParamBase[ ST_INTELLECT ] = 1;
        cr.ParamBase[ ST_AGILITY ] = 7;
        cr.ParamBase[ ST_LUCK ] = 3;
        cr.ParamBase[ ST_MAX_LIFE ] = 250;
        cr.ParamBase[ ST_ACTION_POINTS ] = 6;
        cr.ParamBase[ ST_ARMOR_CLASS ] = 20;
        cr.ParamBase[ ST_MELEE_DAMAGE ] = 15;
        cr.ParamBase[ ST_HEALING_RATE ] = 1;
        cr.ParamBase[ ST_CRITICAL_CHANCE ] = 5;

        cr.ParamBase[ SK_UNARMED ] = 240;
        cr.ParamBase[ SK_SNEAK ] = 80;
        cr.ParamBase[ ST_BODY_TYPE ] = BT_DEADCLAW;
        break;

    case SKIN_GECKO_FIRE:
        cr.ParamBase[ ST_STRENGTH ] = 9;
        cr.ParamBase[ ST_PERCEPTION ] = 6;
        cr.ParamBase[ ST_ENDURANCE ] = 9;
        cr.ParamBase[ ST_CHARISMA ] = 1;
        cr.ParamBase[ ST_INTELLECT ] = 1;
        cr.ParamBase[ ST_AGILITY ] = 7;
        cr.ParamBase[ ST_LUCK ] = 3;
        cr.ParamBase[ ST_MAX_LIFE ] = 150;
        cr.ParamBase[ ST_ACTION_POINTS ] = 6;
        cr.ParamBase[ ST_ARMOR_CLASS ] = 15;
        cr.ParamBase[ ST_MELEE_DAMAGE ] = 10;
        cr.ParamBase[ ST_HEALING_RATE ] = 4;
        cr.ParamBase[ ST_CRITICAL_CHANCE ] = 1;

        cr.ParamBase[ SK_UNARMED ] = 240;
        cr.ParamBase[ SK_SNEAK ] = 100;
        cr.ParamBase[ ST_BODY_TYPE ] = BT_GECKO;
        break;
    }
    if( mode != 0 )
    {
        if( mode == 1 )
            cr.ParamBase[ ST_MAX_LIFE ] += 10 + cr.ParamBase[ ST_MAX_LIFE ] * 0.2;
        if( mode == 2 )
            cr.ParamBase[ ST_MAX_LIFE ] += 20 + cr.ParamBase[ ST_MAX_LIFE ] * 0.5;
    }
    cr.ParamBase[ PE_AWARENESS ] = 0;
    cr.StatBase[ ST_BASE_CRTYPE ] = type;
    cr.ChangeCrType( type );
}
