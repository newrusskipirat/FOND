

bool LocIsModoc(uint locPid)
{
	return(locPid<=(1253));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(32)||locPid==(1216)||locPid==(43)||locPid==96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(42));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

shared interface Project
{
	string@get_Name();
	void Build();
	void SetAssociation(string@ex,string@className,string@classModule);
}

shared interface FileObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	void FormatStringData(string&nameData,string&data);
	FileObject@get_Pattern(string&name)const;
	FileObject@get_Copy(string&name);                           
	
}

shared class TimeLog
{
	uint tick;
	
	TimeLog()
	{
		refresh();
	}
	
	void refresh()
	{
		tick=GetTick();
	}
	
	bool check(uint count)
	{
		return(GetTick()-tick>=count);
	}
	
	uint get()
	{
		uint old=tick;
		refresh();
		return(tick-old);
	}
	
	void Log(string&in message)
	{
		::ClearLog(message+" ["+(GetTick()-tick)+"ms]");
	}
}

shared interface AnyDataObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	uint[]@get_SaveData();
	void InitData(uint[]&data);
}

shared interface ManagerObject
{
	FileObject@get_ProtoObject(string@name);
	void ParseProtoTypes(const string&ex,const FileObject&pattern,const string@search);
	FileObject@ParseProtoTypeFile(string&name,const string&ex,const FileObject&pattern,const string@search);
	FileObject@AddPrototype(FileObject@proto);
	FileObject@StringToFileObject(string&name,string&txt,const FileObject&pattern);
}

shared interface ValueAPI{}
shared class SettingsAPI
{
	string Name;
	bool IsDebug;
}                                                  

shared class Hexagonal
{
	Hexagonal(){Reset();}
	Hexagonal(const uint16&in x,const uint16&in y){Set(x,y);}
	Hexagonal(const Hexagonal&master){Set(master);}                                       
	
	void Set(const uint16&in x,const uint16&in y){X=x;Y=y;}
	void Set(const Hexagonal&in other){Set(other.X,other.Y);}
	void Reset(){X=Y=0;}
	uint Distantion(Hexagonal&other){return GetDistantion(X,Y,other.X,other.Y);}
	
	uint16 X;
	uint16 Y;
	
	bool opEquals(const Hexagonal&in other){return(other.X==X&&other.Y==Y);}
	Hexagonal&opAssign(const Hexagonal&in other)
	{
		Set(other);
		return this;
	}
	
	const uint get_UID(const uint w)const{return X+Y*w;}
	string get_Debug(){return"X:"+X+"Y:"+Y;}
	void Log(string&str){::Log(str+":"+Debug);}
}                            

shared class Line
{
	Line(Hexagonal&a,Hexagonal&b){@A=a;@B=b;}
	
	uint get_Length()
	{
		return B.Distantion(A);
	}
	
	uint get_Point(Hexagonal&point)
	{
		return B.Distantion(point);
	}
	
	float get_Module(Hexagonal&point)
	{
		return Point[point]/Length;
	}
	
	Hexagonal@get_opIndex(const uint&in size)
	{
		
		const float mod=float(size/Length);
		return@Hexagonal(A.X+(B.X-A.X)*mod,A.Y+(B.Y-A.Y)*mod);
	}                      
	
	string get_Debug(){return"A<"+A.Debug+">B<"+B.Debug+">";}
	void Log(string&str){::Log(str+":"+Debug);}
	
	Hexagonal@A;
	Hexagonal@B;
}                                                                                                                                                                                        

string[]__critterHistoryInfo

import void SetChosenTabLevelUp(bool enable)from"chosen_tabs";
import int GUI_GetActiveScreen()from"client_gui";

import void SetChosenTabHeavyDmg(bool enable)from"chosen_tabs";
import void SetChosenTabBullOver(bool enable)from"chosen_tabs";
import void SetChosenTabBleed(bool enable)from"chosen_tabs";
import void SetChosenTabBldTox(bool enable)from"chosen_tabs";                                                                                                                                                                                                                                                                      

void changedParam_Level(CritterCl&cr,uint,int oldValue)
{
	if(cr.ParamBase[(77)]>oldValue)
	{
		PlaySound("LEVELUP.ACM");
		Message((3),(4090),int(0));
		SetChosenTabLevelUp(true);
	}
}

void changedParam_Experience(CritterCl&cr,uint,int oldValue)
{
	int curValue=cr.ParamBase[(76)];
	if(curValue>oldValue)
	Message(ReplaceText(GetMsgStr((3),(4091)),"VALUE",curValue-oldValue),int(0));
}

void changedParam_UnspentPerks(CritterCl&cr,uint,int oldValue)
{
	if(cr.ParamBase[(79)]>0&&GUI_GetActiveScreen()==(13))
	ShowScreen((32),0,0,0);
}

void changedParam_CritterStatus(CritterCl&cr,uint,int oldValue)
{
	SetChosenTabHeavyDmg((((cr.StatBase[(146)])&((0x010)))!=0)?true:false);
	SetChosenTabBullOver((((cr.StatBase[(146)])&((0x040)))!=0)?true:false);
	SetChosenTabBleed((((cr.StatBase[(146)])&((0x001)))!=0)?true:false);
	SetChosenTabBldTox((((cr.StatBase[(146)])&((0x008)))!=0)?true:false);
}                                                                                             

void CritterGenerate(int[]&data)

{
	if(data[(77)]<=0)
	data[(77)]=1;
	
	if(data[(552)]!=0)
	data[(5)]+=1;
	if(data[(551)]!=0)
	data[(0)]+=2;
	if(data[(560)]!=0)
	{
		data[(206)]+=15;
		data[(207)]+=15;
		data[(214)]+=15;
		data[(215)]+=15;
		data[(200)]-=10;
		data[(201)]-=10;
		data[(202)]-=10;
		data[(203)]-=10;
		data[(204)]-=10;
		data[(205)]-=10;
	}     
	
	data[(200)]+=5+4*data[(5)];
	data[(201)]+=0+2*data[(5)];
	data[(202)]+=0+2*data[(5)];
	data[(203)]+=30+2*(data[(5)]+data[(0)]);
	data[(204)]+=20+2*(data[(5)]+data[(0)]);
	data[(205)]+=0+4*data[(5)];
	data[(206)]+=0+2*(data[(1)]+data[(4)]);
	data[(207)]+=5+data[(1)]+data[(4)];
	data[(208)]+=5+3*data[(5)];
	data[(209)]+=10+data[(1)]+data[(5)];
	data[(210)]+=0+3*data[(5)];
	data[(211)]+=10+data[(1)]+data[(5)];
	data[(212)]+=0+4*data[(4)];
	data[(213)]+=0+3*data[(4)];
	data[(214)]+=0+5*data[(3)];
	data[(215)]+=0+4*data[(3)];
	data[(216)]+=0+5*data[(6)];
	data[(217)]+=0+2*(data[(2)]+data[(4)]);
	
	if(data[(226)]!=0)
	data[data[(226)]]+=30;
	if(data[(227)]!=0)
	data[data[(227)]]+=30;
	if(data[(228)]!=0)
	data[data[(228)]]+=30;
	
	if(data[(550)]!=0)
	{
		data[(30)]-=data[(2)]*2;
		data[(31)]-=data[(2)]*5;
		data[(13)]+=2;
	}
	if(data[(551)]!=0)
	data[(8)]-=2;
	if(data[(555)]!=0)
	{
		data[(9)]-=data[(5)];
		data[(12)]+=5;
	}
	if(data[(556)]!=0)
	data[(10)]+=4;
	if(data[(554)]!=0)
	data[(14)]+=10;
	if(data[(556)]!=0)
	data[(15)]-=30;    
	
	data[(9)]+=data[(5)]*5; 
	
	data[(7)]+=data[(0)]*4+data[(2)]*8;
	data[(8)]+=data[(5)]/2;
	data[(11)]+=((25+data[(0)]*(25-data[(552)]*10))*453);
	data[(10)]+=(data[(0)]>6?data[(0)]-5:1);
	data[(31)]+=data[(2)]*5;
	data[(30)]+=data[(2)]*2;
	data[(12)]+=data[(1)]*2;
	data[(13)]+=(((1)>(data[(2)]/3))?(1):(data[(2)]/3));
	data[(14)]+=data[(6)]*2;   
	
	data[(8)]+=5;
	data[(72)]=data[(7)];
	data[(75)]=data[(8)]*100;
	data[(124)]=1;
	
	data[(128)]=100;
	data[(127)]=100;
	data[(126)]=100;
	data[(120)]=100;
}

bool CritterGenerateCheck(int[]&data)
{
	
	int special=0;
	for(uint i=(0);i<=(6);i++)
	{
		if(data[i]<1||data[i]>10)
		{
			Message(GetMsgStr((3),(1005)));
			return false;
		}
		special+=data[i];
	}
	if(special!=__StartSpecialPoints)
	{
		Message(GetMsgStr((3),(1005)));
		return false;
	}                 
	
	if((data[(226)]<int((__SkillBegin))||data[(226)]>int((__SkillEnd)))||
	(data[(227)]<int((__SkillBegin))||data[(227)]>int((__SkillEnd)))||
	(data[(228)]<int((__SkillBegin))||data[(228)]>int((__SkillEnd))))
	{
		Message(GetMsgStr((3),(1029)));
		return false;
	}  
	
	if(data[(71)]==0)
	{
		if(((data[(67)]>=33&&data[(67)]<=38)||data[(67)]==61||data[(67)]==63||data[(67)]==73||data[(67)]==74||data[(67)]==83||data[(67)]==94))
		{
			Message(GetMsgStr((3),(324)));
			return false;
		}
	}
	else
	{
		if(data[(67)]==31||(data[(67)]>=39&&data[(67)]<=45)||data[(67)]==48||data[(67)]==56||data[(67)]==57||data[(67)]==62||data[(67)]==64||data[(67)]==72||data[(67)]==77||
		data[(67)]==78||data[(67)]==82||data[(67)]==84||data[(67)]==87||data[(67)]==88||data[(67)]==89||data[(67)]==91||data[(67)]==92||data[(67)]==93||data[(67)]==96||data[(67)]==98)
		{
			Message(GetMsgStr((3),(324)));
			return false;
		}
	}
	
	if(data[(67)]==0)
	data[(67)]=(data[(71)]==0?62:61);  
	
	return true;
}                 

int getParam_CriticalChance(CritterCl&cr,uint)
{
	int val=cr.StatBase[(14)]+cr.StatBase[(46)]+cr.Stat[(6)]*2;
	return(((val)>(100))?(100):(((val)<(0))?(0):(val)));
}

int getParam_Luck(CritterCl&cr,uint)
{
	int val=cr.StatBase[(6)]+cr.StatBase[(38)];
	return(((val)>(10))?(10):(((val)<(1))?(1):(val)));
}
