
# ifndef __MAIN_AI
import AiHashMemory @get_AiHashList( ) from "Ai"; // AiHashMemory@ memmory = @AiHashList; - return valid reference
# endif

// define for create new Ai class:
# define NewAI #( nameAI, name, base )							\
				void name( Critter& critter, bool firstTime ) \
				{ AiGeneralInitialize( critter ); nameAI( critter ).Initialize( critter ); }	\
				class nameAI : base

shared interface iController
{
	bool IsEnemy( Critter& npc, Critter& target );
	//bool IsEnemy( Critter& target ); // if target is enemy return true else return false 
	bool Attack( Critter& target, bool ignoredCheckers );	// if attack target return true else return false 
	
	bool Walk( Critter& critter ); 	// if return false run GoHome
	bool GoHome( Critter& critter ); // if result move to home return true else return false 
	
	bool Idle( );							// if return true run Walk
	
	iAI @get_Ai( );
}

void AiGeneralInitialize( Critter& critter )
{
	
}

shared interface iAI
{
	bool IsEnemy( Critter& target );			// if target is enemy return true else return false 
	int IsProtected( Critter& target );		// return priority protection for target
	void Initialize( Critter& critter );	
	
	uint GetWorkCritters( Critter@[] @critters, Critter& critter );	// get critters for further worked, return count critters
	uint GetTeamCritters( Critter& critter, Critter@[]@ critters );
	
	bool AddAttackPlane( Critter& critter, Critter& target );
	
	bool get_IsIdleWalk( );
	bool get_IsControllerEnemy( );
	
	iAI @Copy( Critter& critter );			// return copy ai
}

shared class Hash
{
	Hash( string @str, iAI @mem )
	{
		@text = @str;
		hash = GetStrHash ( text );
		@memory = mem;
	}

	string @text;
	uint hash;
	iAI @memory;
}

shared class AiHashMemory
{
	string @Get( uint hash )
	{
		for( uint i = 0, iEnd = this.HashList.length(); i < iEnd; i++ )
			if( this.HashList[i].hash == hash )
				return @this.HashList[i].text;

		return "";
	}
	
	uint Get( string str, iAI @mem = null )
	{
		for( uint i = 0, iEnd = this.HashList.length(); i < iEnd; i++ )
			if( this.HashList[i].text == str )
				return this.HashList[i].hash;

		if( @mem is null ) return 0;

		Hash h( str, mem );
		this.HashList.insertLast( h );
		return h.hash;
	}

	iAI @GetAI( uint hash )
	{
		for( uint i = 0, iEnd = this.HashList.length(); i < iEnd; i++ )
			if( this.HashList[i].hash == hash )
				return @this.HashList[i].memory;

		return null;
	}
	
	iAI @GetAI( string str )
	{
		for( uint i = 0, iEnd = this.HashList.length(); i < iEnd; i++ )
			if( this.HashList[i].text == str )
				return @this.HashList[i].memory;

		return null;
	}
	
	private Hash@[] HashList;
}