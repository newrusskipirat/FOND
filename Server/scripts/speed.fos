
#include "_macros.fos"

import uint GetAllPlayers( Critter@[]& crs ) from "manager";

void ModuleInit( string&in, Handle@ )
{
    EventRoot.SetCallback( "Start", InitSpeedArray );
}

int[] SpeedArray( 2000, 0 );

void InitSpeedArray( string&in, Handle@ ) // Export
{
    file crTypes;
    if( crTypes.open( "./data/CritterTypes.cfg", "r" ) == -1 )
        return;

    while( !crTypes.isEndOfFile() )
    {
        string str;
        crTypes.readLine( str );
        if( str.length() < 10 || str[ 0 ] != '@' )
            continue;

        string@[] @ line = splitEx( str, " " );

        int num = 0, walk = 0, run = 0;
        if( !StrToInt( line[ 1 ], num ) || num < 0 || num > 999 || !StrToInt( line[ 37 ], walk ) || !StrToInt( line[ 38 ], run ) )
            continue;

        SpeedArray[ num * 2 ] = walk;
        SpeedArray[ num * 2 + 1 ] = run;
    }
    crTypes.close();
}

void reset()
{
    Critter@[] crs;
    GetAllPlayers( crs );

    for( uint i = 0, j = crs.length(); i < j; i++ )
    {
        ChangeCritterSpeed( crs[ i ] );
    }
}

void reset( Critter& cr, int p0, int p1, int )
{
    reset();
}

void testISA( Critter& cr, int p0, int p1, int )
{
    InitSpeedArray( "Start", null );
    reset();
}


void ChangeCritterSpeed( Critter& cr )
{
	if( cr.IsPlayer() && cr.GetAccess() == ACCESS_ADMIN && cr.Mode[MODE_ADMIN_SPEED] != 0 ) return;
		
    uint16 run = 0, walk = 0, healthMod = 0;
    int    curHp = cr.Stat[ ST_CURRENT_HP ], maxHp = cr.Stat[ ST_MAX_LIFE ];
    uint   carry = cr.Stat[ ST_CARRY_WEIGHT ], weight = cr.ItemsWeight(), carryMod = 0;

    Item @ armor = cr.GetItem( 0, SLOT_ARMOR );
    bool apa = false;
    if( @armor != null )
    {
        uint16 pid = armor.GetProtoId();

        apa = ( pid == PID_POWERED_ARMOR ||
                pid == PID_HARDENED_POWER_ARMOR ||
                pid == PID_ADVANCED_POWER_ARMOR ||
                pid == PID_ADVANCED_POWER_ARMOR_MK2 );
    }

    if( carry == 0 )
        carry += 1;
    uint weight_cantRun = carry * 0.5,
         weight_limitWalk = carry * 0.75,
         weight_cantWalk = carry;

    bool CanRun = ( ( SpeedArray[ cr.CrType * 2 + 1 ] != 0 ) && ( weight < weight_cantRun ) && !apa );
    if( cr.GetTimeEvents( CTE_SLOWRELOAD, null, null, null ) == 0 )
		cr.ModeBase[ MODE_NO_RUN ] = ( CanRun ? 0 : 1 );
	
    if( curHp <= 0 )
        curHp = 1;
    healthMod = uint16( 20 * maxHp / curHp );

    if( !apa )
        carryMod = uint( 400 * weight / ( carry ) );

    uint8 speedMod = cr.StatBase[ ST_SPEED_MOD ];
    speedMod = CLAMP( speedMod, 1, 1000 );

    walk = uint16( SpeedArray[ cr.CrType * 2 ] + ( ( weight > weight_limitWalk ) ? carryMod : 0 ) + healthMod ) / ( speedMod * 0.01 );
    run  = uint16( SpeedArray[ cr.CrType * 2 + 1 ]  + carryMod + healthMod ) / ( speedMod * 0.01 );


    walk = CLAMP( walk, 400, 1000 );
    run = CLAMP( run, 200, walk );

    cr.StatBase[ ST_WALK_TIME ] = walk;
    cr.StatBase[ ST_RUN_TIME ] = run;
}
