

bool LocIsModoc(uint locPid)
{
	return(locPid<=(1253));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(32)||locPid==(1216)||locPid==(43)||locPid==96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(42));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

shared interface Project
{
	string@get_Name();
	void Build();
	void SetAssociation(string@ex,string@className,string@classModule);
}

shared interface FileObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	void FormatStringData(string&nameData,string&data);
	FileObject@get_Pattern(string&name)const;
	FileObject@get_Copy(string&name); 
	
	void set_GlobalData(string@name,string@value);          
	
	string@get_GlobalData(string@name);            
	
}

shared class TimeLog
{
	uint tick;
	
	TimeLog()
	{
		refresh();
	}
	
	void refresh()
	{
		tick=GetTick();
	}
	
	bool check(uint count)
	{
		return(GetTick()-tick>=count);
	}
	
	uint get()
	{
		uint old=tick;
		refresh();
		return(tick-old);
	}
	
	void Log(string&in message)
	{
		::ClearLog(message+" ["+(GetTick()-tick)+"ms]");
	}
}

shared interface AnyDataObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	uint[]@get_SaveData();
	void InitData(uint[]&data);
}

shared interface ManagerObject
{
	FileObject@get_ProtoObject(string@name);
	void ParseProtoTypes(const string&ex,const FileObject&pattern,const string@search);
	FileObject@ParseProtoTypeFile(string&name,const string&ex,const FileObject&pattern,const string@search);
	FileObject@AddPrototype(FileObject@proto);
	FileObject@StringToFileObject(string&name,string&txt,const FileObject&pattern);
}

shared interface ValueAPI{}
shared class SettingsAPI
{
	string Name;
	bool IsDebug;
} 

shared class GlobalData
{
	uint Hash;
	string Value;
	
	GlobalData(string@name)
	{
		Hash=GetStrHash(name);
		Value="";
	} 
	
	void SaveData(uint[]&outArray,uint&position)
	{
		uint len=Value.length();
		
		outArray.resize(position+2+len/2);
		
		outArray[position++]=Hash;
		outArray[position++]=len;
		
		for(uint i=0;i<len;i++)
		{
			outArray[position]|=Value[i++]<<24;
			outArray[position]|=Value[i++]<<16;
			outArray[position]|=Value[i++]<<8;
			outArray[position++]|=Value[i];
		}
	} 
	
	void LoadData(uint[]&in outArray,uint&position)
	{
		Hash=outArray[position++];
		uint len=outArray[position++];
		Value.resize(len);
		
		for(uint i=0;i<len;i++)
		{
			Value[i++]=(outArray[position]>>24)&0xFF;
			Value[i++]=(outArray[position]>>16)&0xFF;
			Value[i++]=(outArray[position]>>8)&0xFF;
			Value[i]=outArray[position++]&0xFF;
			
		}
	}
} 

shared class Hexagonal
{
	Hexagonal(){Reset();}
	Hexagonal(const uint16&in x,const uint16&in y){Set(x,y);}
	Hexagonal(const Hexagonal&master){Set(master);}
	
	Hexagonal(const Critter&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Item&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Scenery&master){Set(master.HexX,master.HexY);}
	
	bool Entire(Map&map,int entNum){return map.GetEntireCoords(entNum,0,X,Y);}
	bool IsPassed(Map&map){return ValidPosition(map)&&map.IsHexPassed(X,Y);}
	bool IsPassed(Map&map,Hexagonal&begin,Hexagonal&end){return ValidPosition(map,begin,end)&&map.IsHexPassed(X,Y);}
	
	bool ValidPosition(Map&map)
	{
		Hexagonal end,begin;
		if(end.Entire(map,0)&&begin.Entire(map,255))
		return ValidPosition(map,begin,end);
		return false;
	}
	
	bool ValidPosition(Map&map,Hexagonal&begin,Hexagonal&end)
	{
		return(X>=begin.X&&Y>=begin.Y
		&&X<=end.X&&Y<=end.Y);
	}
	
	bool Transit(Critter&critter,Map&map){return Transit(critter,map,critter.Dir);}
	bool Transit(Critter&critter,Map&map,uint8 direction)
	{
		if(!IsPassed(map))return false;
		return critter.TransitToMap(map.Id,X,Y,direction);
	}
	
	bool Transit(Critter&critter,uint mapId){return Transit(critter,mapId,critter.Dir);}
	bool Transit(Critter&critter,uint mapId,uint8 direction)
	{
		if(mapId==0)return false;
		Map@map=GetMap(mapId);
		if(@map is null)return false;
		return Transit(critter,map,direction);
	} 
	
	void Set(const uint16&in x,const uint16&in y){X=x;Y=y;}
	void Set(const Hexagonal&in other){Set(other.X,other.Y);}
	void Reset(){X=Y=0;}
	uint Distantion(Hexagonal&other){return GetDistantion(X,Y,other.X,other.Y);}
	
	uint16 X;
	uint16 Y;
	
	bool opEquals(const Hexagonal&in other){return(other.X==X&&other.Y==Y);}
	Hexagonal&opAssign(const Hexagonal&in other)
	{
		Set(other);
		return this;
	}
	
	const uint get_UID(const uint w)const{return X+Y*w;}
	string get_Debug(){return"X:"+X+"Y:"+Y;}
	void Log(string&str){::Log(str+":"+Debug);}
}    

shared class MapHash
{
	MapHash(const uint16&in protoId)
	{
		ProtoId=protoId;
		@Min=null;
		@Max=null;
	}
	
	MapHash&opAssign(Map&map)
	{
		@Min=Hexagonal(0,0);
		@Max=Hexagonal(0,0);
		map.GetEntireCoords(0,0,Max.X,Max.Y);
		map.GetEntireCoords((255),0,Min.X,Min.Y);
		return this;
	}
	
	uint16 ProtoId;
	Hexagonal@Min;
	Hexagonal@Max;
} 

shared class Line
{
	Line(Hexagonal&a,Hexagonal&b){@A=a;@B=b;}
	
	uint get_Length()
	{
		return B.Distantion(A);
	}
	
	uint get_Point(Hexagonal&point)
	{
		return B.Distantion(point);
	}
	
	float get_Module(Hexagonal&point)
	{
		return Point[point]/Length;
	}
	
	Hexagonal@get_opIndex(const uint&in size)
	{
		
		const float mod=float(size/Length);
		return@Hexagonal(A.X+(B.X-A.X)*mod,A.Y+(B.Y-A.Y)*mod);
	} 
	
	Line(Map&map,uint16 grid,MapHash@hash)
	{
		if(@hash is null)
		{
			Hexagonal min,max;
			map.GetTransferParams(min.X,min.Y,max.X,max.Y,grid);
			
			@A=@Hexagonal(min.X,min.Y);
			@B=@Hexagonal(max.X,max.Y);
		}
		else
		{
			if(@hash.Min is null||@hash.Max is null)
			map.GetTransferParams(hash.Min.X,hash.Min.Y,hash.Max.X,hash.Max.Y,grid);
			
			@A=@Hexagonal(hash.Min.X,hash.Min.Y);
			@B=@Hexagonal(hash.Max.X,hash.Max.Y);
		}
	} 
	
	string get_Debug(){return"A<"+A.Debug+">B<"+B.Debug+">";}
	void Log(string&str){::Log(str+":"+Debug);}
	
	Hexagonal@A;
	Hexagonal@B;
}  

import MapHash@GetMapHash(const uint16&in pid)from"world";
import uint CreateLocation(Hexagonal&coordinate,uint16 locationPid)from"world"; 

import ManagerObject@get_objectManager()from"world"; 

import EventTree@get_EventRoot()from"world"; 

import Project@CreateProject(string@name,string@path)from"main";
import Project@get_Project(string@name)from"main";                                                                                                                      

MapTileData@[]MapTileDatabase;                                                                                                                                                                               

class MapTileData
{ 
	
	uint Id;  
	
	int[]TileHashs;
	
	int[]Tiles;
	
	uint[]Players;
	
	MapTileData()
	{
		Id=0;
		
		TileHashs.resize(1);
		TileHashs[0]=0;
		
		Tiles.resize(2);
		Tiles[0]=0;
		Tiles[1]=0;
		
		Players.resize(0);
	}
	
	uint16 TileHashCount()
	{
		return TileHashs.length();
	}
	
	uint TileCount()
	{
		return Tiles.length()>>1;
	}  
	
	bool AddPlayer(Critter&player)
	{
		bool ck=false;
		for(uint i=0;i<Players.length();i++)
		{
			if(Players[i]!=player.Id)
			continue;
			ck=true;
			break;
		}
		
		if(!ck)
		{
			Players.insertLast(player.Id);
			ck=true;
		}
		
		ck=ck&&(TileHashCount()<1||SendFullHash(player))&&(TileCount()<1||SendAllTiles(player));
		
		if(ck)
		player.StatBase[(189)]=Id;
		else
		Log("qmap AddPlayer error.");
		
		return ck;
	}
	
	bool DelPlayer(Critter&player)
	{
		for(uint i=0;i<Players.length();i++)
		{
			if(Players[i]!=player.Id)
			continue;
			player.RunClientScript("qmap_client@__delMTD",int(Id),0,0,null,null);
			player.StatBase[(189)]=0;
			Players.removeAt(i);
			return true;
		}
		return false;
	}
	
	void GetSendPlayers(Critter@player,Critter@[]&crs)
	{
		if(player is null)
		{
			Map@map=GetMap(Id);
			Critter@cr=null;
			for(uint i=0;i<Players.length();i++)
			{
				@cr=map.GetCritter(Players[i]);
				if(cr is null)
				{
					Players.removeAt(i);
					i--;
					continue;
				}
				crs.insertLast(cr);
			}
			
		}
		else
		crs.insertLast(player);
	}  
	
	uint16 AddOneHash(int hash)
	{
		if(hash==0)
		return 0;
		
		uint16 num=0;
		
		for(uint16 i=1,len=TileHashCount();i<len;i++)
		{
			if(TileHashs[i]==0)
			num=i;
			else if(TileHashs[i]==hash)
			return i;
		}
		
		if(num!=0)
		{
			TileHashs[num]=hash;
		}
		else
		{ 
			
			num=TileHashCount();
			
			TileHashs.insertLast(hash); 
			
		}
		
		SendOneHash(null,num,hash);
		
		return num;
	}
	
	bool DelOneHash(int hash)
	{
		if(hash==0)
		return false;
		for(uint16 i=1,len=TileHashCount();i<len;i++)
		{
			if(TileHashs[i]!=hash)
			continue;
			
			TileHashs[i]=0;
			
			SendOneHash(null,i,0);
			
			return true;
		}
		return false;
	}  
	
	bool Set(uint16 hs,uint16 val,uint hex,bool rewrite)
	{
		
		return(DMO64_set(Tiles,hs,val,hex,rewrite)&&SendTile(null,hs,val,hex));
	}
	
	bool Add(int[]&data,bool rewrite)
	{
		if(DMO64_add(Tiles,data,rewrite))
		{
			ApplyBlockers();
			SendTiles(null,data);
			return true;
		}
		return false;
	}
	
	bool Clear(uint hex)
	{
		return Set(0,0,hex,true);
	}
	
	void ApplyBlockers()
	{
		Map@map=GetMap(Id);
		if(map is null)
		return;
		
		uint16 hs=0,val=0,hexX=0,hexY=0;
		uint8 layer=0;
		for(uint i=0,len=TileCount();i<len;i++)
		{
			DMO64_get(Tiles,i,hs,val,hexX,hexY,layer);
			if(layer!=2)
			continue;
			map.BlockHex(hexX,hexY,true);
		}
	}  
	
	bool SendFullHash(Critter@player)
	{
		if(TileHashCount()<1)
		{
			Log("Send Tiles Hash Error! Invalid data.");
			return false;
		}
		Critter@[]crs;
		GetSendPlayers(player,crs);
		for(uint i=0;i<crs.length();i++)
		crs[i].RunClientScript("qmap_client@__SetFullHash",int(Id),int(TileHashCount()),0,null,TileHashs);
		return true;
	}
	
	bool SendOneHash(Critter@player,uint16 hash_num,int hash)
	{
		Critter@[]crs;
		GetSendPlayers(player,crs);
		for(uint i=0;i<crs.length();i++)
		crs[i].RunClientScript("qmap_client@__SetOneHash",int(Id),int(hash_num),int(hash),null,null);
		return true;
	}  
	
	bool SendAllTiles(Critter@player)
	{
		if(TileCount()<1)
		{
			Log("SendAllTiles Error! Invalid data.");
			return false;
		}
		Critter@[]crs;
		GetSendPlayers(player,crs);
		for(uint i=0;i<crs.length();i++)
		crs[i].RunClientScript("qmap_client@__SetTiles",int(Id),int(TileCount()),1,null,Tiles);
		return true;
	}
	
	bool SendTiles(Critter@player,int[]&data)
	{
		if(data.length()%2!=0||data.length()<2)
		{
			Log("SendTiles Error! Invalid data.");
			return false;
		}
		Critter@[]crs;
		GetSendPlayers(player,crs);
		for(uint i=0;i<crs.length();i++)
		crs[i].RunClientScript("qmap_client@__SetTiles",int(Id),int(TileCount()),0,null,data);
		return true;
	}
	
	bool SendTile(Critter@player,uint16 hs,uint16 val,uint hex)
	{
		int data01=uint16ToInt(hs,val),
		data02=int(hex); 
		
		Critter@[]crs;
		GetSendPlayers(player,crs);
		for(uint i=0;i<crs.length();i++)
		crs[i].RunClientScript("qmap_client@__SetTile",int(Id),data01,data02,null,null);
		return true;
	}
	
}

uint findMTDi(uint mapId)
{
	if(mapId==0)
	return uint(-1);
	for(uint i=0,len=MapTileDatabase.length();i<len;i++)
	{
		if(MapTileDatabase[i].Id!=mapId)
		continue;
		if(i!=0)
		{
			MapTileData@temp_mtd=MapTileDatabase[i];
			MapTileDatabase.removeAt(i);
			MapTileDatabase.insertFirst(@temp_mtd);
		}
		return 0;
	}
	return uint(-1);
}

MapTileData@findMTD(uint mapId)
{
	uint ind=findMTDi(mapId);
	if(ind==uint(-1))
	return null;
	return MapTileDatabase[ind];
}

MapTileData@getMTD(uint mapId)
{
	uint num=uint(-1);
	for(uint i=0;i<MapTileDatabase.length();i++)
	{
		if(MapTileDatabase[i].Id==0)
		num=i;
		if(MapTileDatabase[i].Id!=mapId)
		continue;
		return MapTileDatabase[i];
	}
	if(num==uint(-1))
	{
		num=MapTileDatabase.length();
		MapTileData new_mtd;
		MapTileDatabase.insertLast(@new_mtd);
	}
	
	MapTileData@mtd=MapTileDatabase[num];
	
	mtd.Id=mapId;
	
	Map@map=GetMap(mapId);
	if(!(map is null))
	map.SetEvent((0),"_MapFinish");
	
	if(IsAnyData("dmo64_hash_"+mtd.Id))
	GetAnyData("dmo64_hash_"+mtd.Id,mtd.TileHashs);
	if(IsAnyData("dmo64_obj_"+mtd.Id))
	GetAnyData("dmo64_obj_"+mtd.Id,mtd.Tiles);
	mtd.ApplyBlockers();
	
	return mtd;
}

void qmap_critter_in(uint mapId,Critter&cr)
{
	
	MapTileData@mtd=getMTD(mapId);
	if(mtd is null)
	return;
	mtd.AddPlayer(cr);
	
}

void qmap_critter_out(uint mapId,Critter&cr)
{
	cr.StatBase[(189)]=0;
	MapTileData@mtd=findMTD(mapId);
	
	if(mtd is null)
	{
		return;
	}
	mtd.DelPlayer(cr);
	
}

void qmap_save_all()
{
	bool ckT=false,ckH=false;
	
	for(uint i=0,len=MapTileDatabase.length();i<len;i++)
	{
		MapTileData@mtd=MapTileDatabase[i];
		
		ckT=false;
		ckH=false;
		
		if(mtd.Id!=0)
		{
			if((@GetMap(mtd.Id)!=null))
			{
				if(mtd.TileHashCount()>1)
				{
					SetAnyData("dmo64_hash_"+mtd.Id,mtd.TileHashs);
					ckH=true;
					
					if(mtd.TileCount()>1)
					{
						SetAnyData("dmo64_obj_"+mtd.Id,mtd.Tiles);
						ckT=true;
					}
				}
			}
			
			if(!(ckH&&ckT)&&IsAnyData("dmo64_obj_"+mtd.Id))
			EraseAnyData("dmo64_obj_"+mtd.Id);
			if(!ckH&&IsAnyData("dmo64_hash_"+mtd.Id))
			EraseAnyData("dmo64_hash_"+mtd.Id);
			
			if((@GetMap(mtd.Id)!=null))
			continue;
		}
		MapTileDatabase.removeAt(i--);
	}
}

void qmap_load_all()
{
	return;
}

void _MapFinish(Map&map,bool deleted)
{
	uint ind=findMTDi(map.Id);
	if(ind==uint(-1))
	return;
	
	if(IsAnyData("dmo64_obj_"+map.Id))
	EraseAnyData("dmo64_obj_"+map.Id);
	if(IsAnyData("dmo64_hash_"+map.Id))
	EraseAnyData("dmo64_hash_"+map.Id);
	
	MapTileDatabase.removeAt(ind);
	
	@map.ScriptDescriptor=null;
}

bool SetTile(Map&map,uint hash,uint16 hexX,uint16 hexY,uint8 layer)
{
	MapTileData@mtd=findMTD(map.Id);
	if(mtd is null)
	return false;
	
	return mtd.Set(mtd.AddOneHash(int(hash)),0,DMO64_makeHex(hexX,hexY,layer),true);
}

bool SetTile(Map&map,uint hash,uint hash2,uint16 hexX,uint16 hexY,uint8 layer)
{
	MapTileData@mtd=findMTD(map.Id);
	if(mtd is null)
	return false;
	
	return mtd.Set(mtd.AddOneHash(int(hash)),hash2,DMO64_makeHex(hexX,hexY,layer),true);
}

uint16 AddOneHash(Map&map,uint hash)
{
	MapTileData@mtd=findMTD(map.Id);
	if(mtd is null)
	return 0;
	
	return mtd.AddOneHash(int(hash));
}

bool SetTiles(Map&map,int[]&data)
{
	MapTileData@mtd=findMTD(map.Id);
	if(mtd is null)
	return false;
	
	return mtd.Add(data,true);
}

uint GetTile(Map&map,uint16 hexX,uint16 hexY,uint8 layer)
{
	MapTileData@mtd=findMTD(map.Id);
	if(mtd is null)
	return 0;
	
	uint16 hs=DMO64_getHashNum(mtd.Tiles,DMO64_makeHex(hexX,hexY,layer));
	
	if(hs==0||mtd.TileHashs.length()<=hs)
	return 0;
	
	return uint(mtd.TileHashs[hs]);
}
