// PowerMagic
// прототипы смотреть в _mapgen.fos


void PasteTiles( Map& map, uint16 hexX, uint16 hexY, uint16 protoId ) // раскладывает тайлы
{
    if( hexY % 2 == 0 )
    {
        if( hexX % 2 == 0 )
        {
            map.AddItem( hexX, hexY, protoId, 1 );
        }
    }
}


// На реконструкции

/*bool MakeRoad(Map& map, uint8 roadType uint16 hexX, uint16 hexY, uint8 width uint8 high) //карта, метод раскладки тайлов, х у . длинна дороги
   {
   uint16[] allRoad;
   uint16 id = 0;

   switch(roadType)
   {
    case 0: //горизонтальная дорога
    {
      for(uint8 i = 0; i < high; i++)
      {
        for(uint8 j = 0; j < width; j++)

        {
          PasteTiles(map, hexX, hexY, MAPGEN_ROAD_0);
      }

        // if
    }
    break;
    }
      /*
      for (uint8 i = 0; i < lenght; i++)
      {

        PasteTiles(map, hexX, hexY,     MAPGEN_ROAD_0);
        PasteTiles(map, hexX+2, hexY,   MAPGEN_ROAD_1);
        PasteTiles(map, hexX+4, hexY,   MAPGEN_ROAD_2);
        //hexX += 4;
        hexY += 2;

      }

    break;
    }/

        case 1: //вертикальная дорога
    {
      /
      for (uint8 i = 0; i < lenght; i++)
      {

        PasteTiles(map, hexX, hexY,     MAPGEN_ROAD_8);
        PasteTiles(map, hexX, hexY+2,	MAPGEN_ROAD_9);
        PasteTiles(map, hexX, hexY+4,   MAPGEN_ROAD_10);
        //hexX += 4;
        hexX += 2;

      }

    break;
    }

    break;
    }
   }
   return true;
   }
 */

void AddLightEnv( Map& map, uint16 hexX, uint16 hexY )
{
    map.AddItem( hexX, hexY, MAPGEN_LIGHT, 1 );
}

/*PasteLight(Map& map)
   {
   uint16 hexX = 0;
   uint16 hexY = 0;
   for(uint8 i = 0; i < 10; i++)
   {
    hexX = Random(30,69);
    hexY = Random(30,69);
    map.AddItem(hexX, hexY, MAPGEN_LIGHT, 1);
    Item @ item = map.GetItem(hexX, hexY, MAPGEN_LIGHT);
    item.Val3 = Random(1,5);
   }
   }*/
bool MakeRoadCross( Map& map, uint8 roadType, uint16 hexX, uint16 hexY ) // , uint8 lenght, uint8 heigh)
{
    switch( roadType )
    {
    case 0:
    {
        PasteTiles( map, hexX, hexY,         MAPGEN_ROAD_3 );
        PasteTiles( map, hexX + 2, hexY,       MAPGEN_ROAD_4 );
        PasteTiles( map, hexX + 4, hexY,       MAPGEN_ROAD_5 );
        PasteTiles( map, hexX, hexY + 2,       MAPGEN_ROAD_4 );
        PasteTiles( map, hexX + 2, hexY + 2,     MAPGEN_ROAD_4 );
        PasteTiles( map, hexX + 4, hexY + 2,     MAPGEN_ROAD_4 );
        PasteTiles( map, hexX, hexY + 4,       MAPGEN_ROAD_6 );
        PasteTiles( map, hexX + 2, hexY + 4,     MAPGEN_ROAD_4 );
        PasteTiles( map, hexX + 4, hexY + 4,     MAPGEN_ROAD_7 );
        break;
    }
    }
    return true;
}

bool MakeHouseWall( Map& map, uint8 width, uint8 heigh, uint16 hexX, uint16 hexY )
{
    Item @ item = map.AddItem( hexX, hexY, MAPGEN_WALL_FRT_8, 1 );   // правый верхний угол
    map.SetData( MAP_DATA_HOUSE_ROOF_HEX, item.Id );
    map.AddItem( hexX + width, hexY, MAPGEN_WALL_FRT_4, 1 );         // левый верхний
    map.AddItem( hexX + width, hexY + heigh, MAPGEN_WALL_FRT_5, 1 ); // левый нижний
    @item = map.AddItem( hexX, hexY + heigh, MAPGEN_WALL_FRT_3, 1 ); // правый нижний
    map.SetData( MAP_DATA_HOUSE_ROOF_HEX - 1, item.Id );
    for( uint8 i = 0; i < heigh; i++ )
    {
        map.AddItem( hexX, hexY + i, MAPGEN_WALL_FRT_9, 1 );
        map.AddItem( hexX + width, hexY + i, MAPGEN_WALL_FRT_2, 1 );
    }
    for( uint8 i = 0; i < width; i++ ) // рисуем горизонтальные стены
    {
        if( ( hexX + i ) % 2 == 0 )    // определяем тип стены - длинные или короткие
        {
            map.AddItem( hexX + i, hexY, MAPGEN_WALL_FRT_6, 1 );
            map.AddItem( hexX + i, hexY + heigh, MAPGEN_WALL_FRT_0, 1 );
        }
        {
            if( ( hexY + i ) % 2 == 0 )
            {
                map.AddItem( hexX + i, hexY, MAPGEN_WALL_FRT_7, 1 );
                map.AddItem( hexX + i, hexY + heigh, MAPGEN_WALL_FRT_1, 1 );
            }
        }
    }
    return true;
}
/*
   void MakeCorners(Map& map, uint8 width, uint8 heigh, uint8 hexX, uint8 hexY)
   {
   Item @ item = map.AddItem(hexX, hexY, MAPGEN_WALL_FRT_8, 1); //правый верхний угол
   map.SetData(MAP_DATA_HOUSE_ROOF_HEX, item.Id);
   map.AddItem(hexX + width, hexY, MAPGEN_WALL_FRT_4, 1); //левый верхний
   map.AddItem(hexX + width, hexY + heigh, MAPGEN_WALL_FRT_5, 1); //левый нижний
   Item @ item = map.AddItem(hexX, hexY + heigh, MAPGEN_WALL_FRT_3, 1); //правый нижний
   map.SetData(MAP_DATA_HOUSE_ROOF_HEX-1, item.Id);
   }*/
