

bool LocIsModoc(uint locPid)
{
	return(locPid<=(1253));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(32)||locPid==(1216)||locPid==(43)||locPid==96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(42));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

shared interface Project
{
	string@get_Name();
	void Build();
	void SetAssociation(string@ex,string@className,string@classModule);
}

shared interface FileObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	void FormatStringData(string&nameData,string&data);
	FileObject@get_Pattern(string&name)const;
	FileObject@get_Copy(string&name); 
	
	void set_GlobalData(string@name,string@value);          
	
	string@get_GlobalData(string@name);            
	
}

shared class TimeLog
{
	uint tick;
	
	TimeLog()
	{
		refresh();
	}
	
	void refresh()
	{
		tick=GetTick();
	}
	
	bool check(uint count)
	{
		return(GetTick()-tick>=count);
	}
	
	uint get()
	{
		uint old=tick;
		refresh();
		return(tick-old);
	}
	
	void Log(string&in message)
	{
		::ClearLog(message+" ["+(GetTick()-tick)+"ms]");
	}
}

shared interface AnyDataObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	uint[]@get_SaveData();
	void InitData(uint[]&data);
}

shared interface ManagerObject
{
	FileObject@get_ProtoObject(string@name);
	void ParseProtoTypes(const string&ex,const FileObject&pattern,const string@search);
	FileObject@ParseProtoTypeFile(string&name,const string&ex,const FileObject&pattern,const string@search);
	FileObject@AddPrototype(FileObject@proto);
	FileObject@StringToFileObject(string&name,string&txt,const FileObject&pattern);
}

shared interface ValueAPI{}
shared class SettingsAPI
{
	string Name;
	bool IsDebug;
} 

shared class GlobalData
{
	uint Hash;
	string Value;
	
	GlobalData(string@name)
	{
		Hash=GetStrHash(name);
		Value="";
	} 
	
	void SaveData(uint[]&outArray,uint&position)
	{
		uint len=Value.length();
		
		outArray.resize(position+2+len/2);
		
		outArray[position++]=Hash;
		outArray[position++]=len;
		
		for(uint i=0;i<len;i++)
		{
			outArray[position]|=Value[i++]<<24;
			outArray[position]|=Value[i++]<<16;
			outArray[position]|=Value[i++]<<8;
			outArray[position++]|=Value[i];
		}
	} 
	
	void LoadData(uint[]&in outArray,uint&position)
	{
		Hash=outArray[position++];
		uint len=outArray[position++];
		Value.resize(len);
		
		for(uint i=0;i<len;i++)
		{
			Value[i++]=(outArray[position]>>24)&0xFF;
			Value[i++]=(outArray[position]>>16)&0xFF;
			Value[i++]=(outArray[position]>>8)&0xFF;
			Value[i]=outArray[position++]&0xFF;
			
		}
	}
} 

shared class Hexagonal
{
	Hexagonal(){Reset();}
	Hexagonal(const uint16&in x,const uint16&in y){Set(x,y);}
	Hexagonal(const Hexagonal&master){Set(master);}
	
	Hexagonal(const Critter&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Item&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Scenery&master){Set(master.HexX,master.HexY);}
	
	bool Entire(Map&map,int entNum){return map.GetEntireCoords(entNum,0,X,Y);}
	bool IsPassed(Map&map){return ValidPosition(map)&&map.IsHexPassed(X,Y);}
	bool IsPassed(Map&map,Hexagonal&begin,Hexagonal&end){return ValidPosition(map,begin,end)&&map.IsHexPassed(X,Y);}
	
	bool ValidPosition(Map&map)
	{
		Hexagonal end,begin;
		if(end.Entire(map,0)&&begin.Entire(map,255))
		return ValidPosition(map,begin,end);
		return false;
	}
	
	bool ValidPosition(Map&map,Hexagonal&begin,Hexagonal&end)
	{
		return(X>=begin.X&&Y>=begin.Y
		&&X<=end.X&&Y<=end.Y);
	}
	
	bool Transit(Critter&critter,Map&map){return Transit(critter,map,critter.Dir);}
	bool Transit(Critter&critter,Map&map,uint8 direction)
	{
		if(!IsPassed(map))return false;
		return critter.TransitToMap(map.Id,X,Y,direction);
	}
	
	bool Transit(Critter&critter,uint mapId){return Transit(critter,mapId,critter.Dir);}
	bool Transit(Critter&critter,uint mapId,uint8 direction)
	{
		if(mapId==0)return false;
		Map@map=GetMap(mapId);
		if(@map is null)return false;
		return Transit(critter,map,direction);
	} 
	
	void Set(const uint16&in x,const uint16&in y){X=x;Y=y;}
	void Set(const Hexagonal&in other){Set(other.X,other.Y);}
	void Reset(){X=Y=0;}
	uint Distantion(Hexagonal&other){return GetDistantion(X,Y,other.X,other.Y);}
	
	uint16 X;
	uint16 Y;
	
	bool opEquals(const Hexagonal&in other){return(other.X==X&&other.Y==Y);}
	Hexagonal&opAssign(const Hexagonal&in other)
	{
		Set(other);
		return this;
	}
	
	const uint get_UID(const uint w)const{return X+Y*w;}
	string get_Debug(){return"X:"+X+"Y:"+Y;}
	void Log(string&str){::Log(str+":"+Debug);}
}    

shared class MapHash
{
	MapHash(const uint16&in protoId)
	{
		ProtoId=protoId;
		@Min=null;
		@Max=null;
	}
	
	MapHash&opAssign(Map&map)
	{
		@Min=Hexagonal(0,0);
		@Max=Hexagonal(0,0);
		map.GetEntireCoords(0,0,Max.X,Max.Y);
		map.GetEntireCoords((255),0,Min.X,Min.Y);
		return this;
	}
	
	uint16 ProtoId;
	Hexagonal@Min;
	Hexagonal@Max;
} 

shared class Line
{
	Line(Hexagonal&a,Hexagonal&b){@A=a;@B=b;}
	
	uint get_Length()
	{
		return B.Distantion(A);
	}
	
	uint get_Point(Hexagonal&point)
	{
		return B.Distantion(point);
	}
	
	float get_Module(Hexagonal&point)
	{
		return Point[point]/Length;
	}
	
	Hexagonal@get_opIndex(const uint&in size)
	{
		
		const float mod=float(size/Length);
		return@Hexagonal(A.X+(B.X-A.X)*mod,A.Y+(B.Y-A.Y)*mod);
	} 
	
	Line(Map&map,uint16 grid,MapHash@hash)
	{
		if(@hash is null)
		{
			Hexagonal min,max;
			map.GetTransferParams(min.X,min.Y,max.X,max.Y,grid);
			
			@A=@Hexagonal(min.X,min.Y);
			@B=@Hexagonal(max.X,max.Y);
		}
		else
		{
			if(@hash.Min is null||@hash.Max is null)
			map.GetTransferParams(hash.Min.X,hash.Min.Y,hash.Max.X,hash.Max.Y,grid);
			
			@A=@Hexagonal(hash.Min.X,hash.Min.Y);
			@B=@Hexagonal(hash.Max.X,hash.Max.Y);
		}
	} 
	
	string get_Debug(){return"A<"+A.Debug+">B<"+B.Debug+">";}
	void Log(string&str){::Log(str+":"+Debug);}
	
	Hexagonal@A;
	Hexagonal@B;
}  

import MapHash@GetMapHash(const uint16&in pid)from"world";
import uint CreateLocation(Hexagonal&coordinate,uint16 locationPid)from"world"; 

import ManagerObject@get_objectManager()from"world"; 

import EventTree@get_EventRoot()from"world"; 

import Project@CreateProject(string@name,string@path)from"main";
import Project@get_Project(string@name)from"main";                                                                                                                                                               

const uint16[]npc_group_raiders={(337),(338),(339),(340),(341)};
const uint16[]npc_group_mirelurk={(330)};
const uint16[]npc_group_radscorp={(319),(320)};
const uint16[]npc_group_gecko={(316),(317),(327)};
const uint16[]npc_group_rats={(310),(313),(314),(315)}

void AI_TrySayCombatText(Critter&npc,int textType)
{
	if(not npc.IsLife())
	return;
	uint ai=npc.Stat[(105)];
	if(AIData_[(((ai)<(282)?(ai):0)*22+16)]<Random(1,500))
	return;
	
	uint start=0,end=0;
	if(textType>=(0)&&textType<=(3))
	{
		start=AIGeneralMsg_[AIData_[(((ai)<(282)?(ai):0)*22+17)]*8+textType*2];
		end=AIGeneralMsg_[AIData_[(((ai)<(282)?(ai):0)*22+17)]*8+textType*2+1];
	}
	if(textType>=(10)&&textType<=(17))
	{
		textType-=10;
		start=AIBodyMsg_[AIData_[(((ai)<(282)?(ai):0)*22+18)]*16+textType*2];
		end=AIBodyMsg_[AIData_[(((ai)<(282)?(ai):0)*22+18)]*16+textType*2+1];
	}
	else
	return;
	if(start<=end)
	npc.SayMsg((2),(5),Random(start,end)*10);
}

const int[]AIData_=
{
	
	10,15,3,1,1,(1),(3),(0),(1),(0),(4),(1),(2),(0),10,5,0,45,27,0,0,0,
	90,20,5,30,1,(0),(1),(0),(0),(0),(2),(2),0,(0),30,3,25,6,7,0,0,0,
	10,12,15,40,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),3,20,20,6,7,0,0,0,
	40,15,15,35,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),100,15,80,6,7,0,0,0,
	20,15,14,50,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),20,4,75,6,7,0,0,0,
	100,1,0,0,0,(0),(0),(6),(0),(0),(0),0,0,(0),10,10,0,45,27,0,0,0,
	10,15,0,0,0,(0),(0),(1),(0),(0),(0),(1),(2),(0),25,1000000,0,45,27,0,0,0,
	45,15,0,0,0,(0),(0),(1),(0),(0),(0),(2),0,(0),1000000,40,0,45,27,0,0,0,
	60,15,0,0,0,(0),(0),(1),(0),(0),(0),(2),0,(0),10000,10,0,45,27,0,0,0,
	40,17,0,0,0,(0),(0),(1),(0),(0),(0),(1),(2),(0),1000000,30,0,45,27,0,0,0,
	70,20,0,10,1,(0),(4),(3),(0),(0),(0),(1),(2),(0),20,15,0,45,27,0,0,0,
	20,10,30,20,1,(0),(0),(0),(0),(0),(0),(1),0,(0),10000,30,35,11,10,0,0,0,
	80,20,4,20,1,(4),(4),(4),(3),(0),(0),(1),(2),(5),5,5,30,3,2,0,0,0,
	80,10,10,40,1,(0),(2),(0),(0),(0),(0),(1),(2),(4),1000,15,15,2,2,0,0,0,
	30,10,12,34,1,(0),(4),(0),(0),(0),(0),(1),(2),(3),10000,30,10,0,0,0,0,0,
	0,8,20,10,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,35,45,27,0,0,0,
	65,10,10,25,1,(4),(2),(4),(1),(0),(2),(1),(2),(4),10,8,23,2,2,0,0,0,
	33,8,8,30,1,(2),(4),(0),(0),(0),(0),(1),(2),(5),5000,20,25,1,1,0,0,0,
	90,15,1,25,1,(0),(0),(0),(0),(0),(0),(2),0,(0),40,8,16,5,2,0,0,0,
	20,10,10,28,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),3,1500,30,1,1,0,0,0,
	
	70,12,8,24,1,(0),(4),(0),(0),(0),(0),(1),(2),(4),80,30,20,0,0,0,0,0,
	80,18,0,0,0,(0),(0),(1),(0),(0),(0),(2),0,(0),600,200,0,45,27,0,0,0,
	95,19,1,15,1,(4),(4),(4),(0),(0),(2),0,0,(5),10,3,25,5,2,0,0,0,
	100,25,0,0,1,(0),(0),(0),(0),(0),(0),0,0,(0),10000,3,18,4,4,0,0,0,
	60,12,10,30,1,(0),(4),(0),(3),(0),(0),(1),(2),(5),75,20,25,2,2,0,0,0,
	95,7,0,0,1,(0),(4),(0),(3),(1),(1),(1),(2),(6),5,100,20,45,27,0,0,0,
	50,10,0,0,0,(0),(0),(1),(5),(0),(0),(1),(2),(0),20,20,0,45,27,(284),(81),(103),
	95,10,0,0,0,(0),(0),(1),(0),(0),(0),(1),(2),(0),20,20,0,45,27,0,0,0,
	50,10,0,10,0,(0),(4),(1),(0),(0),(1),(1),(2),(6),20,20,10,44,4,0,0,0,
	60,10,5,30,1,(0),(4),(3),(0),(0),(1),(1),(2),(6),20,20,0,45,27,0,0,0,
	50,10,10,30,1,(0),(2),(0),(0),(0),(0),(2),0,(0),20,20,15,9,6,0,0,0,
	100,13,0,0,1,(0),(4),(0),(0),(0),(0),(2),0,(0),20,20,20,9,6,0,0,0,
	90,10,0,0,1,(2),(4),(0),(0),(0),(2),(2),0,(6),10,10,25,9,6,0,0,0,
	20,10,30,30,1,(0),(0),(0),(0),(0),(0),(2),0,(0),20,20,25,0,0,0,0,0,
	40,10,10,20,1,(0),(4),(0),(0),(0),(0),(1),(2),(6),20,20,0,45,27,0,0,0,
	50,10,10,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),20,20,20,10,8,0,0,0,
	80,10,10,20,1,(1),(4),(4),(0),(0),(3),(1),(2),(0),20,4,25,10,8,0,0,0,
	40,10,10,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),20,20,10,10,8,0,0,0,
	80,15,8,10,1,(1),(4),(2),(5),(0),(1),(1),(2),(6),33,2,15,4,4,0,0,0,
	20,10,0,25,0,(0),(0),(0),(5),(0),(0),(1),(2),(0),20,2,0,45,27,(284),(81),(103),
	
	80,10,3,10,1,(0),(0),(0),(0),(0),(0),0,0,(6),2,200000,10,43,26,0,0,0,
	20,8,20,10,1,(0),(4),(0),(0),(0),(0),(1),(2),(0),20,20,20,1,1,0,0,0,
	2,5,30,10,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),20,20,18,2,2,0,0,0,
	35,5,15,10,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),20,20000,15,1,1,0,0,0,
	35,10,15,40,1,(0),(2),(0),(0),(0),(0),(1),(2),(4),20,15,15,2,2,0,0,0,
	35,7,15,40,1,(0),(0),(0),(1),(0),(0),(1),(2),(4),20,15,15,0,0,0,0,0,
	0,3,15,40,1,(2),(2),(2),(1),(0),(2),(1),(2),(3),20,15,15,0,0,0,0,0,
	95,15,1,20,1,(0),(4),(0),(0),(1),(0),(1),(2),(0),20,15,15,31,16,0,0,0,
	87,10,0,0,0,(0),(0),(1),(0),(0),(0),(1),(2),(0),20,15,0,45,27,0,0,0,
	35,5,15,10,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),20,20000,15,0,0,0,0,0,
	75,12,0,10,0,(4),(3),(3),(4),(0),(4),(1),(2),(0),20,200,0,45,27,(81),0,0,
	95,15,7,10,1,(0),(4),(0),(0),(0),(0),(1),(2),(0),20,1,15,10,8,0,0,0,
	45,12,10,10,1,(4),(3),(3),(4),(0),(4),(1),(2),(0),20,200,0,11,10,(81),0,0,
	45,12,10,10,1,(4),(3),(3),(4),(5),(4),(1),(2),(6),10,5,25,2,2,(81),0,0,
	45,12,10,10,1,(4),(2),(4),(3),(4),(2),(1),(2),(4),10,5,25,2,2,(81),0,0,
	45,12,10,10,1,(3),(0),(4),(3),(3),(5),(1),(2),(4),10,5,25,2,2,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(2),(0),(5),(1),(2),(2),10,5,25,2,2,(81),0,0,
	1,12,10,10,1,(4),(4),(4),(3),(0),(4),(1),(2),(4),10,5,25,2,2,(81),0,0,
	45,12,10,10,1,(4),(4),(0),(1),(5),(2),(1),(2),(2),10,5,25,38,23,(81),0,0,
	45,12,10,10,1,(4),(3),(0),(3),(4),(2),(1),(2),(2),10,10,25,38,23,(81),0,0,
	
	45,12,10,10,1,(4),(0),(0),(3),(3),(5),(1),(2),(2),10,10,25,38,23,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(3),(0),(5),(1),(2),(1),20,200,25,38,23,(81),0,0,
	45,12,10,10,1,(4),(4),(4),(1),(0),(5),(1),(2),(2),10,10,25,38,23,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(1),(5),(2),(1),(2),(6),10,5,15,42,25,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(3),(4),(2),(1),(2),(5),10,10,15,42,25,(81),0,0,
	45,12,10,10,1,(3),(0),(0),(3),(3),(4),(1),(2),(4),20,200,15,42,25,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(2),(0),(5),(1),(2),(3),20,200,15,42,25,(81),0,0,
	30,12,10,10,1,(4),(0),(0),(3),(0),(2),(3),0,(5),5,10,20,42,25,(81),0,0,
	45,12,10,10,1,(2),(3),(4),(3),(5),(2),(1),(2),(6),10,5,15,39,24,(81),0,0,
	45,12,10,10,1,(4),(3),(4),(3),(4),(2),(1),(2),(5),10,10,15,39,24,(81),0,0,
	45,12,10,10,1,(4),(0),(4),(3),(3),(4),(1),(2),(4),10,10,15,39,24,(81),0,0,
	45,12,10,10,1,(2),(4),(4),(2),(0),(5),(1),(2),(4),10,10,15,39,24,(81),0,0,
	45,12,10,10,1,(4),(3),(4),(3),(0),(2),(1),(2),(5),10,10,15,39,24,(81),0,0,
	45,12,10,10,1,(1),(4),(5),(4),(5),(1),(1),(2),(6),10,5,35,33,17,(81),0,0,
	45,12,10,10,1,(2),(4),(5),(3),(4),(2),(1),(2),(5),10,5,35,33,17,(81),0,0,
	45,12,10,10,1,(4),(0),(5),(3),(3),(4),(1),(2),(5),10,5,35,33,17,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(2),(0),(5),(1),(2),(5),10,10,35,33,17,(81),0,0,
	75,12,10,10,1,(4),(1),(5),(3),(0),(1),(1),(2),(5),10,5,35,33,17,(81),0,0,
	45,12,10,10,1,(4),(3),(3),(4),(5),(4),(1),(2),(6),20,200,25,37,21,(81),0,0,
	45,12,10,10,1,(4),(3),(0),(3),(4),(2),(1),(2),(4),20,200,25,37,21,(81),0,0,
	
	45,12,10,10,1,(2),(0),(4),(2),(3),(4),(1),(2),(3),10,2,25,37,21,(81),0,0,
	45,12,10,10,1,(2),(2),(4),(2),(0),(4),(1),(2),(2),10,2,25,37,21,(81),0,0,
	50,12,10,10,1,(2),(2),(4),(2),(0),(4),(1),(2),(4),10,2,25,37,21,(81),0,0,
	45,12,10,10,1,(0),(4),(3),(0),(5),(1),(1),(2),(6),20,200,10,46,27,(81),0,0,
	45,12,10,10,1,(0),(4),(3),(0),(4),(1),(1),(2),(5),20,200,10,46,27,(81),0,0,
	45,12,10,10,1,(0),(0),(3),(0),(3),(4),(1),(2),(5),20,200,10,46,27,(81),0,0,
	45,12,10,10,1,(0),(2),(3),(0),(0),(2),(1),(2),(3),20,200,10,46,27,(81),0,0,
	80,12,0,10,1,(0),(0),(3),(0),(0),(4),0,0,(5),20,200,10,46,27,(81),0,0,
	45,12,10,10,1,(4),(3),(3),(4),(5),(4),(1),(2),(5),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(4),(3),(0),(3),(4),(2),(1),(2),(4),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(3),(0),(0),(3),(3),(4),(1),(2),(3),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(2),(0),(5),(1),(2),(2),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(4),(3),(3),(4),(0),(4),(1),(2),(3),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(0),(4),(3),(3),(5),(1),(1),(2),(6),20,200,25,36,20,(81),0,0,
	45,12,10,10,1,(0),(4),(3),(3),(4),(1),(1),(2),(5),20,200,25,36,20,(81),0,0,
	45,12,10,10,1,(3),(0),(0),(3),(3),(4),(1),(2),(4),20,200,25,36,20,(81),0,0,
	45,12,10,10,1,(0),(4),(3),(2),(0),(1),(1),(2),(5),20,200,25,36,20,(81),0,0,
	45,12,10,10,1,(0),(4),(3),(3),(0),(1),(1),(2),(5),20,200,25,36,20,(81),0,0,
	45,12,10,10,1,(4),(3),(3),(4),(5),(4),(1),(2),(6),20,200,20,1,1,(81),0,0,
	45,12,10,10,1,(4),(3),(0),(3),(4),(2),(1),(2),(5),20,200,20,1,1,(81),0,0,
	
	45,12,10,10,1,(3),(0),(0),(3),(3),(4),(1),(2),(4),20,200,20,1,1,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(2),(0),(5),(1),(2),(2),20,200,20,1,1,(81),0,0,
	45,12,25,10,1,(5),(2),(0),(2),(0),(2),(1),(2),(4),20,200,20,1,1,(81),0,0,
	45,12,10,10,1,(4),(3),(3),(4),(5),(4),(1),(2),(6),20,200,15,1,1,(81),0,0,
	45,12,10,10,1,(4),(3),(0),(3),(4),(2),(1),(2),(5),20,200,15,1,1,(81),0,0,
	45,12,10,10,1,(3),(0),(0),(3),(3),(4),(1),(2),(4),20,200,15,1,1,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(2),(0),(5),(1),(2),(3),20,200,15,1,1,(81),0,0,
	45,12,10,10,1,(3),(0),(4),(2),(0),(4),(1),(2),(4),20,200,15,1,1,(81),0,0,
	45,12,10,10,1,(4),(3),(3),(4),(5),(4),(1),(2),(6),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(4),(3),(0),(3),(4),(2),(1),(2),(5),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(3),(0),(0),(3),(3),(4),(1),(2),(4),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(2),(0),(5),(1),(2),(2),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(4),(1),(3),(0),(0),(1),0,0,(4),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(1),(3),(0),(0),(5),(2),(1),(2),(6),10,10,15,35,19,0,0,0,
	45,12,10,10,1,(2),(3),(0),(0),(4),(2),(1),(2),(5),10,10,15,35,19,(81),0,0,
	45,12,10,10,1,(3),(0),(4),(0),(3),(4),(1),(2),(5),10,5,15,35,19,(81),0,0,
	45,12,10,10,1,(1),(2),(3),(0),(0),(3),(1),(2),(1),10,10,15,35,19,(81),0,0,
	50,12,10,10,1,(1),(4),(3),(0),(0),(3),0,0,(0),10,10,15,35,19,(81),0,0,
	45,12,10,10,1,(4),(3),(3),(4),(5),(4),(1),(2),(5),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(4),(3),(0),(3),(4),(2),(1),(2),(4),20,200,0,45,27,(81),0,0,
	
	45,12,10,10,1,(3),(0),(0),(3),(3),(4),(1),(2),(3),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(2),(4),(0),(2),(0),(5),(1),(2),(2),20,200,0,45,27,(81),0,0,
	45,12,10,10,1,(4),(3),(3),(0),(0),(4),(1),(2),(3),20,200,0,45,27,(81),0,0,
	1,3,15,80,0,(4),(2),(3),(4),(0),(4),(1),(2),(1),20,200,0,45,27,(81),0,0,
	100,12,3,10,1,(4),(3),(4),(1),(0),(2),(1),(2),(0),5,4,35,32,2,(81),0,0,
	100,12,1,0,1,(4),(3),(3),(4),(0),(4),0,0,(0),2,20,0,2,2,(81),0,0,
	90,20,1,10,1,(0),(0),(0),(0),(0),(0),0,0,(0),3000,30000,25,2,2,0,0,0,
	90,20,1,10,1,(4),(4),(4),(3),(0),(2),0,0,(5),5,4,25,5,2,0,0,0,
	90,20,1,10,1,(4),(4),(0),(0),(0),(0),0,0,(0),3000,5,30,14,22,0,0,0,
	90,20,1,10,1,(4),(4),(4),(0),(0),(2),0,0,(0),3000,5,25,31,16,0,0,0,
	100,20,1,10,1,(0),(0),(1),(0),(0),(0),0,0,(0),300,300,0,45,27,0,0,0,
	90,20,1,10,1,(0),(2),(3),(0),(0),(0),0,0,(0),3000,30000,0,45,27,0,0,0,
	90,20,1,10,0,(0),(0),(1),(0),(0),(0),0,0,(0),3000,30000,0,45,27,0,0,0,
	90,20,1,10,0,(0),(4),(3),(0),(0),(1),0,0,(6),5,30000,0,45,27,0,0,0,
	90,10,1,10,1,(0),(0),(0),(0),(0),(0),0,0,(0),25,25,25,5,2,0,0,0,
	90,20,1,10,1,(4),(4),(4),(0),(0),(5),0,0,(0),3,3,25,13,11,0,0,0,
	90,20,1,10,1,(4),(3),(4),(0),(0),(2),0,0,(0),3,3,25,12,11,0,0,0,
	90,20,1,10,1,(0),(2),(0),(0),(0),(0),0,0,(0),3,3,0,45,27,0,0,0,
	10,10,10,10,1,(0),(4),(0),(0),(1),(1),0,0,(6),10,5000,30,17,12,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(5),(0),0,0,(0),10,5000,30,18,12,0,0,0,
	
	10,10,10,10,1,(0),(4),(0),(0),(1),(0),0,0,(3),10,5000,15,1,1,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,50,26,15,0,0,0,
	10,10,0,0,1,(4),(4),(0),(0),(1),(2),0,0,(6),5,5,15,45,27,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,6,7,0,0,0,
	10,10,10,10,0,(0),(0),(4),(0),(1),(0),0,0,(0),10,5000,15,45,27,0,0,0,
	10,10,0,0,1,(0),(3),(0),(0),(1),(0),(2),0,(6),10,5000,30,41,6,0,0,0,
	10,10,0,0,0,(0),(4),(1),(0),(1),(0),0,0,(6),4,5000,30,40,27,0,0,0,
	10,10,10,10,1,(1),(4),(0),(0),(1),(0),0,0,(5),10,5000,15,2,2,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,11,10,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,45,27,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,25,13,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,24,13,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,20,14,0,0,0,
	10,10,35,10,1,(0),(4),(0),(0),(1),(0),0,0,(5),10,5000,15,22,12,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,19,14,0,0,0,
	10,10,10,10,1,(0),(2),(0),(0),(1),(0),(2),(3),(5),10,2,15,21,14,0,0,0,
	10,12,10,0,1,(4),(4),(4),(3),(1),(5),(2),0,(5),10,2,25,22,12,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,23,13,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,23,13,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,23,13,0,0,0,
	
	10,10,10,10,1,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,15,23,13,0,0,0,
	10,10,10,10,1,(3),(2),(0),(0),(1),(0),0,0,(5),5,10,15,2,14,0,0,0,
	10,10,10,10,1,(1),(4),(4),(4),(1),(1),(2),0,(6),20,6,15,8,9,(87),0,0,
	100,50,1,50,1,(1),(4),(0),(2),(1),(0),0,0,(6),10,5000,30,8,9,0,0,0,
	10,10,10,10,0,(0),(0),(3),(0),(4),(1),0,0,(6),10,5000,15,45,27,0,0,0,
	10,10,10,10,0,(0),(4),(3),(0),(5),(1),0,0,(6),10,5000,15,45,27,0,0,0,
	10,10,10,10,0,(0),(4),(3),(0),(0),(4),0,0,(4),10,5000,15,45,27,0,0,0,
	10,10,10,10,0,(0),(0),(3),(0),(0),(1),0,0,(5),10,5000,15,45,27,0,0,0,
	10,10,10,10,0,(0),(0),(0),(0),(3),(0),0,0,(0),10,5000,15,45,27,0,0,0,
	10,10,10,10,0,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,0,45,27,0,0,0,
	10,10,10,10,0,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,0,45,27,0,0,0,
	10,10,10,10,0,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,0,45,27,0,0,0,
	10,10,10,10,0,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,0,45,27,0,0,0,
	10,10,10,10,0,(0),(0),(0),(0),(1),(0),0,0,(0),10,5000,0,45,27,0,0,0,
	100,15,0,0,1,(0),(4),(0),(0),(1),(3),(2),(3),(6),1,5000,25,9,6,0,0,0,
	10,10,10,10,1,(2),(4),(4),(3),(1),(2),0,0,(5),2,3,25,5,2,(40),0,0,
	10,10,10,10,1,(0),(4),(0),(0),(0),(0),0,0,(0),10,5000,0,45,27,0,0,0,
	100,15,0,0,1,(0),(2),(0),(0),(1),(0),0,0,(6),10,5000,25,44,4,0,0,0,
	10,10,10,80,0,(0),(0),(1),(0),(1),(0),0,0,(1),10,5000,15,45,27,0,0,0,
	10,10,100,90,1,(0),(0),(0),(0),(0),(0),0,0,(1),10,5000,15,0,0,0,0,0,
	
	10,10,10,10,1,(0),(0),(0),(0),(1),(3),0,0,(6),10,5000,15,0,0,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(0),(0),0,0,(0),10,5000,15,2,2,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(0),(0),0,0,(0),10,5000,15,2,2,0,0,0,
	100,20,0,0,1,(1),(4),(0),(0),(1),(2),0,0,(6),10,2,25,4,4,0,0,0,
	10,10,10,10,1,(0),(0),(0),(0),(0),(0),0,0,(1),10,5000,15,6,7,0,0,0,
	100,20,0,0,1,(1),(3),(0),(4),(1),(2),(2),0,(6),10,2,25,6,7,0,0,0,
	10,10,10,10,0,(0),(0),(1),(0),(0),(0),0,0,(0),10,5000,0,45,27,0,0,0,
	10,15,3,1,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10,5,0,45,27,0,0,0,
	80,22,0,1,1,(0),(0),(0),(0),(0),(0),0,0,(0),30,3,25,50,31,0,0,0,
	10,12,12,35,1,(0),(0),(0),(0),(0),(0),(3),(2),(0),3,6,20,51,32,0,0,0,
	5,15,12,30,1,(0),(0),(0),(0),(0),(0),(1),0,(0),10000,5,0,45,27,0,0,0,
	20,15,5,1,1,(0),(0),(0),(0),(0),(0),(3),0,(0),20,4,25,0,0,0,0,0,
	1,10,15,80,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),100,100,20,55,36,0,0,0,
	10,15,10,15,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),25,8,20,47,28,0,0,0,
	40,20,1,20,1,(0),(0),(0),(0),(0),(0),(2),0,(0),10,4,25,48,29,0,0,0,
	60,12,4,10,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,10,0,45,27,0,0,0,
	40,12,10,30,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),1000000,30,20,81,62,0,0,0,
	60,12,3,15,1,(0),(0),(0),(0),(0),(0),(3),(2),(0),25,15,20,82,63,0,0,0,
	70,15,8,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,25,109,90,0,0,0,
	80,6,1,2,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,3,108,89,0,0,0,
	
	80,10,4,5,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,0,45,27,0,0,0,
	90,10,1,8,1,(0),(0),(0),(0),(0),(0),(1),0,(0),10000,30,0,45,27,0,0,0,
	70,10,6,20,1,(0),(0),(0),(0),(0),(0),(2),0,(0),10000,30,25,49,30,0,0,0,
	75,10,10,20,1,(0),(0),(0),(0),(0),(0),(3),(2),(0),15,25,23,57,38,0,0,0,
	33,10,8,30,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),50,20,25,58,39,0,0,0,
	55,12,8,20,1,(0),(0),(0),(0),(0),(0),(3),(2),(0),40,30,10,59,40,0,0,0,
	60,15,4,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),30,15,30,60,41,0,0,0,
	80,12,6,14,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),80,30,20,112,93,0,0,0,
	70,18,8,17,1,(0),(0),(0),(0),(0),(0),(3),(2),(0),60,20,25,112,93,0,0,0,
	78,10,3,30,1,(0),(0),(0),(0),(0),(0),0,0,(0),20,10,20,62,43,0,0,0,
	20,9,12,40,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,18,63,44,0,0,0,
	60,12,16,30,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),75,20,25,64,45,0,0,0,
	40,14,12,30,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10,15,20,65,46,0,0,0,
	95,12,10,5,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),100,8,30,66,47,0,0,0,
	80,10,5,15,1,(0),(0),(0),(0),(0),(0),(2),0,(0),10000,30,15,67,48,0,0,0,
	75,10,15,18,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,20,68,49,0,0,0,
	90,12,2,25,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),12,8,30,69,50,0,0,0,
	40,8,20,45,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),80,18,15,70,51,0,0,0,
	50,10,5,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),40,12,25,71,52,0,0,0,
	65,14,5,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,10,72,53,0,0,0,
	
	80,12,10,15,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),18,8,20,73,54,0,0,0,
	60,12,20,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,20,74,55,0,0,0,
	94,10,2,15,1,(0),(0),(0),(0),(0),(0),0,0,(0),10000,30,30,75,56,0,0,0,
	80,14,1,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,15,76,57,0,0,0,
	80,12,2,20,1,(0),(0),(0),(0),(0),(0),(2),0,(0),8,4,30,77,58,0,0,0,
	80,12,25,25,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),9,1,25,78,59,0,0,0,
	50,10,20,40,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10,10,25,79,60,0,0,0,
	20,7,18,50,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,20,80,61,0,0,0,
	40,10,12,30,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),1000000,100,15,81,62,0,0,0,
	60,12,5,15,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),1000000,1000,10,53,34,0,0,0,
	60,12,10,10,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),4,4,100,124,105,0,0,0,
	60,12,5,15,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),1000000,1000,30,53,34,0,0,0,
	60,12,5,15,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),1000000,1000,30,53,34,0,0,0,
	40,14,5,10,1,(0),(0),(0),(0),(0),(0),(3),(2),(0),10,4,25,82,63,0,0,0,
	50,14,5,25,1,(0),(0),(0),(0),(0),(0),(2),0,(0),10,4,30,54,35,0,0,0,
	90,14,1,30,1,(0),(0),(0),(0),(0),(0),0,0,(0),10,4,30,84,65,0,0,0,
	90,20,1,10,1,(0),(0),(0),(0),(0),(0),0,0,(0),6,2,20,85,66,0,0,0,
	30,10,20,5,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,30,86,67,0,0,0,
	30,10,8,10,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,15,87,68,0,0,0,
	60,10,16,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),75,20,20,88,69,0,0,0,
	
	50,7,13,35,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),200,50,15,89,70,0,0,0,
	70,6,1,20,1,(0),(0),(0),(0),(0),(0),0,0,(0),10000,30,0,45,27,0,0,0,
	50,10,8,45,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),1000,30,18,90,71,0,0,0,
	70,15,3,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,20,91,72,0,0,0,
	70,10,1,20,1,(0),(0),(0),(0),(0),(0),(3),(2),(0),10000,30,20,92,73,0,0,0,
	85,10,8,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,35,93,74,0,0,0,
	80,10,5,25,1,(0),(0),(0),(0),(0),(0),0,0,(0),10000,30,35,94,75,0,0,0,
	70,10,1,15,1,(0),(0),(0),(0),(0),(0),0,0,(0),4,30,20,95,76,0,0,0,
	55,12,20,10,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),16,30,20,96,77,0,0,0,
	50,12,1,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),40,20,20,97,78,0,0,0,
	30,12,12,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),200,20,15,98,79,0,0,0,
	70,10,1,15,1,(0),(0),(0),(0),(0),(0),(2),0,(0),20,10,25,99,80,0,0,0,
	80,10,1,10,1,(0),(0),(0),(0),(0),(0),(2),0,(0),10,6,8,100,81,0,0,0,
	70,14,1,10,1,(0),(0),(0),(0),(0),(0),0,0,(0),14,6,12,52,33,0,0,0,
	10,7,12,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,15,102,83,0,0,0,
	20,8,15,10,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,35,121,102,0,0,0,
	70,10,1,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,20,110,91,0,0,0,
	100,14,1,1,1,(0),(0),(0),(0),(0),(0),0,0,(0),4,3,20,105,86,0,0,0,
	70,10,10,20,1,(0),(0),(0),(0),(0),(0),0,0,(0),10000,8,15,104,85,0,0,0,
	73,10,15,20,1,(0),(0),(0),(0),(0),(0),(1),0,(0),10000,30,0,45,27,0,0,0,
	
	77,10,1,30,1,(0),(0),(0),(0),(0),(0),(1),0,(0),10000,30,0,45,27,0,0,0,
	70,12,10,20,1,(0),(0),(0),(0),(0),(0),0,0,(0),10000,30,5,104,85,0,0,0,
	60,10,15,25,1,(0),(0),(0),(0),(0),(0),(1),0,(0),10000,30,20,107,88,0,0,0,
	30,10,12,25,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,25,20,61,42,0,0,0,
	20,8,8,20,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,15,103,84,0,0,0,
	90,8,10,10,1,(0),(0),(0),(0),(0),(0),0,0,(0),10000,30,25,106,87,0,0,0,
	75,12,10,25,1,(0),(0),(0),(0),(0),(0),(2),(1),(0),10000,30,20,111,92,0,0,0,
	20,8,1,30,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),12,12,15,101,82,0,0,0,
	20,8,1,30,1,(0),(0),(0),(0),(0),(0),(3),0,(0),12,12,30,113,94,0,0,0,
	50,12,20,15,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),2,2,35,114,95,0,0,0,
	90,15,1,15,1,(0),(0),(0),(0),(0),(0),(2),0,(0),4,3,35,115,96,0,0,0,
	10,12,20,30,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),44,22,25,116,97,0,0,0,
	45,8,15,30,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),10000,30,22,117,98,0,0,0,
	80,30,10,20,1,(0),(0),(0),(0),(0),(0),(2),0,(0),8,5,30,118,99,0,0,0,
	45,6,18,35,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),100,18,25,119,100,0,0,0,
	70,8,8,20,1,(0),(0),(0),(0),(0),(0),(2),0,(0),50,12,25,120,101,0,0,0,
	100,30,15,40,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),6,4,15,56,37,0,0,0,
	100,8,0,20,1,(0),(0),(0),(0),(0),(0),0,0,(0),4,10,25,122,103,0,0,0,
	0,8,14,25,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),400000,100000,20,123,104,0,0,0,
	100,20,1,1,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),40,2,0,45,27,0,0,0,
	
	80,4,0,1,1,(0),(0),(0),(0),(0),(0),0,0,(0),25,10,0,45,27,0,0,0,
	1,18,200,100,1,(0),(0),(0),(0),(0),(0),(1),(2),(0),25,10,0,45,27,0,0,0,
};

const uint[]AIGeneralMsg_=
{
	
	2000,2019,2020,2039,2040,2059,2060,2079,
	2100,2119,2120,2139,2140,2159,2160,2172,
	2200,2219,2220,2239,2240,2259,2260,2272,
	2400,2405,2420,2427,2440,2449,2460,2465,
	2300,2319,2320,2339,2340,2359,2360,2372,
	2500,2505,2520,2525,2540,2552,2560,2565,
	2600,2606,2620,2629,2640,2651,2660,2669,
	2700,2705,2720,2727,2740,2749,2760,2765,
	2900,2905,2920,2925,2940,2950,2960,2964,
	3000,3005,3020,3025,3040,3049,3060,3065,
	3100,3119,3120,3139,3140,3159,3160,3179,
	3200,3205,3220,3226,3240,3246,3260,3265,
	12000,12006,12020,12038,12040,12049,12060,12065,
	12100,12105,12120,12125,12140,12149,12160,12165,
	12200,12205,12220,12228,12240,12249,12260,12266,
	26000,26005,26020,26025,26040,26050,26060,26060,
	26100,26105,26120,26126,26140,26149,26160,26166,
	32100,32105,32120,32128,32140,32149,32160,32165,
	32200,32205,32220,32228,32240,32249,32260,32265,
	32300,32305,32320,32325,32340,32348,32360,32365,
	
	32400,32405,32420,32428,32440,32448,32460,32465,
	32500,32505,32520,32526,32540,32549,32560,32565,
	32600,32604,32620,32626,32640,32649,32660,32665,
	32800,32805,32820,32828,32840,32847,32860,32865,
	33000,33005,33020,33028,33040,33045,33060,33064,
	33100,33105,33120,33128,33140,33149,33160,33165,
	36100,36105,36120,36124,36140,36148,36160,36165,
	36200,36205,36220,36223,36240,36249,36260,36265,
	36300,36305,36320,36323,36340,36348,36360,36365,
	36400,36405,36420,36423,36440,36449,36460,36465,
	36500,36500,36520,36523,36540,36548,36560,36565,
	36700,36705,36720,36727,36740,36749,36760,36765,
	36800,36819,36820,36839,36840,36859,36860,36879,
	40100,40119,40120,40139,40140,40159,40160,40179,
	44100,44102,44120,44100,44140,44100,44160,44100,
	44500,44507,44520,44528,44540,44549,44560,44566,
	44900,44909,44920,44939,44940,44959,44960,44979,
	41300,41319,41320,41339,41340,41359,41360,41379,
	42100,42117,42120,42133,42140,42159,42160,42177,
	40900,40912,40920,40929,40940,40959,40960,40979,
	
	10000,10000,10020,10038,10040,10058,10060,10060,
	10100,10100,10120,10139,10140,10159,10160,10160,
	41700,41719,41720,41739,41740,41759,41760,41779,
	18100,18107,18120,18127,18140,18154,18160,18177,
	14000,14009,14020,14029,14040,14049,14060,14069,
	50100,50100,50120,50120,50140,50140,50160,50160,
	60000,60000,60020,60020,60040,60041,60060,60060,
	61900,61905,61920,61911,61940,61921,61960,61900,
	62100,62105,62120,62111,62140,62121,62160,62100,
	61000,61005,61020,61011,61040,61021,61060,61000,
	61800,61805,61820,61811,61840,61821,61860,61800,
	62000,62005,62020,62011,62040,62021,62060,62000,
	62200,62205,62220,62211,62240,62221,62260,62200,
	65000,65005,65020,65011,65040,65021,65060,65000,
	65200,65205,65220,65211,65240,65221,65260,65200,
	61700,61705,61720,61711,61740,61721,61760,61700,
	68300,68300,68320,68300,68340,68300,68360,68300,
	61100,61105,61120,61111,61140,61121,61160,61100,
	61200,61205,61220,61211,61240,61224,61260,61200,
	61300,61305,61320,61311,61340,61321,61360,61300,
	
	61400,61405,61420,61411,61440,61421,61460,61400,
	61500,61505,61520,61511,61540,61521,61560,61500,
	63000,63005,63020,63011,63040,63022,63060,63000,
	63100,63105,63120,63111,63140,63121,63160,63100,
	63200,63205,63220,63211,63240,63221,63260,63200,
	63300,63305,63320,63311,63340,63321,63360,63300,
	63400,63405,63420,63411,63440,63421,63460,63400,
	63500,63505,63520,63511,63540,63521,63560,63500,
	63600,63605,63620,63611,63640,63621,63660,63600,
	63700,63705,63720,63711,63740,63721,63760,63700,
	63800,63805,63820,63811,63840,63821,63860,63800,
	63900,63905,63920,63911,63940,63921,63960,63900,
	64000,64005,64020,64011,64040,64021,64060,64000,
	64100,64105,64120,64111,64140,64121,64160,64100,
	64200,64205,64220,64211,64240,64221,64260,64200,
	64300,64305,64320,64311,64340,64321,64360,64300,
	64400,64405,64420,64411,64440,64421,64460,64400,
	64500,64505,64520,64511,64540,64521,64560,64500,
	64600,64605,64620,64611,64640,64621,64660,64600,
	64700,64705,64720,64711,64740,64721,64760,64700,
	
	64800,64805,64820,64811,64840,64821,64860,64800,
	64900,64905,64920,64911,64940,64921,64960,64900,
	65100,65105,65120,65111,65140,65121,65160,65100,
	68700,68705,68720,68711,68740,68721,68760,68700,
	65300,65305,65320,65311,65340,65321,65360,65300,
	65400,65405,65420,65411,65440,65421,65460,65400,
	65500,65505,65520,65511,65540,65521,65560,65500,
	65600,65605,65620,65611,65640,65621,65660,65600,
	65700,65705,65720,65711,65740,65721,65760,65700,
	65800,65805,65820,65811,65840,65821,65860,65800,
	65900,65905,65920,65911,65940,65921,65960,65900,
	66000,66005,66020,66011,66040,66021,66060,66000,
	66100,66105,66120,66111,66140,66121,66160,66100,
	66200,66205,66220,66211,66240,66221,66260,66200,
	66300,66305,66320,66311,66340,66321,66360,66300,
	66400,66405,66420,66411,66440,66421,66460,66400,
	66500,66505,66520,66511,66540,66521,66560,66500,
	66600,66605,66620,66611,66640,66621,66660,66600,
	66700,66705,66720,66711,66740,66721,66760,66700,
	66800,66805,66820,66811,66840,66821,66860,66800,
	
	66900,66905,66920,66911,66940,66921,66960,66900,
	67000,67005,67020,67011,67040,67021,67060,67000,
	62300,62305,62320,62311,62340,62321,62360,62300,
	62400,62405,62420,62411,62440,62421,62460,62400,
	68000,68005,68020,68011,68040,68021,68060,68000,
	62600,62605,62620,62611,62640,62621,62660,62600,
	62700,62705,62720,62711,62740,62721,62760,62700,
	68100,68105,68120,68111,68140,68121,68160,68100,
	68200,68205,68220,68211,68240,68221,68260,68200,
	61600,61605,61620,61611,61640,61621,61660,61600,
	62500,62505,62520,62511,62540,62521,62560,62500,
	62800,62805,62820,62811,62840,62821,62860,62800,
	62900,62905,62920,62911,62940,62921,62960,62900,
	67100,67105,67120,67111,67140,67121,67160,67100,
	67200,67205,67220,67211,67240,67221,67260,67200,
	67300,67305,67320,67311,67340,67321,67360,67300,
	67400,67405,67420,67411,67440,67421,67460,67400,
	67500,67505,67520,67511,67540,67521,67560,67500,
	67600,67605,67620,67611,67640,67621,67660,67600,
	67700,67705,67720,67711,67740,67721,67760,67700,
	
	67800,67805,67820,67811,67840,67821,67860,67800,
	67900,67905,67920,67911,67940,67921,67960,67900,
	68400,68402,68420,68405,68440,68408,68460,68400,
	68500,68500,68520,68502,68540,68505,68560,68500,
	68600,68605,68620,68611,68640,68621,68660,68600
};

const uint[]AIBodyMsg_=
{
	
	1000,1009,1010,1019,1020,1029,1030,1059,1060,1069,1070,1079,1080,1089,1090,1099,
	1100,1109,1110,1119,1120,1129,1130,1159,1160,1169,1170,1179,1180,1189,1190,1199,
	1200,1209,1210,1219,1220,1229,1230,1259,1260,1269,1270,1279,1280,1289,1290,1299,
	0,0,10,0,20,0,30,0,60,0,70,0,80,0,90,0,
	1300,1309,1310,1319,1320,1329,1330,1359,1360,1369,1370,1379,1380,1389,1390,1399,
	0,0,10,0,20,0,30,0,60,0,70,0,80,0,90,0,
	1400,1402,1410,1412,1420,1422,1430,1439,1460,1462,1470,1472,1480,1482,1490,1492,
	1500,1509,1510,1519,1520,1529,1530,1559,1560,1569,1570,1579,1580,1589,1590,1599,
	1600,1609,1610,1619,1620,1629,1630,1639,1660,1669,1670,1679,1680,1689,1690,1699,
	1700,1709,1710,1712,1720,1722,1730,1735,1760,1763,1770,1773,1780,1783,1790,1796,
	1800,1804,1810,1813,1820,1823,1830,1837,1860,1862,1870,1872,1880,1882,1890,1898,
	12300,12303,12310,12312,12320,12322,12330,12335,12360,12363,12370,12373,12380,12382,12390,12396,
	32000,32002,32010,32012,32020,32022,32030,32036,32060,32062,32070,32072,32080,32082,32090,32095,
	32700,32702,32710,32712,32720,32722,32730,32736,32760,32762,32770,32772,32780,32782,32790,32795,
	33200,33202,33210,33212,33220,33222,33230,33236,33260,33262,33270,33272,33280,33282,33290,33295,
	36000,36002,36010,36012,36020,36022,36030,36035,36060,36062,36070,36072,36080,36082,36090,36095,
	36600,36602,36610,36612,36620,36622,36630,36645,36660,36662,36670,36672,36680,36682,36690,36695,
	40000,40009,40010,40019,40020,40029,40030,40059,40060,40069,40070,40079,40080,40089,40090,40099,
	44000,44000,44010,44010,44020,44020,44030,44030,44060,44060,44070,44070,44080,44080,44090,44090,
	44400,44408,44410,44413,44420,44423,44430,44439,44460,44463,44470,44473,44480,44483,44490,44492,
	
	44800,44804,44810,44814,44820,44824,44830,44849,44860,44864,44870,44874,44880,44884,44890,44894,
	41200,41209,41210,41219,41220,41229,41230,41259,41260,41269,41270,41279,41280,41289,41290,41299,
	12400,12409,12410,12419,12420,12429,12430,12459,12460,12469,12470,12479,12480,12489,12490,12499,
	42000,42009,42010,42017,42020,42027,42030,42058,42060,42068,42070,42078,42080,42089,42090,42099,
	40800,40807,40810,40818,40820,40828,40830,40859,40860,40867,40870,40877,40880,40886,40890,40899,
	41600,41609,41610,41619,41620,41629,41630,41659,41660,41669,41670,41679,41680,41689,41690,41699,
	18000,18002,18010,18011,18020,18021,18030,18035,18060,18061,18070,18071,18080,18082,18090,18092,
	50000,50000,50010,50010,50020,50020,50030,50030,50060,50060,50070,50070,50080,50080,50090,50090,
	61928,61930,61938,61933,61948,61936,61958,61943,61988,61946,61998,61949,62008,61952,62018,61957,
	62128,62130,62138,62133,62148,62136,62158,62136,62188,62139,62198,62142,62208,62145,62218,62150,
	61028,61030,61038,61033,61048,61036,61058,61040,61088,61043,61098,61046,61108,61049,61118,61054,
	61828,61830,61838,61833,61848,61836,61858,61843,61888,61846,61898,61849,61908,61852,61918,61857,
	62028,62030,62038,62033,62048,62036,62058,62043,62088,62046,62098,62049,62108,62052,62118,62057,
	62228,62230,62238,62233,62248,62236,62258,62243,62288,62246,62298,62249,62308,62252,62318,62257,
	65028,65030,65038,65033,65048,65036,65058,65046,65088,65049,65098,65052,65108,65055,65118,65060,
	65228,65230,65238,65233,65248,65236,65258,65246,65288,65249,65298,65252,65308,65255,65318,65260,
	61728,61730,61738,61733,61748,61736,61758,61736,61788,61739,61798,61742,61808,61745,61818,61750,
	68302,68301,68312,68301,68322,68301,68332,68302,68362,68302,68372,68302,68382,68302,68392,68302,
	61128,61130,61138,61133,61148,61136,61158,61140,61188,61143,61198,61146,61208,61149,61218,61154,
	61231,61233,61241,61236,61251,61239,61261,61242,61291,61245,61301,61248,61311,61251,61321,61256,
	
	61328,61330,61338,61333,61348,61337,61358,61343,61388,61346,61398,61349,61408,61352,61418,61357,
	61428,61430,61438,61433,61448,61436,61458,61442,61488,61445,61498,61448,61508,61451,61518,61456,
	61528,61530,61538,61533,61548,61536,61558,61543,61588,61546,61598,61549,61608,61552,61618,61557,
	63028,63030,63038,63033,63048,63036,63058,63046,63088,63049,63098,63052,63108,63055,63118,63060,
	63128,63130,63138,63133,63148,63136,63158,63146,63188,63149,63198,63152,63208,63155,63218,63160,
	63228,63230,63238,63233,63248,63236,63258,63246,63288,63249,63298,63252,63308,63255,63318,63260,
	63328,63330,63338,63333,63348,63336,63358,63346,63388,63349,63398,63352,63408,63355,63418,63360,
	63428,63430,63438,63433,63448,63436,63458,63446,63488,63449,63498,63452,63508,63455,63518,63460,
	63528,63530,63538,63533,63548,63536,63558,63546,63588,63549,63598,63552,63608,63555,63618,63560,
	63628,63630,63638,63633,63648,63636,63658,63646,63688,63649,63698,63652,63708,63655,63718,63660,
	63728,63730,63738,63733,63748,63736,63758,63746,63788,63749,63798,63752,63808,63755,63818,63760,
	63828,63830,63838,63833,63848,63836,63858,63836,63888,63839,63898,63842,63908,63845,63918,63850,
	63928,63930,63938,63933,63948,63936,63958,63946,63988,63949,63998,63952,64008,63955,64018,63960,
	64028,64030,64038,64033,64048,64036,64058,64046,64088,64049,64098,64052,64108,64055,64118,64060,
	64128,64130,64138,64133,64148,64136,64158,64146,64188,64149,64198,64152,64208,64155,64218,64160,
	64228,64230,64238,64233,64248,64236,64258,64246,64288,64249,64298,64252,64308,64255,64318,64260,
	64328,64330,64338,64333,64348,64336,64358,64346,64388,64349,64398,64352,64408,64355,64418,64360,
	64428,64430,64438,64433,64448,64436,64458,64446,64488,64449,64498,64452,64508,64455,64518,64460,
	64528,64530,64538,64533,64548,64536,64558,64546,64588,64549,64598,64552,64608,64555,64618,64560,
	64628,64630,64638,64633,64648,64636,64658,64646,64688,64649,64698,64652,64708,64655,64718,64660,
	
	64728,64730,64738,64733,64748,64736,64758,64746,64788,64749,64798,64752,64808,64755,64818,64760,
	64828,64830,64838,64833,64848,64836,64858,64846,64888,64849,64898,64852,64908,64855,64918,64860,
	64928,64930,64938,64933,64948,64936,64958,64946,64988,64949,64998,64952,65008,64955,65018,64960,
	65128,65130,65138,65133,65148,65136,65158,65146,65188,65149,65198,65152,65208,65155,65218,65160,
	68728,68730,68738,68733,68748,68736,68758,68746,68788,68749,68798,68752,68808,68755,68818,68760,
	65328,65330,65338,65333,65348,65336,65358,65346,65388,65349,65398,65352,65408,65355,65418,65360,
	65428,65430,65438,65433,65448,65436,65458,65446,65488,65449,65498,65452,65508,65455,65518,65460,
	65528,65530,65538,65533,65548,65536,65558,65546,65588,65549,65598,65552,65608,65555,65618,65560,
	65628,65630,65638,65633,65648,65636,65658,65646,65688,65649,65698,65652,65708,65655,65718,65660,
	65728,65730,65738,65733,65748,65736,65758,65746,65788,65749,65798,65752,65808,65755,65818,65760,
	65828,65830,65838,65833,65848,65836,65858,65846,65888,65849,65898,65852,65908,65855,65918,65860,
	65928,65930,65938,65933,65948,65936,65958,65946,65988,65949,65998,65952,66008,65955,66018,65960,
	66028,66030,66038,66033,66048,66036,66058,66046,66088,66049,66098,66052,66108,66055,66118,66060,
	66128,66130,66138,66133,66148,66136,66158,66146,66188,66149,66198,66152,66208,66155,66218,66160,
	66228,66230,66238,66233,66248,66236,66258,66246,66288,66249,66298,66252,66308,66255,66318,66260,
	66328,66330,66338,66333,66348,66336,66358,66346,66388,66349,66398,66352,66408,66355,66418,66360,
	66428,66430,66438,66433,66448,66436,66458,66446,66488,66449,66498,66452,66508,66455,66518,66460,
	66528,66530,66538,66533,66548,66536,66558,66546,66588,66549,66598,66552,66608,66555,66618,66560,
	66628,66630,66638,66633,66648,66636,66658,66646,66688,66649,66698,66652,66708,66655,66718,66660,
	66728,66730,66738,66733,66748,66736,66758,66746,66788,66749,66798,66752,66808,66755,66818,66760,
	
	66828,66830,66838,66833,66848,66836,66858,66846,66888,66849,66898,66852,66908,66855,66918,66860,
	66928,66930,66938,66933,66948,66936,66958,66946,66988,66949,66998,66952,67008,66955,67018,66960,
	67028,67030,67038,67033,67048,67036,67058,67046,67088,67049,67098,67052,67108,67055,67118,67060,
	62328,62330,62338,62333,62348,62336,62358,62342,62388,62345,62398,62348,62408,62351,62418,62356,
	62428,62430,62438,62433,62448,62436,62458,62441,62488,62444,62498,62447,62508,62450,62518,62455,
	68028,68030,68038,68033,68048,68036,68058,68046,68088,68049,68098,68052,68108,68055,68118,68060,
	62628,62630,62638,62633,62648,62636,62658,62636,62688,62639,62698,62642,62708,62645,62718,62650,
	62728,62730,62738,62730,62748,62730,62758,62735,62788,62735,62798,62735,62808,62735,62818,62737,
	68128,68130,68138,68133,68148,68136,68158,68146,68188,68149,68198,68152,68208,68155,68218,68157,
	68228,68230,68238,68233,68248,68236,68258,68246,68288,68249,68298,68252,68308,68255,68318,68260,
	61628,61630,61638,61633,61648,61636,61658,61644,61688,61647,61698,61650,61708,61653,61718,61658,
	62528,62530,62538,62533,62548,62536,62558,62542,62588,62545,62598,62548,62608,62551,62618,62556,
	62828,62830,62838,62833,62848,62836,62858,62844,62888,62847,62898,62850,62908,62853,62918,62858,
	62928,62930,62938,62933,62948,62936,62958,62946,62988,62949,62998,62952,63008,62955,63018,62960,
	67128,67130,67138,67133,67148,67136,67158,67146,67188,67149,67198,67152,67208,67155,67218,67160,
	67228,67230,67238,67233,67248,67236,67258,67246,67288,67249,67298,67252,67308,67255,67318,67260,
	67328,67330,67338,67333,67348,67336,67358,67346,67388,67349,67398,67352,67408,67355,67418,67360,
	67428,67430,67438,67433,67448,67436,67458,67446,67488,67449,67498,67452,67508,67455,67518,67460,
	67528,67530,67538,67533,67548,67536,67558,67546,67588,67549,67598,67552,67608,67555,67618,67560,
	67628,67630,67638,67633,67648,67636,67658,67646,67688,67649,67698,67652,67708,67655,67718,67660,
	
	67728,67730,67738,67733,67748,67736,67758,67746,67788,67749,67798,67752,67808,67755,67818,67760,
	67828,67830,67838,67833,67848,67836,67858,67846,67888,67849,67898,67852,67908,67855,67918,67860,
	67928,67930,67938,67933,67948,67936,67958,67946,67988,67949,67998,67952,68008,67955,68018,67960,
	68411,68412,68421,68414,68431,68416,68441,68420,68471,68422,68481,68424,68491,68426,68501,68426,
	68508,68511,68518,68513,68528,68515,68538,68518,68568,68520,68578,68522,68588,68524,68598,68526,
	68628,68630,68638,68633,68648,68636,68658,68646,68688,68649,68698,68652,68708,68655,68718,68660
};    

shared interface ITraceContext
{
	bool Exec(Map&map,uint16 hx,uint16 hy);
} 

import uint LineTracerHex(uint16 hx,uint16 hy,uint16 tx,uint16 ty,Map&map,uint dist,ITraceContext@context)from"linetracer";
import uint LineTracerSquare(uint16 hx,uint16 hy,uint16 tx,uint16 ty,Map&map,uint dist,ITraceContext@context)from"linetracer";    

import void SetDeterioration(Item&item,int deteriorationProcent)from"repair";
import bool AddWalkPlane(Critter&npc,uint priority,uint16 hexX,uint16 hexY,uint8 dir,bool run,uint cut)from"npc_planes";
import bool IsKeyAviable(Critter&cr,uint lockerId)from"lockers";
import uint GetKeyId(Critter&cr,uint lockerId)from"lockers";
import int RawToHit(Critter&cr,Critter&target,ProtoItem@weapon,uint8 weaponUse,ProtoItem@ammo)from"combat";        

bool npc_plane_begin(Critter&npc,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
{
	
	return true;
}                 

bool npc_plane_end(Critter&npc,NpcPlane&plane,int reason,Critter@someCr,Item@someItem)
{
	
	if(reason==(38)&&npc.IsNoPlanes())
	npc.Wait(Random(1000,2000));
	else if(reason==(32)||reason==(33)||reason==(36))
	npc.Wait(Random(1000,2000));
	else if(reason==(37)||reason==(31))
	npc.Wait(20000);
	else if(reason==(41))
	{
		if((@someCr!=null)&&someCr.IsPlayer()&&int(someCr.Id)!=npc.Merc[(800)])
		{
			NpcPlane@child=CreatePlane();
			child.Type=(1);
			child.Priority=0;
			child.Attack_TargId=someCr.Id;
			child.Attack_MinHp=__DeadHitPoints;
			child.Attack_IsGag=true;
			child.Attack_GagHexX=someCr.HexX;
			child.Attack_GagHexY=someCr.HexY;
			child.Attack_LastHexX=someCr.HexX;
			child.Attack_LastHexY=someCr.HexY;
			child.Run=plane.Run;
			plane.SetChild(child);
		}
		else
		{
			npc.Wait(Random(1000,2000));
		}
		return false;
	}
	else if(reason==(42))
	{
		if((@someItem!=null))
		{
			if(someItem.GetType()==(9)&&!(((someItem.LockerCondition)&((0x01)))!=0)&&
			(AIData_[(((npc.Stat[(105)])<(282)?(npc.Stat[(105)]):0)*22+4)]!=0)&&IsKeyAviable(npc,someItem.LockerId))
			{
				NpcPlane@child=CreatePlane();
				child.Type=(3);
				child.Priority=0;
				child.Pick_HexX=someItem.HexX;
				child.Pick_HexY=someItem.HexY;
				child.Pick_Pid=someItem.GetProtoId();
				child.Pick_UseItemId=GetKeyId(npc,someItem.LockerId);
				child.Pick_ToOpen=true;
				child.Run=plane.Run;
				plane.SetChild(child);
				return false;
			}
			else if(someItem.GetType()!=(9))
			{
				NpcPlane@child=CreatePlane();
				child.Type=(3);
				child.Priority=0;
				child.Pick_HexX=someItem.HexX;
				child.Pick_HexY=someItem.HexY;
				child.Pick_Pid=someItem.GetProtoId();
				child.Run=plane.Run;
				plane.SetChild(child);
				return false;
			}
		}
	}
	else if(reason==(14)&&npc.IsCanWalk())
	{
		Map@map=npc.GetMap();
		Critter@cr=GetCritter(plane.Attack_TargId);
		if((@map!=null)&&(@cr!=null))
		{
			int awayDir=GetDirection(cr.HexX,cr.HexY,npc.HexX,npc.HexY);
			uint awayDist=Random(30,50);
			uint16 baseHx=npc.HexX;
			uint16 baseHy=npc.HexY;
			map.MoveHexByDir(baseHx,baseHy,awayDir,1);
			
			float angle=0.0f;
			uint reverse=Random(0,1);
			for(uint i=0;i<5;i++)
			{
				uint16 hx=baseHx,hy=baseHy;
				map.GetHexCoord(npc.HexX,npc.HexY,hx,hy,angle,awayDist);
				if(GetDistantion(npc.HexX,npc.HexY,hx,hy)>1)
				{
					AddWalkPlane(npc,100,hx,hy,6,true,0);
					break;
				}
				angle+=float(i+1)*45.0f*((i%2)==reverse?1.0f:-1.0f);
			}
			AI_TrySayCombatText(npc,(0));
		}
		
		int npcTimeout=(__FullSecond+(((__TimeoutBattle-((npc.Stat[(9)])*__TimeMultiplier))>(int(((12)*__TimeMultiplier))))?(__TimeoutBattle-((npc.Stat[(9)])*__TimeMultiplier)):(int(((12)*__TimeMultiplier)))));
		if(npc.Timeout[(238)]<npcTimeout-__FullSecond)
		npc.TimeoutBase[(238)]=npcTimeout;
	}
	else if(reason==(43))
	{
		
		Item@[]items;
		uint count=npc.GetItemsByType((3),items);
		for(uint i=0;i<count;i++)
		{
			Item@item=items[i];
			if((item.IsDeteriorable()&&(((item.BrokenFlags)&((0x0F)))!=0)))
			{
				SetDeterioration(item,0);
				break;
			}
		}
		npc.Wait(10000);
	}
	return true;
}           

bool npc_plane_run(Critter&npc,NpcPlane&plane,int reason,uint&r0,uint&r1,uint&r2)
{
	
	if(reason==(51))
	{
		
		uint16 npcPid=npc.GetProtoId();
		if(npcPid==(327))
		{
			Item@weap=npc.GetItem((427),-1);
			if((@weap!=null)&&weap.AmmoCount>0)
			{
				r0=weap.Id;
				r1=0;
				return true;
			}
		}
		else if(npcPid==(322))
		{
			Critter@target=GetCritter(r0);
			if(GetCrittersDistantion(npc,target)>2)
			{
				Item@weap=npc.GetItem((365),-1);
				if((@weap!=null))
				{
					r0=weap.Id;
					r1=0;
					return true;
				}
			}
		} 
		
		r0=0;
		r1=0;
		r2=(Random(0,4)==0?1000:1020); 
		
		if(npc.Damage[(504)]!=0&&npc.Damage[(503)]!=0)
		return true; 
		
		uint aiId=npc.Stat[(105)];
		int bestWeapon=AIData_[(((aiId)<(282)?(aiId):0)*22+7)];
		if(bestWeapon==(1))
		return true; 
		
		if(npc.Stat[(110)]==-1)
		{
			r0=0;
			return true;
		}
		
		r0=npc.Stat[(110)];
		r1=npc.Stat[(111)];
		Item@weapon=null;
		if(r0!=0)
		@weapon=npc.GetItemById(uint(r0));
		if((@weapon!=null)&&CheckBattleWeapon(npc,weapon))
		return true; 
		
		npc.StatBase[(110)]=-1;
		npc.StatBase[(111)]=0;
		r0=0;
		r1=0; 
		
		int[]skillsNum={(200),(201),(202),(203),(204),(205)};
		uint skillsCount=skillsNum.length();
		SkillsSort(npc,skillsNum,0,skillsCount); 
		
		switch(bestWeapon)
		{
			case(0):
			break;
			case(2):
			for(uint i=0;i<skillsCount;i++)
			{
				int i0=Random(0,skillsCount-1);
				int i1=Random(0,skillsCount-1);
				if(i0!=i1)
				{
					int tmp=skillsNum[i0];
					skillsNum[i0]=skillsNum[i1];
					skillsNum[i1]=tmp;
				}
			}
			break;
			case(3):
			SkillToBegin(skillsNum,(203));
			break;
			case(4):
			SkillToBegin(skillsNum,(203));
			SkillToBegin(skillsNum,(204));
			SkillToBegin(skillsNum,(205));
			SkillToBegin(skillsNum,(202));
			SkillToBegin(skillsNum,(201));
			SkillToBegin(skillsNum,(200));
			SkillsSort(npc,skillsNum,0,4);
			SkillsSort(npc,skillsNum,4,2);
			break;
			case(5):
			SkillToBegin(skillsNum,(205));
			SkillToBegin(skillsNum,(202));
			SkillToBegin(skillsNum,(201));
			SkillToBegin(skillsNum,(200));
			SkillToBegin(skillsNum,(203));
			SkillToBegin(skillsNum,(204));
			SkillsSort(npc,skillsNum,0,2);
			SkillsSort(npc,skillsNum,2,4);
			break;
			case(6):
			SkillToBegin(skillsNum,(205));
			SkillToBegin(skillsNum,(203));
			break;
			default:
			break;
		} 
		
		Item@[]allWeapons;
		npc.GetItemsByType((3),allWeapons);
		for(uint i=0,j=allWeapons.length();i<j;i++)
		if(not CheckBattleWeapon(npc,allWeapons[i]))
		@allWeapons[i]=null; 
		
		for(uint i=0;i<skillsCount;i++)
		{
			int skill=skillsNum[i];
			
			for(uint k=0,l=allWeapons.length();k<l;k++)
			{
				@weapon=allWeapons[k];
				if(not(@weapon!=null))
				continue;
				
				for(int u=0;u<3;u++)
				{
					if((u==0&&not((weapon.Proto.Weapon_ActiveUses&1)!=0))||
					(u==1&&not((weapon.Proto.Weapon_ActiveUses&2)!=0))||
					(u==2&&not((weapon.Proto.Weapon_ActiveUses&4)!=0)))
					continue;
					
					if(((u)==0?weapon.Proto.Weapon_Skill_0:((u)==1?weapon.Proto.Weapon_Skill_1:((u)==2?weapon.Proto.Weapon_Skill_2:0)))==skill)
					{
						npc.StatBase[(110)]=weapon.Id;
						npc.StatBase[(111)]=u;
						r0=weapon.Id;
						r1=u;
						return true;
					}
				}
			}
		} 
		
		return true;
	}
	else if(reason==(52))
	{
		Critter@target=GetCritter(r0);
		uint8 mode=0;
		ProtoItem@weapon=npc.GetSlotProto((1),mode);
		int use=((mode)&0xF);
		ProtoItem@ammo=(weapon.Weapon_MaxAmmoCount>0&&weapon.Weapon_Caliber!=0?GetProtoItem(npc.GetItem(0,(1)).AmmoPid):null);
		int wpnDist=((use)==0?weapon.Weapon_MaxDist_0:((use)==1?weapon.Weapon_MaxDist_1:((use)==2?weapon.Weapon_MaxDist_2:0)));
		int multihex=npc.GetMultihex()+target.GetMultihex();
		
		if(not npc.IsCanWalk())
		{
			int dist=GetDistantion(npc.HexX,npc.HexY,target.HexX,target.HexY);
			if(wpnDist<dist)
			dist=wpnDist;
			dist+=multihex;
			r0=r1=r2=dist;
			return true;
		} 
		
		int skill=((use)==0?weapon.Weapon_Skill_0:((use)==1?weapon.Weapon_Skill_1:((use)==2?weapon.Weapon_Skill_2:0)));
		if(skill==(203)||skill==(204))
		{
			int base=
			npc.Skill[skill]-
			(((0)>(target.Stat[(9)]+((@ammo!=null)?ammo.Ammo_ACMod:0)))?(0):(target.Stat[(9)]+((@ammo!=null)?ammo.Ammo_ACMod:0)))+
			(target.IsKnockout()?40:0)-
			(npc.Damage[(502)]!=0?25:0);
			
			if(!weapon.Weapon_IsUnarmed)
			{
				base+=(weapon.Weapon_Perk==(2)?20:0);
				int strength=npc.Stat[(0)]+(npc.Perk[(407)]!=0?3:0);
				if(strength<weapon.Weapon_MinStrength)
				base-=20*(weapon.Weapon_MinStrength-strength);
				if(npc.Trait[(553)]!=0)
				base+=((((weapon.Flags)&((0x00000080)))!=0)?-40:20);
			}
			int ai_min=AIData_[(((npc.Stat[(105)])<(282)?(npc.Stat[(105)]):0)*22+3)];
			if(base<ai_min)
			{
				r0=0;
				r1=0;
				r2=0;
			}
			else
			{
				r0=1+multihex;
				r1=1+multihex;
				r2=wpnDist+multihex;
			}
			return true;
		}
		else
		
		{
			if(skill==(205))
			if(npc.Stat[(0)]*3<wpnDist)
			wpnDist=npc.Stat[(0)]*3;
			
			r1=0;
			if(skill==(205))
			{
				uint dmgType=((use)==0?weapon.Weapon_DmgType_0:((use)==1?weapon.Weapon_DmgType_1:((use)==2?weapon.Weapon_DmgType_2:0)));
				;
				if(dmgType==(4)||dmgType==(6)||dmgType==(7))
				r0=3;
			}
			else if((@ammo!=null))
			{
				switch(ammo.ProtoId)
				{
					case(14):
					case(37):
					case(274):
					r1=4;
					default:
					break;
				}
			}
			
			if((weapon.Weapon_Perk==(5))&&(r1<8))
			r1=8;
			
			if(int(r1)>wpnDist)
			{
				r1=0;
				r0=0;
				r2=0;
				return true;
			}
			
			int base=npc.Skill[skill]-
			(((0)>(target.Stat[(9)]+((@ammo!=null)?ammo.Ammo_ACMod:0)))?(0):(target.Stat[(9)]+((@ammo!=null)?ammo.Ammo_ACMod:0)))+
			(target.IsKnockout()?40:0)-
			(npc.Damage[(502)]!=0?25:0)+(weapon.Weapon_Perk==(2)?20:0);
			
			int strength=npc.Stat[(0)]+(npc.Perk[(407)]!=0?3:0);
			if(strength<weapon.Weapon_MinStrength)
			base-=20*(weapon.Weapon_MinStrength-strength);
			if(npc.Trait[(553)]!=0)
			base+=((((weapon.Flags)&((0x00000080)))!=0)?-40:20);
			
			int ai_min=AIData_[(((npc.Stat[(105)])<(282)?(npc.Stat[(105)]):0)*22+3)];
			int perception=npc.Stat[(1)];
			int sharpshooter=8*npc.Perk[(315)];
			
			int mod=(weapon.Weapon_Perk==(5)?5:(weapon.Weapon_Perk==(1)?4:2));
			
			if(base+8*perception+sharpshooter<95)
			{
				if(base+8*perception+sharpshooter<ai_min)
				{
					r1=0;
					r0=0;
					r2=0;
					return true;
				}
				else
				r0=(mod-2)*perception;
			}
			else
			{
				if(base<95)
				r0=(base+sharpshooter+4*mod*perception-95)/4;
				else
				{
					if(npc.Damage[(502)]!=0)
					r0=(base+3*sharpshooter+12*mod*perception-95)/12;
					else
					r0=(base+sharpshooter+4*mod*perception-95)/4;
				}
			}
			
			if(base<ai_min)
			r2=(base+sharpshooter+4*mod*perception-ai_min)/4;
			else
			{
				if(npc.Damage[(502)]!=0)
				r2=(base+3*sharpshooter+12*mod*perception-ai_min)/12;
				else
				r2=(base+sharpshooter+4*mod*perception-ai_min)/4;
			}
			
			if(npc.IsCanAim())
			{
				if(weapon.Weapon_Aim_0)
				{
					uint reduction=(r0*3*npc.Stat[(4)])/100;
					reduction=(((15)<(reduction))?(15):(reduction));
					r0-=reduction;
				}
			} 
			
			if(r0<r1)
			r0=r1;
			if(r2<r0)
			r2=r0; 
			
			if(wpnDist<int(r2))
			{
				r2=((use)==0?weapon.Weapon_MaxDist_0:((use)==1?weapon.Weapon_MaxDist_1:((use)==2?weapon.Weapon_MaxDist_2:0)));
				if(r0>r2)
				r0=r2;
			} 
			
			r0+=multihex;
			r1+=multihex;
			r2+=multihex;
			return true;
		}
	}
	else if(reason==(53))
	{
		if(!CogitateFiring(npc,r0,r1))
		{
			r0=0;
			r1=(npc.IsCanAim()&&Random(0,5)==0?Random((1),(8)):0);
		}
		
		uint8 mode=0;
		ProtoItem@weapon=npc.GetSlotProto((1),mode);
		int ap=(@weapon!=null)?((r0)==0?weapon.Weapon_ApCost_0:((r0)==1?weapon.Weapon_ApCost_1:((r0)==2?weapon.Weapon_ApCost_2:0))):3;
		switch(r1)
		{
			case(7):
			ap+=__ApCostAimEyes;
			break;
			case(8):
			ap+=__ApCostAimGroin;
			break;
			case(1):
			ap+=__ApCostAimHead;
			break;
			case(2):
			case(3):
			ap+=__ApCostAimArms;
			break;
			case(6):
			case(5):
			ap+=__ApCostAimLegs;
			break;
			default:
			break;
		}
		
		if(ap>npc.Stat[(8)])
		{
			r1=0;
		}
		else
		{
			ap-=npc.Stat[(75)];
			if(ap>0)
			r2=(ap*__ApRegeneration)/npc.Stat[(8)]+50;
		}
		return true;
	}
	
	return false;
}

bool CogitateFiring(Critter&cr,uint&mode,uint&aim)
{
	if(Random(1,10)>cr.Stat[(4)])
	return false;
	
	Critter@target=GetCritter(mode);
	if(!(@target!=null))
	return false;
	Item@weapon=cr.GetItem(0,(1));
	
	if(!(@weapon!=null))
	{
		mode=0;
		if(cr.IsCanAim())
		aim=ChooseAim(cr,target,null,0,null);
		else
		aim=0;
		
		return true;
	}
	
	if(weapon.GetType()!=(3))
	return false;
	ProtoItem@protoWeapon=GetProtoItem(weapon.GetProtoId());
	ProtoItem@protoAmmo=null;
	if(weapon.AmmoPid!=0)
	@protoAmmo=GetProtoItem(weapon.AmmoPid);
	if(protoWeapon.Weapon_Skill_0==(203)||protoWeapon.Weapon_Skill_0==(204))
	{
		mode=0;
		if(cr.IsCanAim())
		aim=ChooseAim(cr,target,protoWeapon,mode,protoAmmo);
		else
		aim=0;
		
		return true;
	}
	else
	{
		bool forceBurst=false;
		if(protoWeapon.Weapon_Round_0>1)
		{
			
			forceBurst=true;
			mode=0;
		}
		else
		{
			if(protoWeapon.Weapon_DmgType_1==(0))
			{
				
				mode=0;
			}
			else
			{
				
				if(ValidateBurst(cr,target,protoWeapon,mode))
				{
					
					forceBurst=true;
					mode=1;
				}
				else
				{
					
					mode=0;
				}
			}
		}
		
		if(forceBurst)
		{
			aim=0;
			return true;
		}
		
		if(!cr.IsCanAim()||!((mode)==0?protoWeapon.Weapon_Aim_0:((mode)==1?protoWeapon.Weapon_Aim_1:((mode)==2?protoWeapon.Weapon_Aim_2:false))))
		{
			aim=0;
			return true;
		}
		aim=ChooseAim(cr,target,protoWeapon,mode,protoAmmo);
		return true;
	}
}

int ChooseAim(Critter&cr,Critter&target,ProtoItem@weapon,uint8 mode,ProtoItem@ammo)
{
	int tohit=RawToHit(cr,target,weapon,mode,ammo);
	
	if(tohit<26)
	return 0;
	
	int ap=(@weapon!=null)?((mode)==0?weapon.Weapon_ApCost_0:((mode)==1?weapon.Weapon_ApCost_1:((mode)==2?weapon.Weapon_ApCost_2:0))):3;
	uint skill=(@weapon!=null)?((mode)==0?weapon.Weapon_Skill_0:((mode)==1?weapon.Weapon_Skill_1:((mode)==2?weapon.Weapon_Skill_2:0))):0;
	int pendiv=(@weapon!=null)?(skill==(204)||skill==(203)?2:1):2;
	bool isTB=cr.GetMap().IsTurnBasedAvailability();
	int maxap=isTB?cr.Stat[(75)]:cr.Stat[(8)];
	
	int[]val(6);
	
	int th=tohit;
	int aps=ap;
	val[0]=1000*(((th)>(95))?(95):(((th)<(5))?(5):(th)));
	if(!isTB)
	val[0]/=aps;
	
	aps=ap+__ApCostAimEyes;
	th=tohit-__HitAimEyes/pendiv;
	val[1]=aps<=maxap&&((cr.Dir+3)%6==target.Dir)?2500*(((th)>(95))?(95):(((th)<(5))?(5):(th))):0;
	if(!isTB)
	val[1]/=aps;
	
	th=tohit-__HitAimGroin/pendiv;
	aps=ap+__ApCostAimGroin;
	val[2]=aps<=maxap?2000*(((th)>(95))?(95):(((th)<(5))?(5):(th))):0;
	if(!isTB)
	val[2]/=aps;
	
	th=tohit-__HitAimHead/pendiv;
	aps=ap+__ApCostAimHead;
	val[3]=aps<=maxap?2000*(((th)>(95))?(95):(((th)<(5))?(5):(th))):0;
	if(!isTB)
	val[3]/=aps;
	
	th=tohit-__HitAimArms/pendiv;
	aps=ap+__ApCostAimArms;
	val[4]=aps<=maxap?1600*(((th)>(95))?(95):(((th)<(5))?(5):(th))):0;
	if(!isTB)
	val[4]/=aps;
	
	th=tohit-__HitAimLegs/pendiv;
	aps=ap+__ApCostAimLegs;
	val[5]=aps<=maxap?1300*(((th)>(95))?(95):(((th)<(5))?(5):(th))):0;
	if(!isTB)
	val[5]/=aps; 
	
	int max=0,next=0;
	for(int i=1;i<6;i++)
	if(val[i]>=val[max])
	max=i;
	for(int i=1;i<6;i++)
	if(val[i]>=val[next]&&val[next]<val[max])
	next=i;
	if(Random(0,2)==2)
	max=next;  
	
	switch(max)
	{
		case 1:
		return(7);
		case 2:
		return(8);
		case 3:
		return(1);
		case 4:
		if(Random(0,1)==1)
		return(2);
		else
		return(3);
		case 5:
		if(Random(0,1)==1)
		return(6);
		else
		return(5);
		case 0:
		default:
	}
	;
	return(9);
}

class CTraceFirstCritter:ITraceContext
{
	Critter@Cr;
	uint Mindist;
	uint16 Gx;
	uint16 Gy;
	CTraceFirstCritter(uint16 gx,uint16 gy,uint16 mindist)
	{
		this.Gx=gx;
		this.Gy=gy;
		@this.Cr=null;
		this.Mindist=mindist;
	}
	bool Exec(Map&map,uint16 hx,uint16 hy)
	{
		if(!map.IsHexRaked(hx,hy))
		return true;
		@Cr=map.GetCritter(hx,hy);
		return(@Cr!=null)&&Cr.Cond==(1)&&GetDistantion(Gx,Gy,Cr.HexX,Cr.HexY)>=Mindist;
	}
}

Critter@TraceFirstCritter(uint16 hx,uint16 hy,uint16 tx,uint16 ty,Map&map,int dist,uint16 gx,uint16 gy,uint mindist)
{
	CTraceFirstCritter Tracer(gx,gy,mindist);
	LineTracerHex(hx,hy,tx,ty,map,dist,Tracer);
	return Tracer.Cr;
}

bool IsCurrentEnemy(Critter&cr,uint targetId)
{
	if(cr.CheckEnemyInStack(targetId))
	return true;
	array<NpcPlane@>plans;
	cr.GetPlanes(plans);
	for(uint i=0,j=plans.length();i<j;i++)
	if(plans[i].Type==(1)&&plans[i].Attack_TargId==targetId)
	return true;
	return false;
}

bool ValidateBurst(Critter&cr,Critter&target,ProtoItem@weapon,uint mode)
{
	
	if(Random(0,2)==0)
	return false;
	Map@map=cr.GetMap();
	if((map.IsTurnBasedAvailability()?cr.Stat[(75)]:cr.Stat[(8)])<int(((mode)==0?weapon.Weapon_ApCost_0:((mode)==1?weapon.Weapon_ApCost_1:((mode)==2?weapon.Weapon_ApCost_2:0)))))
	return false;
	
	uint maxDist=((mode)==0?weapon.Weapon_MaxDist_0:((mode)==1?weapon.Weapon_MaxDist_1:((mode)==2?weapon.Weapon_MaxDist_2:0)));
	
	uint16 hx=cr.HexX;
	uint16 hy=cr.HexY;
	uint16 tx=target.HexX;
	uint16 ty=target.HexY;
	Critter@blocker=TraceFirstCritter(hx,hy,tx,ty,map,maxDist,hx,hy,0);
	if((@blocker!=null)&&!IsCurrentEnemy(cr,blocker.Id))
	{
		
		return false;
	}
	
	uint16 sx=hx;
	uint16 sy=hy;
	uint16 ex=tx;
	uint16 ey=hy;
	uint8 dir=GetOffsetDir(hx,hy,tx,ty,89.0f);
	map.MoveHexByDir(sx,sy,dir,1);
	map.MoveHexByDir(ex,ey,dir,1);
	@blocker=TraceFirstCritter(sx,sy,ex,ey,map,maxDist,hx,hy,3);
	if((@blocker!=null)&&!IsCurrentEnemy(cr,blocker.Id))
	{
		
		return false;
	}
	
	sx=hx;
	sy=hy;
	ex=tx;
	ey=hy;
	dir=GetOffsetDir(hx,hy,tx,ty,-89.0f);
	map.MoveHexByDir(sx,sy,dir,1);
	map.MoveHexByDir(ex,ey,dir,1);
	@blocker=TraceFirstCritter(sx,sy,ex,ey,map,maxDist,hx,hy,3);
	if((@blocker!=null)&&!IsCurrentEnemy(cr,blocker.Id))
	{
		
		return false;
	}
	
	return true;
}

void SkillsSort(Critter&npc,int[]&skills,uint first,uint count)
{
	for(uint i=first,j=first+count;i<j;i++)
	{
		uint max=i;
		for(int k=i+1,l=first+count;k<l;k++)
		{
			if(npc.Skill[skills[k]]>npc.Skill[skills[max]])
			max=k;
		}
		if(max!=i)
		{
			int tmp=skills[max];
			skills[max]=skills[i];
			skills[i]=tmp;
		}
	}
}

void SkillToBegin(int[]&skills,int skill)
{
	for(uint i=1,j=skills.length();i<j;i++)
	{
		if(skills[i]==skill)
		{
			for(uint k=i;k>0;k--)
			skills[k]=skills[k-1];
			skills[0]=skill;
			break;
		}
	}
}

bool CheckBattleWeapon(Critter&npc,Item&weapon)
{
	if(weapon.GetType()!=(3))
	return false;
	if(not npc.IsAnim1(weapon.Proto.Weapon_Anim1))
	return false;
	if((weapon.IsDeteriorable()&&(((weapon.BrokenFlags)&((0x0F)))!=0)))
	return false;
	if((((weapon.Flags)&((0x00000080)))!=0)&&(npc.Damage[(504)]!=0||npc.Damage[(503)]!=0))
	return false;
	if(npc.Mode[(522)]==0&&weapon.Proto.Weapon_MaxAmmoCount>0&&weapon.AmmoCount==0&&!IsAmmoForWeapon(npc,weapon))
	return false;
	return true;
}

bool IsAmmoForWeapon(Critter&npc,Item&weapon)
{
	if(npc.CountItem(weapon.AmmoPid)>0)
	return true;
	if(npc.CountItem(weapon.Proto.Weapon_DefaultAmmoPid)>0)
	return true;
	Item@[]ammo;
	for(uint i=0,j=npc.GetItemsByType((4),ammo);i<j;i++)
	{
		Item@a=ammo[i];
		if(a.Proto.Ammo_Caliber==weapon.Proto.Weapon_Caliber)
		return true;
	}
	return false;
} 

