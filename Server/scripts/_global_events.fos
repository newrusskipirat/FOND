/*
   @ server bind start                      main		+
   @ server bind loop                       main		+
   @ server bind critter_attack             main		!
   @ server bind critter_attacked           main		!
   @ server bind critter_stealing           main		!

   @ server bind critter_use_item           main		!
   @ server bind critter_use_skill          main		!

   @ server bind critter_init               main		+
   @ server bind critter_finish             main		+
   @ server bind critter_idle               main		+
   @ server bind critter_dead               main		+
   @ server bind critter_respawn            main		+
   @ server bind critter_change_item        main		!

   @ server bind map_critter_in             main		+
   @ server bind map_critter_out            main		+

   @ server bind npc_plane_begin            main_planes	-
   @ server bind npc_plane_end              main_planes	-
   @ server bind npc_plane_run              main_planes	-

   @ server bind items_barter               main			-
   @ server bind items_crafted              main			-

   @ server bind player_levelup             main			-

   @ server bind turn_based_begin           main			-
   @ server bind turn_based_end             main			-
   @ server bind turn_based_process         main			-

   @ server bind world_save                 main			+

   @ server bind player_registration        main			+
   @ server bind player_login               main			+

   @ server bind player_getaccess           main			-
 */

# ifndef __GLOBAL_EVENTS__
# define __GLOBAL_EVENTS__


# ifdef __MAIN_MODULE__
import bool manager_start() from "manager";
import bool manager_init() from "manager";
import uint manager_loop() from "manager";
import void manager_critter_init( Critter& critter, bool firstTime ) from "manager";
import void manager_critter_finish( Critter& critter, bool toDelete ) from "manager";
import void manager_critter_idle( Critter& critter ) from "manager";
import void manager_critter_dead( Critter& critter, Critter@ killer ) from "manager";
import void manager_critter_respawn( Critter& critter ) from "manager";
import void manager_map_critter_in( Map& map, Critter& critter ) from "manager";
import void manager_map_critter_out( Map& map, Critter& critter ) from "manager";
import void manager_world_save() from "manager";
import bool manager_player_registration( uint ip, string& name, uint& textMsg, uint& strNum ) from "manager";
import bool manager_player_login( uint ip, string& name, uint id, uint& textMsg, uint& strNum ) from "manager";
import bool manager_critter_use_skill( Critter& critter, int skill, Critter@ targetCritter, Item@ targetItem, Scenery@ targetScenery ) from "manager";
# endif // __MAIN_MODULE__

# ifndef __MAIN_MODULE__

shared interface iManagerModule 					{ bool manager_init();
															  bool manager_start(); }
shared interface iManager_loop 						{ uint global_loop(); }
shared interface iManager_critter_init 			{ bool global_critter_init( Critter& critter, bool firstTime ); }
shared interface iManager_critter_finish 		{ bool global_critter_finish( Critter& critter, bool toDelete ); }
shared interface iManager_critter_idle 			{ bool global_critter_idle( Critter& critter ); }
shared interface iManager_critter_dead 			{ bool global_critter_dead( Critter& critter, Critter@ killer ); }
shared interface iManager_critter_respawn		{ bool global_critter_respawn( Critter& critter ); }
shared interface iManager_map_critter_in			{ bool global_map_critter_in( Map& map, Critter& critter ); }
shared interface iManager_map_critter_out 		{ bool global_map_critter_out( Map& map, Critter& critter ); }
shared interface iManager_world_save 				{ bool global_world_save(); }
shared interface iManager_player_registration	{ bool global_player_registration( uint ip, string& name, uint& textMsg, uint& strNum );}
shared interface iManager_player_login 			{ bool global_player_login( uint ip, string& name, uint id, uint& textMsg, uint& strNum );	}
shared interface iManager_time 						{ bool global_time( int8 type );	}

shared interface iManager_critter_use_skill		{ bool global_critter_use_skill( Critter& critter, int skill, Critter@ targetCritter, Item@ targetItem, Scenery@ targetScenery ); }

shared interface iManagerElement
{
    iManagerModule@ GetLink();
    uint            GetId();
    string& GetName();
    uint&   GetEventFlags();
    int8&   GetTimeChangeCall();
    uint8   GetPriority();
}

# define MANAGER_EVENT_LOOP                   ( 0x1 )
# define MANAGER_EVENT_CRITTER_INIT           ( 0x2 )
# define MANAGER_EVENT_CRITTER_FINISH         ( 0x4 )
# define MANAGER_EVENT_CRITTER_IDLE           ( 0x8 )
# define MANAGER_EVENT_CRITTER_DEAD           ( 0x10 )
# define MANAGER_EVENT_CRITTER_RESPAWN        ( 0x20 )
# define MANAGER_EVENT_MAP_CRITTER_IN         ( 0x40 )
# define MANAGER_EVENT_MAP_CRITTER_OUT        ( 0x80 )
# define MANAGER_EVENT_WORLD_SAVE             ( 0x100 )
# define MANAGER_EVENT_PLAYER_REGISTRATION    ( 0x200 )
# define MANAGER_EVENT_PLAYER_LOGIN           ( 0x400 )
# define MANAGER_EVENT_TIME                   ( 0x800 )

# define TIME_NEW_MINUTE                      ( 0x1 )
# define TIME_NEW_HOUR                        ( 0x2 )
# define TIME_NEW_DAY                         ( 0x3 )
# define TIME_NEW_MONTH                       ( 0x5 )
# define TIME_NEW_YEAR                        ( 0x6 )
# define TIME_NEW_WEEK                        ( 0x10 )                         // не назначать в ModuleElement, только проверять при срабатывании

# ifndef __MANAGER_MODULE__
import iManagerElement@ manager_add_module( iManagerModule@ link, string& name, uint8 priority ) from "manager";
# endif        // !__MANAGER_MODULE__

# endif // !__MAIN_MODULE__

# endif // !__GLOBAL_EVENTS__
