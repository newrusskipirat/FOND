// character history menu, player && gm
// pm

#include "client_gui_h.fos"
#include "_client_defines.fos"
#include "_colors.fos"
#include "_macros.fos"

#define TEXT_TYPE_NAME                ( 0 )
#define TEXT_TYPE_DATE                ( 1 )
#define TEXT_TYPE_HISTORY             ( 2 )
#define TEXT_TYPE_PSYHO               ( 3 )
#define TEXT_TYPE_CHAVIEW             ( 4 )
#define TEXT_TYPE_ITEMS               ( 5 )

#define HISTORY_BUTTONS_SHOW_COUNT    ( 10 )

IGUIElementOpt@[] playerHistoryBtns;
IGUIElementOpt@ HistoryName;
IGUIElementOpt@ HistoryHistory;
IGUIElementOpt@ HistoryDate;
IGUIElementOpt@ HistoryChaView;
IGUIElementOpt@ HistoryItems;
IGUIElementOpt@ HistoryPsyho;

string[] fractionNames = { "name1", "name2", "name3", "name4", "name5", "name6", "name7" };
uint8[]  fractionValues = { 1, 2, 3, 4, 5, 6, 7 };
// /////////////

class ScreenHistoryAll : IGUIScreenCallbackShow, IGUIScreenCallbackHide
{
    uint16             CurrentHistoryPosition;
    ButtonListHistory@ ButtonListHistoryDown;
    BtnReserCurrent@   btnReset;

    ScreenHistoryAll( uint16 currentPos )
    {
        CurrentHistoryPosition = currentPos;
    }

    void OnShow( int p0, int p1, int p2 )
    {
        // InitHistoryPlayerBtn();
    }

    void OnHide( int p0, int p1, int p2 )
    {}
}

class ButtonListHistory : IGUIElementCallbackInit, IGUIElementCallbackMouseClick
{
    ScreenHistoryAll@ Instance;
    IGUIElementOpt@   Options;
    bool              Down;

    ButtonListHistory( ScreenHistoryAll & screenHistoryAll, bool down )
    {
        @Instance = screenHistoryAll;
        @Instance.ButtonListHistoryDown = this;
        Down = down;


    }

    void OnInit()
    {}

    void OnMouseClick( int click )
    {
        // Message("GUITestScreenButtonShow::OnMouseClick "+click);
        // ::ShowScreen(CLIENT_SCREEN_HISTORY_VIEW,3,3,3);
        // SaveFastPanel(true);
        Message( "" + Instance.CurrentHistoryPosition );
        if( Down )
        {
            Message( "down" );
            ListBtns( Instance.CurrentHistoryPosition, true );
            Instance.CurrentHistoryPosition < __critterHistoryInfo.length() ? Instance.CurrentHistoryPosition++ : __critterHistoryInfo.length();
        }
        else
        {
            Message( "up" );
            ListBtns( Instance.CurrentHistoryPosition, false );
            Instance.CurrentHistoryPosition > 0 ? Instance.CurrentHistoryPosition-- : 0;
        }
    }


}

class BtnReserCurrent : IGUIElementCallbackMouseClick
{
    ScreenHistoryAll@ Instance;

    BtnReserCurrent( ScreenHistoryAll & instance )
    {
        @Instance = instance;
        @Instance.btnReset = this;
    }

    void OnMouseClick( int click )
    {
        Instance.CurrentHistoryPosition = 0;
        ListBtns( 0, true );
    }
}

void ListBtns( uint16 currentPos, bool down )
{
    Message( "btns init" );
    for( uint8 i = 0; i < playerHistoryBtns.length(); i++ )
    {
        if( i + currentPos < __critterHistoryInfo.length() )
            @playerHistoryBtns[ i ].Text( __critterHistoryInfo[ i + currentPos ], FONT_FALLOUT, COLOR_GREEN, COLOR_GREEN, FT_CENTERXY );
        // else
        // @playerHistoryBtns[i].Text("",FONT_FALLOUT,COLOR_GREEN,COLOR_GREEN,FT_CENTERXY);
    }

    // playerHistoryBtns[currentPos].SetVisible(down ? false : true);
    // playerHistoryBtns[currentPos].SetVisible(!down);
    // playerHistoryBtns[currentPos].UpPic("");
    // playerHistoryBtns[currentPos].DownPic("");
    // playerHistoryBtns[currentPos+HISTORY_BUTTONS_SHOW_COUNT].SetVisible(down);
    // Message(""+playerHistoryBtns[currentPos].GetText());
}

// ////////////

class ButtonShowHistory : IGUIElementCallbackMouseClick
{
    void OnMouseClick( int click )
    {
        // Message("GUITestScreenButtonShow::OnMouseClick "+click);
        ::ShowScreen( CLIENT_SCREEN_HISTORY_ALL, 3, 3, 3 );
        // SaveFastPanel(true);
    }

}

class ScreenHistoryView : IGUIScreenCallbackShow, IGUIScreenCallbackHide
{
    StateBtns@[] StateBtn;
    FractionDropBtn@[] FractionDropBtns;
    TextBox@        TextBoxName;
    TextBox@        TextBoxHistory;
    TextBox@        TextBoxDate;
    TextBox@        TextBoxPsyho;
    TextBox@        TextBoxItems;
    TextBox@        TextBoxChaView;
    SaveHistoryBtn@ SaveHistoryBtn;
    IGUIElementOpt@[] FractionDropBtnsOpt;
    IGUIElementOpt@ TextBoxNameOpt;
    IGUIElementOpt@ TextBoxHistoryOpt;
    IGUIElementOpt@ TextBoxDateOpt;
    IGUIElementOpt@ TextBoxPsyhoOpt;
    IGUIElementOpt@ TextBoxItemsOpt;
    IGUIElementOpt@ TextBoxChaViewOpt;

    uint8           State;
    uint8           CurrentDropPos;

    ScreenHistoryView( uint16 currentPos )
    {
        CurrentDropPos = currentPos;
    }


    void OnShow( int p0, int p1, int p2 )
    {
        // InitHistoryPlayerBtn();
    }

    void OnHide( int p0, int p1, int p2 )
    {}

    void SetState( int state )
    {
        for( uint i = 0; i < StateBtn.length(); i++ )
            StateBtn[ i ].SetState( false );
        StateBtn[ state - 1 ].SetState( true );
        State = state;
    }
}

class StateBtns : IGUIElementCallbackInit, IGUIElementCallbackMouseClick
{
    ScreenHistoryView@ Instance;
    IGUIElementOpt@    Options;
    int                State;

    StateBtns( ScreenHistoryView & instance, int state )
    {
        @Instance = instance;
        // IsSend=isSend;
        State = state;
        // if(isSend)
        @Instance.StateBtn[ State - 1 ] = this;
        // else
        //	@Instance.BroadcastRecv[type-1]=this;
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
    }

    void OnMouseClick( int click )
    {
        if( click == MOUSE_CLICK_LEFT )
            Instance.SetState( State );
    }

    void SetState( bool state )
    {
        Options.Switch( state );
    }
}

class SaveHistoryBtn : IGUIElementCallbackInit, IGUIElementCallbackMouseClick
{
    ScreenHistoryView@ Instance;

    SaveHistoryBtn( ScreenHistoryView & instance )
    {
        @Instance = instance;
        @Instance.SaveHistoryBtn = this;
    }

    void OnInit()
    {}

    void OnMouseClick( int click )
    {
        string name = Instance.TextBoxNameOpt.GetText(),
               history = Instance.TextBoxHistoryOpt.GetText(),
               date = Instance.TextBoxDateOpt.GetText(),
               saveText = "";

        if( name == "" )
        {
            Message( "name not fill" );
            return;
        }
        if( history == "" )
        {
            Message( "history not fill" );
            return;
        }
        string@[] @ dateArr = split( date, "." );
        if( dateArr[ 0 ].length() != 2 || dateArr[ 1 ].length() != 2 || dateArr[ 2 ].length() != 4 )
        {
            Message( "invalid date format. Example xx.xx.xxxx" );
            return;
        }

        saveText = name + "%" + date + "%" + history;
        RunServerScriptUnsafe( "general_unsafe@unsafe_history_save", 0, 0, 0, saveText, null );
    }
}

class FractionDropBtn : IGUIElementCallbackInit, IGUIElementCallbackMouseClick
{
    ScreenHistoryView@ Instance;
    IGUIElementOpt@    Options;
    uint8              Type;
    uint8              Mode;

    FractionDropBtn( ScreenHistoryView & instance, uint8 type )
    {
        @Instance = instance;
        // @Instace.
        Type = type;
        // for(uint8 i = 0; i < Instance.FractionDropBtns.length(); i++)

        @Instance.FractionDropBtns[ type - 1 ] = this;

        // }
    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        @Instance.FractionDropBtnsOpt[ Type - 1 ] = Options;
        // Message(""+Type);
        if( Type > 1 )
        {
            Options.SetVisible( false );
        }
    }

    void OnMouseClick( int click )
    {
        uint8 length = fractionNames.length();
        Message( "" + Instance.CurrentDropPos );
        if( click == MOUSE_CLICK_LEFT )
        {
            if( Type == 1 )
            {
                ShowButtons( Mode == 0 ? true : false );
                Mode = ( Mode == 0 ? 1 : 0 );
                if( Mode == 1 )
                {
                    for( uint8 i = 1; i < Instance.FractionDropBtnsOpt.length(); i++ )
                    {
                        Instance.FractionDropBtnsOpt[ i ].Text( fractionNames[ i - 1 ], FONT_FALLOUT, COLOR_GREEN, COLOR_GREEN, FT_CENTERXY );
                        Message( fractionNames[ i ] );
                    }
                }



            }
        }
        if( click == MOUSE_CLICK_WHEEL_UP )
        {
            if( Instance.CurrentDropPos < length )
            {

                for( uint8 i = 1; i < Instance.FractionDropBtnsOpt.length(); i++ )
                {
                    Instance.FractionDropBtnsOpt[ i + Instance.CurrentDropPos ].Text( fractionNames[ i + Instance.CurrentDropPos ], FONT_FALLOUT, COLOR_GREEN, COLOR_GREEN, FT_CENTERXY );
                    Message( fractionNames[ i + Instance.CurrentDropPos ] );

                }
                Instance.CurrentDropPos++;

            }
        }
        if( click == MOUSE_CLICK_WHEEL_DOWN )
        {
            if( Instance.CurrentDropPos > 0 )
            {

                for( uint8 i = 1; i < Instance.FractionDropBtnsOpt.length(); i++ )
                {

                    Instance.FractionDropBtnsOpt[ Instance.CurrentDropPos + i ].Text( fractionNames[ Instance.CurrentDropPos + i ], FONT_FALLOUT, COLOR_GREEN, COLOR_GREEN, FT_CENTERXY );
                    Message( fractionNames[ i + Instance.CurrentDropPos ] );

                }
                Instance.CurrentDropPos--;

            }
        }
    }

    void ShowButtons( bool show )
    {
        for( uint8 i = 1; i < Instance.FractionDropBtnsOpt.length(); i++ )
        {
            Instance.FractionDropBtnsOpt[ i ].SetVisible( show );
        }
    }
}

class LoadButton : IGUIElementCallbackInit, IGUIElementCallbackMouseClick // , IGUIElementCallbackDraw
{
    uint8 Type;
    LoadButton( /*ScreenHistoryView& screenHistoryView, */ uint8 type )
    {
        //	@Instace = screenHistoryView;
        Type = type;
        /*	switch(type)
                {
                  case TEXT_TYPE_NAME : @Instace.TextBoxName = this; break;
                  case TEXT_TYPE_HISTORY : @Instace.TextBoxHistory = this; break;
                }
         */
    }

    void OnInit()
    {}

    void OnMouseClick( int click )
    {
        if( Type == 0 )
            RunServerScriptUnsafe( "general_unsafe@unsafe_history_load", 0, 0, 0, "", null );
        else if( Type == 1 )
        {
            for( uint16 i = 0; i < __critterHistoryInfo.length(); i++ )
            {
                Message( " i = " + i + " info = " + __critterHistoryInfo[ i ] );
            }
        }
        else if( Type == 2 )
            RunServerScriptUnsafe( "general_unsafe@unsafe_history_load", 2, 0, 0, "", null );
    }
}

class TextBoxButtons : IGUIElementCallbackInit, IGUIElementCallbackMouseClick
{
    IGUIElementOpt@ Options;
    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        playerHistoryBtns.insertLast( Options );
    }

    void OnMouseClick( int click )
    {
        int id = 0;
        StrToInt( Options.GetText(), id );
        RunServerScriptUnsafe( "general_unsafe@unsafe_history_load", 2, id != 0 ? id : 0, 0, "", null );
        ::ShowScreen( CLIENT_SCREEN_HISTORY_VIEW, 0, 0, 0 );
    }

}

class TextBox : IGUIElementCallbackInit, IGUIElementCallbackKeyPress
{
    ScreenHistoryView@ Instance;
    IGUIElementOpt@    Options;
    uint8              Type;

    TextBox( ScreenHistoryView & screenHistoryView, uint8 type )
    {
        @Instance = screenHistoryView;
        Type = type;
        switch( type )
        {
        case TEXT_TYPE_NAME:
            @Instance.TextBoxName = this;
            break;
        case TEXT_TYPE_HISTORY:
            @Instance.TextBoxHistory = this;
            break;
        case TEXT_TYPE_DATE:
            @Instance.TextBoxDate = this;
            break;
        case TEXT_TYPE_CHAVIEW:
            @Instance.TextBoxChaView = this;
            break;
        case TEXT_TYPE_ITEMS:
            @Instance.TextBoxItems = this;
            break;
        case TEXT_TYPE_PSYHO:
            @Instance.TextBoxPsyho = this;
            break;
        default:
            break;
        }

    }

    void OnInit()
    {
        @Options = GUI_GetElementOptions();
        CritterCl@ choo = GetChosen();
        switch( Type )
        {
        case TEXT_TYPE_NAME:
            @Instance.TextBoxNameOpt = Options;
            @HistoryName = Options;
            break;
        case TEXT_TYPE_HISTORY:
            @Instance.TextBoxHistoryOpt = Options;
            @HistoryHistory = Options;
            break;
        case TEXT_TYPE_DATE:
            @Instance.TextBoxDateOpt = Options;
            @HistoryDate = Options;
            break;
        case TEXT_TYPE_CHAVIEW:
            @Instance.TextBoxChaViewOpt = Options;
            @HistoryChaView = Options;
            break;
        case TEXT_TYPE_ITEMS:
            @Instance.TextBoxItemsOpt = Options;
            @HistoryItems = Options;
            break;
        case TEXT_TYPE_PSYHO:
            @Instance.TextBoxPsyhoOpt = Options;
            @HistoryPsyho = Options;
            break;
        default:
            break;
        }
        // if(Type == TEXT_TYPE_NAME && choo.StatBase[ST_ACCESS_LEVEL] < 1)
        // Options.SetVisible(false);
    }



    void OnKeyPress( uint8 key, uint8 letter )
    {
        string@ text = Options.GetText();
        // string@ text2 = ""+key;
        if( text.length() > 0 && text[ text.length() - 1 ] == '\n' )
            text.resize( text.length() - 1 );
        if( ( key == DIK_RETURN || key == DIK_NUMPADENTER ) && ( Type == TEXT_TYPE_HISTORY || Type == TEXT_TYPE_ITEMS || Type == TEXT_TYPE_PSYHO ) )
        {
            text += "\n";
        }
        bool font_tag = false;
        if( Type == TEXT_TYPE_HISTORY || Type == TEXT_TYPE_PSYHO || Type == TEXT_TYPE_CHAVIEW || Type == TEXT_TYPE_ITEMS )
            font_tag = true;
        Options.Text( text, FONT_FALLOUT, COLOR_GREEN, COLOR_GREEN, font_tag ? FT_UPPER : FT_CENTERXY );

    }

}

void InitHistoryAllScreen()
{
    // Main screen
    ScreenHistoryAll screenHistoryAll( 0 );
    GUI_CreateScreen( CLIENT_SCREEN_HISTORY_ALL, "fastpanel_skillbox.png" )
    .CallbackHide( screenHistoryAll )
    .CallbackShow( screenHistoryAll )
    .CloseOnMiss( false )
    .CanMove( true )
    .AutoCursor( true, CURSOR_DEFAULT );

    ButtonListHistory buttonListHistoryDown( screenHistoryAll, true );
    GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_ALL, "chosen_tab.png", 150, 20 )
    .CallbackMouseClick( buttonListHistoryDown )
    .Text( "down", FONT_FALLOUT, COLOR_SAND, COLOR_GREEN, FT_CENTERX | FT_CENTERY );

    ButtonListHistory buttonListHistoryUp( screenHistoryAll, false );
    GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_ALL, "chosen_tab.png", 150, 40 )
    .CallbackMouseClick( buttonListHistoryUp )
    .Text( "up", FONT_FALLOUT, COLOR_SAND, COLOR_GREEN, FT_CENTERX | FT_CENTERY );

    uint16          axist = 0;
    IGUIElementOpt@ tempOpt;
    playerHistoryBtns.resize( 0 );
    for( uint16 i = 0; i < HISTORY_BUTTONS_SHOW_COUNT; i++ )
    {
        TextBoxButtons textBoxButtons;
        @tempOpt = GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_ALL, "chosen_tab.png", 0, 80 + axist )
                   //		.CallbackMouseClick(textBoxButtons)
                   .CallbackMouseClick( textBoxButtons )
                   .CallbackInit( textBoxButtons );
        // .Text("id "+__critterHistoryInfo[i],FONT_FALLOUT,COLOR_SAND, COLOR_GREEN,FT_CENTERX|FT_CENTERY);
        playerHistoryBtns.insertLast( tempOpt );
        axist += 20;
    }

    BtnReserCurrent reset( screenHistoryAll );
    GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_ALL, "chosen_tab.png", 150, 60 )
    .CallbackMouseClick( reset )
    .Text( "reset", FONT_FALLOUT, COLOR_SAND, COLOR_GREEN, FT_CENTERX | FT_CENTERY );


}

void InitHistoryViewScreen() // Export
{
    Message( "mwssage" );
    ButtonShowHistory buttonShowHistory;
    GUI_AddScreenElement( CLIENT_MAIN_SCREEN_GAME, "chosen_tab.png", 150, 40 )
    .CallbackMouseClick( buttonShowHistory )
    .DownPic( "chosen_tab.png" );


    // Main screen
    ScreenHistoryView screenHistoryView;
    GUI_CreateScreen( CLIENT_SCREEN_HISTORY_VIEW, "character_history_menu.png" )
    .CallbackHide( screenHistoryView )
    .CallbackShow( screenHistoryView )
    .CloseOnMiss( false )
    .CanMove( true )
    .AutoCursor( true, CURSOR_DEFAULT );

    TextBox TextboxName( screenHistoryView, TEXT_TYPE_NAME );
    GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_VIEW, "chosen_tab.png", 10, 20 )
    // .Position("RadioChannel")
    .CallbackInit( TextboxName )
    .CallbackKeyPress( TextboxName )
    .TextInput( true, 5, COLOR_LGREEN );

    TextBox TextboxDate( screenHistoryView, TEXT_TYPE_DATE );
    GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_VIEW, "chosen_tab.png", 10, 40 )
    // .Position("RadioChannel")
    .CallbackInit( TextboxDate )
    .CallbackKeyPress( TextboxDate )
    .TextInput( true, 10, COLOR_LGREEN );
    /*
       TextBox TextboxChaView(screenHistoryView, TEXT_TYPE_CHAVIEW);
       GUI_AddScreenElement(CLIENT_SCREEN_HISTORY_VIEW,"chosen_tab.png",10,60)
            //.Position("RadioChannel")
            .CallbackInit(TextboxChaView)
            .CallbackKeyPress(TextboxChaView)
            .TextInput(true,512,COLOR_LGREEN);*/
    /*
       LoadButton loadButton(0);
       GUI_AddScreenElement(CLIENT_SCREEN_HISTORY_VIEW, "chosen_tab.png", 0, 20)
            .CallbackInit(loadButton)
            .CallbackMouseClick(loadButton);
     */
    LoadButton loadButton1( 2 );
    GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_VIEW, "chosen_tab.png", 160, 40 )
    .CallbackInit( loadButton1 )
    .CallbackMouseClick( loadButton1 )
    .Text( "load", FONT_FALLOUT, COLOR_SAND, COLOR_GREEN, FT_CENTERX | FT_CENTERY );


    SaveHistoryBtn saveHistoryBtn( screenHistoryView );
    GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_VIEW, "usegetn.frm", 650, 400 )
    .CallbackInit( saveHistoryBtn )
    .CallbackMouseClick( saveHistoryBtn )
    .DownPic( "usegeth.frm" )
    .Text( "save", FONT_FALLOUT, COLOR_SAND, COLOR_GREEN, FT_CENTERX | FT_CENTERY );

    uint16 axist = 265;
    screenHistoryView.FractionDropBtns.resize( 5 );
    screenHistoryView.FractionDropBtnsOpt.resize( 5 );

    for( uint8 i = 1; i <= 5; i++ )
    {
        FractionDropBtn fractionDropBtn( screenHistoryView, i );
        GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_VIEW, "chosen_tab.png", 220, axist )
        // .Position("RadioBroadcastSend"+i)
        .CallbackInit( fractionDropBtn )
        .CallbackMouseClick( fractionDropBtn )
        .DownPic( "chosen_tab.png" );

        i == 1 ? axist += 33 : axist += 20;
    }

    screenHistoryView.StateBtn.resize( 3 );
    for( uint i = 1; i <= 3; i++ )
    {
        StateBtns stateBtn( screenHistoryView, i );
        GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_VIEW, "town_view_gm.png", 150, i * 15 )
        // .Position("RadioBroadcastSend"+i)
        .CallbackInit( stateBtn )
        .CallbackMouseClick( stateBtn )
        .DownPic( "town_view_gm_dn.png" );

        /*GUI_AddScreenElement(CLIENT_SCREEN_FASTPANEL_TEXTBOX,null,-190,-290+(i*15))
                .Text(GetMsgStr(TEXTMSG_GAME,STR_FAST_SAY+i-1),FONT_FALLOUT,COLOR_SAND,0,FT_CENTERX|FT_CENTERY|FT_BORDERED);*/
        /*
                //////text
           GUI_AddScreenElement(CLIENT_SCREEN_HISTORY_VIEW,"chosen_tab.png",120, 20)
                .Text("<- name",FONT_FALLOUT,COLOR_SAND,0,FT_CENTERX|FT_CENTERY|FT_BORDERED);

           GUI_AddScreenElement(CLIENT_SCREEN_HISTORY_VIEW,"chosen_tab.png",120, 40)
                .Text("<- date",FONT_FALLOUT,COLOR_SAND,0,FT_CENTERX|FT_CENTERY|FT_BORDERED);

           GUI_AddScreenElement(CLIENT_SCREEN_HISTORY_VIEW,"chosen_tab.png",120, 60)
                .Text("<- cha desc",FONT_FALLOUT,COLOR_SAND,0,FT_CENTERX|FT_CENTERY|FT_BORDERED);
         */
    }

// textbox_history
    GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_VIEW, "textbox_history_up.png", 358, 80 );
    GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_VIEW, "textbox_history_dn.png", 358, 376 );
    GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_VIEW, "textbox_history_lt.png", 358, 80 );
    GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_VIEW, "textbox_history_rt.png", 685, 80 );

    TextBox TextboxHistory( screenHistoryView, TEXT_TYPE_HISTORY );
    GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_VIEW, "textbox_history_text.png", 362, 85 )
    // .Position("RadioChannel")
    .CallbackInit( TextboxHistory )
    .CallbackKeyPress( TextboxHistory )
    .TextInput( true, 1024, COLOR_LGREEN );

// textbox_chaview
    GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_VIEW, "textbox_history_up.png", 10, 80 );
    GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_VIEW, "textbox_history_dn.png", 10, 160 );
    GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_VIEW, "textbox_chaview_lt.png", 10, 80 );
    GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_VIEW, "textbox_chaview_rt.png", 340, 80 );

    TextBox TextboxChaView( screenHistoryView, TEXT_TYPE_CHAVIEW );
    GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_VIEW, "textbox_chaview_text.png", 18, 84 )
    // .Position("RadioChannel")
    .CallbackInit( TextboxChaView )
    .CallbackKeyPress( TextboxChaView )
    .TextInput( true, 512, COLOR_LGREEN );

// textbox_psyho
    GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_VIEW, "textbox_history_up.png", 10, 170 );
    GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_VIEW, "textbox_history_dn.png", 10, 250 );
    GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_VIEW, "textbox_chaview_lt.png", 10, 170 );
    GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_VIEW, "textbox_chaview_rt.png", 340, 170 );

    TextBox TextboxPsyho( screenHistoryView, TEXT_TYPE_PSYHO );
    GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_VIEW, "textbox_chaview_text.png", 18, 174 )
    // .Position("RadioChannel")
    .CallbackInit( TextboxPsyho )
    .CallbackKeyPress( TextboxPsyho )
    .TextInput( true, 512, COLOR_LGREEN );

// textbox_items
    GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_VIEW, "textbox_items_up.png", 10, 265 );
    GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_VIEW, "textbox_items_dn.png", 10, 376 );
    GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_VIEW, "textbox_items_lt.png", 10, 265 );
    GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_VIEW, "textbox_items_rt.png", 208, 265 );

    TextBox TextboxItems( screenHistoryView, TEXT_TYPE_ITEMS );
    GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_VIEW, "textbox_items_text.png", 18, 269

                          )
    // .Position("RadioChannel")
    .CallbackInit( TextboxItems )
    .CallbackKeyPress( TextboxItems )
    .TextInput( true, 512, COLOR_LGREEN );

}

void InitHistoryPlayerBtn()
{
    uint16          axist = 0;
    IGUIElementOpt@ tempOpt;
    // playerHistoryBtns.resize(0);
    for( uint16 i = 0; i < __critterHistoryInfo.length(); i++ )
    {
        TextBoxButtons textBoxButtons;
        GUI_AddScreenElement( CLIENT_SCREEN_HISTORY_ALL, "chosen_tab.png", 0, 80 + axist )
        .CallbackInit( textBoxButtons )
        .Text( "id " + __critterHistoryInfo[ i ], FONT_FALLOUT, COLOR_SAND, COLOR_GREEN, FT_CENTERX | FT_CENTERY );

        axist += 20;
    }
}


// //////////////////////////////

void LoadList( int length, int param1, int param2, string@ param3, int[] @ param4 )
{
    if( __critterHistoryInfo.length() != uint( length ) )
    {
        RunServerScriptUnsafe( "general_unsafe@unsafe_history_load", 1, 0, 0, "", null );
    }
}

void LoadListHistory( int p0, int p1, int p2, string@ fileText, int[] @ p4 )
{
    // Message(fileText);
    string line = "";
    uint8  ch;
    if( p0 == 0 )
    {
        __critterHistoryInfo.resize( 0 );
        string@[] @ test = split( fileText, "\n" );


        for( uint16 i = 0; i < test.length(); i++ )
        {
            // Message(test[i]);
            __critterHistoryInfo.insertLast( test[ i ] );
            // Message(__critterHistoryInfo[i]);
        }
        Message( "history list loaded" );

    }
    else if( p0 == 1 )
    {
        string@[] @ test = split( fileText, "%" );
        Message( "" + test[ 0 ] );
        HistoryName.Text( test[ 0 ], FONT_FALLOUT, COLOR_GREEN, COLOR_GREEN, FT_CENTERXY );
        HistoryDate.Text( test[ 1 ], FONT_FALLOUT, COLOR_GREEN, COLOR_GREEN, FT_CENTERXY );
        HistoryHistory.Text( test[ 2 ], FONT_FALLOUT, COLOR_GREEN, COLOR_GREEN, FT_UPPER );
    }
}
