

bool LocIsModoc(uint locPid)
{
	return(locPid<=(1253));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(32)||locPid==(1216)||locPid==(43)||locPid==96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(42));
}

bool LocIsHidden(uint locPid)
{
	return false;
}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

shared interface Project
{
	string@get_Name();
	void Build();
	void SetAssociation(string@ex,string@className,string@classModule);
}

shared interface FileObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	void FormatStringData(string&nameData,string&data);
	FileObject@get_Pattern(string&name)const;
	FileObject@get_Copy(string&name);                           
	
}

shared class TimeLog
{
	uint tick;
	
	TimeLog()
	{
		refresh();
	}
	
	void refresh()
	{
		tick=GetTick();
	}
	
	bool check(uint count)
	{
		return(GetTick()-tick>=count);
	}
	
	uint get()
	{
		uint old=tick;
		refresh();
		return(tick-old);
	}
	
	void Log(string&in message)
	{
		::ClearLog(message+" ["+(GetTick()-tick)+"ms]");
	}
}

shared interface AnyDataObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	uint[]@get_SaveData();
	void InitData(uint[]&data);
}

shared interface ManagerObject
{
	FileObject@get_ProtoObject(string@name);
	void ParseProtoTypes(const string&ex,const FileObject&pattern,const string@search);
	FileObject@ParseProtoTypeFile(string&name,const string&ex,const FileObject&pattern,const string@search);
	FileObject@AddPrototype(FileObject@proto);
	FileObject@StringToFileObject(string&name,string&txt,const FileObject&pattern);
}

shared interface ValueAPI{}
shared class SettingsAPI
{
	string Name;
	bool IsDebug;
}                                                  

shared class Hexagonal
{
	Hexagonal(){Reset();}
	Hexagonal(const uint16&in x,const uint16&in y){Set(x,y);}
	Hexagonal(const Hexagonal&master){Set(master);}                                       
	
	void Set(const uint16&in x,const uint16&in y){X=x;Y=y;}
	void Set(const Hexagonal&in other){Set(other.X,other.Y);}
	void Reset(){X=Y=0;}
	uint Distantion(Hexagonal&other){return GetDistantion(X,Y,other.X,other.Y);}
	
	uint16 X;
	uint16 Y;
	
	bool opEquals(const Hexagonal&in other){return(other.X==X&&other.Y==Y);}
	Hexagonal&opAssign(const Hexagonal&in other)
	{
		Set(other);
		return this;
	}
	
	const uint get_UID(const uint w)const{return X+Y*w;}
	string get_Debug(){return"X:"+X+"Y:"+Y;}
	void Log(string&str){::Log(str+":"+Debug);}
}                            

shared class Line
{
	Line(Hexagonal&a,Hexagonal&b){@A=a;@B=b;}
	
	uint get_Length()
	{
		return B.Distantion(A);
	}
	
	uint get_Point(Hexagonal&point)
	{
		return B.Distantion(point);
	}
	
	float get_Module(Hexagonal&point)
	{
		return Point[point]/Length;
	}
	
	Hexagonal@get_opIndex(const uint&in size)
	{
		
		const float mod=float(size/Length);
		return@Hexagonal(A.X+(B.X-A.X)*mod,A.Y+(B.Y-A.Y)*mod);
	}                      
	
	string get_Debug(){return"A<"+A.Debug+">B<"+B.Debug+">";}
	void Log(string&str){::Log(str+":"+Debug);}
	
	Hexagonal@A;
	Hexagonal@B;
}                                                                                                                                        

const uint[]skin_supermute=
{
	(21),
	(20),
	(114),
	(170),
};
const uint[]skin_robot=
{
	(66),
	(53),
	(54),
	(90),
	(101),
	(17),
};     

bool critter_check_move_item(CritterCl&cr,ItemCl&item,uint8 toSlot,ItemCl@itemSwap)
{
	if(item.Proto.Type==15)return true;
	int fromSlot=item.CritSlot;
	const uint16 pid=item.GetProtoId();
	
	if((pid>=(692)&&pid<=(694)&&toSlot!=(1)&&fromSlot==(1))||
	(pid==(1537)&&(toSlot!=(2)&&(fromSlot==(2)||fromSlot==(1)))))
	{ 
		
		Message((3),12945);
		
		return false;
	}
	
	bool moveFreeze=false,
	dropFreeze=false;
	
	if(cr.Stat[(67)]>4&&cr.Stat[(67)]<10||cr.Stat[(67)]>10)
	{
		moveFreeze=true;
		dropFreeze=true;
	} 
	
	if(toSlot==(255))
	return!dropFreeze; 
	
	if(@itemSwap!is null)
	{
		const uint16 swapPid=itemSwap.GetProtoId();
		if((swapPid==(1537)&&toSlot==(2))||(swapPid>=(692)&&swapPid<=(694)&&toSlot==(1)))
		return false;
	}
	
	bool handsSwap=((fromSlot==(1)&&toSlot==(2))||(fromSlot==(2)&&toSlot==(1)));
	if((@itemSwap!=null)&&!handsSwap)
	return false;
	
	if(moveFreeze&&!handsSwap)
	return false; 
	
	if(toSlot==(1))
	{
		if(item.GetType()==(3)&&!IsCritterAnim1(cr.CrType,item.Proto.Weapon_Anim1))
		return false;
	} 
	
	if(toSlot==(3))
	{
		if(item.GetType()!=(1))
		return false;
		if(item.Proto.Slot!=(0))
		return false;   
		
		uint16 pid=item.GetProtoId();
		uint16 skin=cr.Stat[(112)];
		if(skin==0)
		skin=(cr.Stat[(71)]==(0)?((62)):((61)));
		bool isMutePlayer=skin_supermute.find(skin)!=-1,
		isRoboPlayer=skin_robot.find(skin)!=-1,
		isMuteArmor=pid==592||pid==593;
		if(isRoboPlayer||isMutePlayer!=isMuteArmor)
		return false;
	} 
	
	if(toSlot>(3))
	{
		if(toSlot!=item.Proto.Slot)
		return false;
	} 
	
	return true;
}                                                                                                                                                                                                                                                                                                                                        

