

bool LocIsModoc(uint locPid)
{
	return(locPid<=(1253));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(32)||locPid==(1216)||locPid==(43)||locPid==96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(42));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

shared interface Project
{
	string@get_Name();
	void Build();
	void SetAssociation(string@ex,string@className,string@classModule);
}

shared interface FileObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	void FormatStringData(string&nameData,string&data);
	FileObject@get_Pattern(string&name)const;
	FileObject@get_Copy(string&name); 
	
	void set_GlobalData(string@name,string@value);          
	
	string@get_GlobalData(string@name);            
	
}

shared class TimeLog
{
	uint tick;
	
	TimeLog()
	{
		refresh();
	}
	
	void refresh()
	{
		tick=GetTick();
	}
	
	bool check(uint count)
	{
		return(GetTick()-tick>=count);
	}
	
	uint get()
	{
		uint old=tick;
		refresh();
		return(tick-old);
	}
	
	void Log(string&in message)
	{
		::ClearLog(message+" ["+(GetTick()-tick)+"ms]");
	}
}

shared interface AnyDataObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	uint[]@get_SaveData();
	void InitData(uint[]&data);
}

shared interface ManagerObject
{
	FileObject@get_ProtoObject(string@name);
	void ParseProtoTypes(const string&ex,const FileObject&pattern,const string@search);
	FileObject@ParseProtoTypeFile(string&name,const string&ex,const FileObject&pattern,const string@search);
	FileObject@AddPrototype(FileObject@proto);
	FileObject@StringToFileObject(string&name,string&txt,const FileObject&pattern);
}

shared interface ValueAPI{}
shared class SettingsAPI
{
	string Name;
	bool IsDebug;
} 

shared class GlobalData
{
	uint Hash;
	string Value;
	
	GlobalData(string@name)
	{
		Hash=GetStrHash(name);
		Value="";
	} 
	
	void SaveData(uint[]&outArray,uint&position)
	{
		uint len=Value.length();
		
		outArray.resize(position+2+len/2);
		
		outArray[position++]=Hash;
		outArray[position++]=len;
		
		for(uint i=0;i<len;i++)
		{
			outArray[position]|=Value[i++]<<24;
			outArray[position]|=Value[i++]<<16;
			outArray[position]|=Value[i++]<<8;
			outArray[position++]|=Value[i];
		}
	} 
	
	void LoadData(uint[]&in outArray,uint&position)
	{
		Hash=outArray[position++];
		uint len=outArray[position++];
		Value.resize(len);
		
		for(uint i=0;i<len;i++)
		{
			Value[i++]=(outArray[position]>>24)&0xFF;
			Value[i++]=(outArray[position]>>16)&0xFF;
			Value[i++]=(outArray[position]>>8)&0xFF;
			Value[i]=outArray[position++]&0xFF;
			
		}
	}
} 

shared class Hexagonal
{
	Hexagonal(){Reset();}
	Hexagonal(const uint16&in x,const uint16&in y){Set(x,y);}
	Hexagonal(const Hexagonal&master){Set(master);}
	
	Hexagonal(const Critter&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Item&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Scenery&master){Set(master.HexX,master.HexY);}
	
	bool Entire(Map&map,int entNum){return map.GetEntireCoords(entNum,0,X,Y);}
	bool IsPassed(Map&map){return ValidPosition(map)&&map.IsHexPassed(X,Y);}
	bool IsPassed(Map&map,Hexagonal&begin,Hexagonal&end){return ValidPosition(map,begin,end)&&map.IsHexPassed(X,Y);}
	
	bool ValidPosition(Map&map)
	{
		Hexagonal end,begin;
		if(end.Entire(map,0)&&begin.Entire(map,255))
		return ValidPosition(map,begin,end);
		return false;
	}
	
	bool ValidPosition(Map&map,Hexagonal&begin,Hexagonal&end)
	{
		return(X>=begin.X&&Y>=begin.Y
		&&X<=end.X&&Y<=end.Y);
	}
	
	bool Transit(Critter&critter,Map&map){return Transit(critter,map,critter.Dir);}
	bool Transit(Critter&critter,Map&map,uint8 direction)
	{
		if(!IsPassed(map))return false;
		return critter.TransitToMap(map.Id,X,Y,direction);
	}
	
	bool Transit(Critter&critter,uint mapId){return Transit(critter,mapId,critter.Dir);}
	bool Transit(Critter&critter,uint mapId,uint8 direction)
	{
		if(mapId==0)return false;
		Map@map=GetMap(mapId);
		if(@map is null)return false;
		return Transit(critter,map,direction);
	} 
	
	void Set(const uint16&in x,const uint16&in y){X=x;Y=y;}
	void Set(const Hexagonal&in other){Set(other.X,other.Y);}
	void Reset(){X=Y=0;}
	uint Distantion(Hexagonal&other){return GetDistantion(X,Y,other.X,other.Y);}
	
	uint16 X;
	uint16 Y;
	
	bool opEquals(const Hexagonal&in other){return(other.X==X&&other.Y==Y);}
	Hexagonal&opAssign(const Hexagonal&in other)
	{
		Set(other);
		return this;
	}
	
	const uint get_UID(const uint w)const{return X+Y*w;}
	string get_Debug(){return"X:"+X+"Y:"+Y;}
	void Log(string&str){::Log(str+":"+Debug);}
}    

shared class MapHash
{
	MapHash(const uint16&in protoId)
	{
		ProtoId=protoId;
		@Min=null;
		@Max=null;
	}
	
	MapHash&opAssign(Map&map)
	{
		@Min=Hexagonal(0,0);
		@Max=Hexagonal(0,0);
		map.GetEntireCoords(0,0,Max.X,Max.Y);
		map.GetEntireCoords((255),0,Min.X,Min.Y);
		return this;
	}
	
	uint16 ProtoId;
	Hexagonal@Min;
	Hexagonal@Max;
} 

shared class Line
{
	Line(Hexagonal&a,Hexagonal&b){@A=a;@B=b;}
	
	uint get_Length()
	{
		return B.Distantion(A);
	}
	
	uint get_Point(Hexagonal&point)
	{
		return B.Distantion(point);
	}
	
	float get_Module(Hexagonal&point)
	{
		return Point[point]/Length;
	}
	
	Hexagonal@get_opIndex(const uint&in size)
	{
		
		const float mod=float(size/Length);
		return@Hexagonal(A.X+(B.X-A.X)*mod,A.Y+(B.Y-A.Y)*mod);
	} 
	
	Line(Map&map,uint16 grid,MapHash@hash)
	{
		if(@hash is null)
		{
			Hexagonal min,max;
			map.GetTransferParams(min.X,min.Y,max.X,max.Y,grid);
			
			@A=@Hexagonal(min.X,min.Y);
			@B=@Hexagonal(max.X,max.Y);
		}
		else
		{
			if(@hash.Min is null||@hash.Max is null)
			map.GetTransferParams(hash.Min.X,hash.Min.Y,hash.Max.X,hash.Max.Y,grid);
			
			@A=@Hexagonal(hash.Min.X,hash.Min.Y);
			@B=@Hexagonal(hash.Max.X,hash.Max.Y);
		}
	} 
	
	string get_Debug(){return"A<"+A.Debug+">B<"+B.Debug+">";}
	void Log(string&str){::Log(str+":"+Debug);}
	
	Hexagonal@A;
	Hexagonal@B;
}  

import MapHash@GetMapHash(const uint16&in pid)from"world";
import uint CreateLocation(Hexagonal&coordinate,uint16 locationPid)from"world"; 

import ManagerObject@get_objectManager()from"world"; 

import EventTree@get_EventRoot()from"world"; 

import Project@CreateProject(string@name,string@path)from"main";
import Project@get_Project(string@name)from"main

class CWaypoint
{
	
	Item@Waypoint;    
	
	uint[]Waypoints;
	uint[]Groups;
	
	CWaypoint(){}
	
	CWaypoint(Item&waypoint)    
	
	{
		@Waypoint=waypoint;
		
		Waypoints.resize(5);
		Groups.resize(5);
		
		Waypoints[0]=waypoint.Val0;
		Waypoints[1]=waypoint.Val2;
		Waypoints[2]=waypoint.Val4;
		Waypoints[3]=waypoint.Val6;
		Waypoints[4]=waypoint.Val8;
		
		Groups[0]=waypoint.Val1;
		Groups[1]=waypoint.Val3;
		Groups[2]=waypoint.Val5;
		Groups[3]=waypoint.Val7;
		Groups[4]=waypoint.Val9;
	}
	
	void SaveWaypoint()
	{
		Waypoint.Val0=Waypoints[0];
		Waypoint.Val2=Waypoints[1];
		Waypoint.Val4=Waypoints[2];
		Waypoint.Val6=Waypoints[3];
		Waypoint.Val8=Waypoints[4];
		
		Waypoint.Val1=Groups[0];
		Waypoint.Val3=Groups[1];
		Waypoint.Val5=Groups[2];
		Waypoint.Val7=Groups[3];
		Waypoint.Val9=Groups[4];
		
		Waypoint.Update();
	}
	
	void SetWaypoints(uint[]waypoints)
	{
		Waypoints=waypoints;
	}
	
	void SetGroups(uint[]groups)
	{
		Groups=groups;
	}
	
	void SetWaypointId(uint8 wayNum,uint id)
	{
		Waypoints[wayNum]=id;
	}
	
	void SetWaypointGroupFlag(uint8 wayNum,uint flag,bool set)
	{
		set?(Groups[wayNum]=(Groups[wayNum])|(flag)):(Groups[wayNum]=((Groups[wayNum])&(~(flag))));
	}
	
	void ChangeWaypointGroupFlag(uint8 wayNum,uint flag)
	{
		SetWaypointGroupFlag(wayNum,flag,IsWaypointGroupFlag(wayNum,flag));
	}  
	
	uint GetWaypointId()
	{
		return Waypoint.Id;
	}
	
	bool IsWaypointGroupFlag(uint8 wayNum,uint flag)
	{
		return(((Groups[wayNum])&(flag))!=0);
	}
	
	int GetFirstWaypointIndex(uint flag)
	{
		for(uint8 i=0,j=Groups.length();i<j;++i)
		{
			if(IsWaypointGroupFlag(i,flag))
			{
				return i;
			}
		}
		
		return-1;
	}
	
	uint GetNextWaypointId(Critter&cr)
	{     
		
		uint type=cr.StatBase[(129)];
		
		int index=GetFirstWaypointIndex(type);
		
		if(index!=-1)
		{
			return Waypoints[index];
		}
		
		return 0;
	}
	
	bool GetNextWaypointHex(Critter&cr,uint16&hexX,uint16&hexY)
	{
		uint id=GetNextWaypointId(cr);
		Item@waypoint=GetItem(id);        
		
		if(waypoint is null)
		return false;
		
		hexX=waypoint.HexX;
		hexY=waypoint.HexY;
		return true;
	}
	
	bool GetAllWaypointsId(Critter&cr,uint[]&ids)
	{      
		
		uint flag=cr.StatBase[(129)];
		uint[]tempIds;
		
		for(uint8 i=0,j=Groups.length();i<j;++i)
		{
			if(IsWaypointGroupFlag(i,flag))
			{
				tempIds.insertLast(Waypoints[i]);
			}
		}
		
		ids=tempIds;
		
		return true;
	} 
	
	bool GetAllWaypointsHex(Critter&cr,uint16[]&hexX,uint16[]&hexY)
	{      
		
		uint flag=cr.StatBase[(129)];
		
		uint16[]tempHexX;
		uint16[]tempHexY;
		
		for(uint8 i=0,j=Groups.length();i<j;++i)
		{
			if(IsWaypointGroupFlag(i,flag))
			{
				
				Item@waypoint=GetItem(Waypoints[i]);    
				
				if(waypoint is null)
				continue;
				
				tempHexX.insertLast(waypoint.HexX);
				tempHexY.insertLast(waypoint.HexY);
				
			}
		}
		
		hexX=tempHexX;
		hexY=tempHexY;
		
		return true;
	}
}         

void unsafe_SaveWaypointInfo(Critter&player,int id,int param1,int param2,string@param3,int[]@param4)
{
	uint[]waypoints,groups;
	
	for(uint8 i=0;i<(5);++i)
	{
		waypoints.insertLast(param4[i*2]);
		groups.insertLast(param4[i*2+1]);
	}
	
	Item@item=GetItem(id);
	if(item is null)
	return;
	
	CWaypoint@waypoint=CWaypoint(item);
	if(waypoint is null)
	return;
	
	waypoint.SetWaypoints(waypoints);
	waypoint.SetGroups(groups);
	
	waypoint.SaveWaypoint();
	
	Log("done");
}                                                                                                                                                                                                                                                                                                                                                                                                                              

