#include "_macros.fos"
#include "qmap_defines.fos"

// Export:
// import uint8 checkWater(Map& map, uint16 tx, uint16 ty) from "qmap_water";
// import uint8 checkWaterAround(Map& map, uint16 tx, uint16 ty, uint8 coast_flags) from "qmap_water";
// import uint8 checkWaterAround(Map& map, uint16 tx, uint16 ty, uint8 coast_flags, uint8 radius) from "qmap_water";
// import uint8 checkWaterAround(Map& map, uint16 tx, uint16 ty, uint8 coast_flags, uint8 radius, bool smartRadius) from "qmap_water";

bool hashes_inited = false;

uint[][] hashes_water( 5 );

void init_hashes()
{
    string dir = "art/tiles/",
           seas0 = "seas0",
           SHORE = "SHORE",
           shor = "shor",
           frm = ".frm";

    uint[] @ data = null;

    @data = hashes_water[ HASHES_WATER_WEST ];
    data.resize( 0 );
    for( uint i = 1; i <= 3; i++ )
        data.insertLast( GetStrHash( dir + shor + "0" + i + frm ) );

    @data = hashes_water[ HASHES_WATER_NORTH ];
    data.resize( 0 );
    for( uint i = 1; i <= 9; i++ )
        data.insertLast( GetStrHash( dir + seas0 + i + frm ) );

    @data = hashes_water[ HASHES_WATER_EAST ];
    data.resize( 0 );

    @data = hashes_water[ HASHES_WATER_SOUTH ];
    data.resize( 0 );

    @data = hashes_water[ HASHES_WATER_SIMPLE ];
    data.resize( 0 );
    for( uint i = 8; i <= 10; i++ )
        data.insertLast( GetStrHash( dir + SHORE + ( ( i < 10 ) ? "0" : "" ) + i + frm ) );
    for( uint i = 12; i <= 14; i++ )
        data.insertLast( GetStrHash( dir + shor + i + frm ) );
    for( uint i = 23; i <= 26; i++ )
        data.insertLast( GetStrHash( dir + shor + i + frm ) );

    data.insertLast( GetStrHash( dir + "slime05.png" ) );
    data.insertLast( GetStrHash( dir + "slime06.png" ) );
    data.insertLast( GetStrHash( dir + "slime09.png" ) );
    data.insertLast( GetStrHash( dir + "slime10.png" ) );

    hashes_inited = true;
}

// проверка наличия воды на ближайших тайлах
uint8 checkWaterAround( Map& map, uint16 tx, uint16 ty, uint8 coast_flags )
{
    return checkWaterAround( map, tx, ty, coast_flags, 1, false );
}
uint8 checkWaterAround( Map& map, uint16 tx, uint16 ty, uint8 coast_flags, uint8 radius )
{
    return checkWaterAround( map, tx, ty, coast_flags, radius, false );
}

uint8 checkWaterAround( Map& map, uint16 tx, uint16 ty, uint8 coast_flags, uint8 radius, bool smartRadius )
{
    if( !hashes_inited )
        init_hashes();

    if( coast_flags & COAST_IN_CORNER != 0 || radius < 1 )
        return 0;

    uint[] @[] datas( 2 );
    @datas[ 1 ] = hashes_water[ HASHES_WATER_SIMPLE ];

    int8 answer = 0;

    // int8[] queue={0, 3, 1, 2};

    for( uint t = 1; t <= radius; t++ )
        for( int i = 0; i < 4; i++ )
        {
            // i = queue[ii];

            if( ( coast_flags & ( 0x1 << i ) ) == 0 || ( smartRadius && t == radius && ( i == 1 || i == 2 ) ) )
                continue;

            uint thash = map.GetTile( tx + ( ( abs( 2 - i ) ) - 1 ) * t, ty + ( ( abs( i - 1 ) ) - 1 ) * t );

            if( thash == 0 )
                continue;

            @datas[ 0 ] = hashes_water[ i ];

            for( uint p = 0; p < 2; p++ )
            {
                for( uint k = 0, len = datas[ p ].length(); k < len; k++ )
                {
                    if( datas[ p ][ k ] != thash )
                        continue;
                    answer |= ( ( 0x01 ) << i );
                    return answer;
                }
            }
        }
    return 0;
}

uint8 checkWater( Map& map, uint16 tx, uint16 ty )
{
    if( !hashes_inited )
        init_hashes();

    uint hash = map.GetTile( tx, ty );
    if( hash == 0 )
        return 0;

    uint8 answer = 0;
    uint[] @ data = null;

    for( uint i = 0; i < 5; i++ )
    {
        @data = hashes_water[ i ];
        for( uint k = 0, len = data.length(); k < len; k++ )
        {
            if( hash != data[ k ] )
                continue;
            if( i != 4 )
                answer |= ( ( 0x01 ) << i );
            else
                answer |= 0xF;
            return answer;
        }
    }
    return 0;
}
