

bool LocIsModoc(uint locPid)
{
	return(locPid<=(1253));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(32)||locPid==(1216)||locPid==(43)||locPid==96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(42));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

shared interface Project
{
	string@get_Name();
	void Build();
	void SetAssociation(string@ex,string@className,string@classModule);
}

shared interface FileObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	void FormatStringData(string&nameData,string&data);
	FileObject@get_Pattern(string&name)const;
	FileObject@get_Copy(string&name);                           
	
}

shared class TimeLog
{
	uint tick;
	
	TimeLog()
	{
		refresh();
	}
	
	void refresh()
	{
		tick=GetTick();
	}
	
	bool check(uint count)
	{
		return(GetTick()-tick>=count);
	}
	
	uint get()
	{
		uint old=tick;
		refresh();
		return(tick-old);
	}
	
	void Log(string&in message)
	{
		::ClearLog(message+" ["+(GetTick()-tick)+"ms]");
	}
}

shared interface AnyDataObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	uint[]@get_SaveData();
	void InitData(uint[]&data);
}

shared interface ManagerObject
{
	FileObject@get_ProtoObject(string@name);
	void ParseProtoTypes(const string&ex,const FileObject&pattern,const string@search);
	FileObject@ParseProtoTypeFile(string&name,const string&ex,const FileObject&pattern,const string@search);
	FileObject@AddPrototype(FileObject@proto);
	FileObject@StringToFileObject(string&name,string&txt,const FileObject&pattern);
}

shared interface ValueAPI{}
shared class SettingsAPI
{
	string Name;
	bool IsDebug;
}                                                  

shared class Hexagonal
{
	Hexagonal(){Reset();}
	Hexagonal(const uint16&in x,const uint16&in y){Set(x,y);}
	Hexagonal(const Hexagonal&master){Set(master);}                                       
	
	void Set(const uint16&in x,const uint16&in y){X=x;Y=y;}
	void Set(const Hexagonal&in other){Set(other.X,other.Y);}
	void Reset(){X=Y=0;}
	uint Distantion(Hexagonal&other){return GetDistantion(X,Y,other.X,other.Y);}
	
	uint16 X;
	uint16 Y;
	
	bool opEquals(const Hexagonal&in other){return(other.X==X&&other.Y==Y);}
	Hexagonal&opAssign(const Hexagonal&in other)
	{
		Set(other);
		return this;
	}
	
	const uint get_UID(const uint w)const{return X+Y*w;}
	string get_Debug(){return"X:"+X+"Y:"+Y;}
	void Log(string&str){::Log(str+":"+Debug);}
}                            

shared class Line
{
	Line(Hexagonal&a,Hexagonal&b){@A=a;@B=b;}
	
	uint get_Length()
	{
		return B.Distantion(A);
	}
	
	uint get_Point(Hexagonal&point)
	{
		return B.Distantion(point);
	}
	
	float get_Module(Hexagonal&point)
	{
		return Point[point]/Length;
	}
	
	Hexagonal@get_opIndex(const uint&in size)
	{
		
		const float mod=float(size/Length);
		return@Hexagonal(A.X+(B.X-A.X)*mod,A.Y+(B.Y-A.Y)*mod);
	}                      
	
	string get_Debug(){return"A<"+A.Debug+">B<"+B.Debug+">";}
	void Log(string&str){::Log(str+":"+Debug);}
	
	Hexagonal@A;
	Hexagonal@B;
}                                                                                                                                        

bool PerkCheck(CritterCl&cr,uint perk)
{     
	
	switch(perk)
	{
		
		case(301):
		return(cr.ParamBase[(301)]<1&&cr.ParamBase[(77)]>=3&&cr.ParamBase[(1)]>=5);
		case(343):
		return(cr.ParamBase[(343)]<1&&cr.ParamBase[(77)]>=3&&cr.ParamBase[(4)]>=1);
		case(300):
		return(cr.ParamBase[(300)]<1&&cr.ParamBase[(77)]>=3&&cr.ParamBase[(4)]>=4);
		case(302):
		return(cr.ParamBase[(302)]<1&&cr.ParamBase[(77)]>=12&&cr.ParamBase[(5)]>=6);
		case(303):
		return(cr.ParamBase[(303)]<6&&cr.ParamBase[(77)]>=3&&cr.ParamBase[(5)]>=6&&cr.ParamBase[(0)]>=6);
		case(304):
		return(cr.ParamBase[(304)]<2&&cr.ParamBase[(77)]>=6&&cr.ParamBase[(5)]>=5);
		case(305):
		return(cr.ParamBase[(305)]<2&&cr.ParamBase[(77)]>=6&&cr.ParamBase[(5)]>=6&&cr.ParamBase[(6)]>=6);
		case(306):
		return(cr.ParamBase[(306)]<1&&cr.ParamBase[(77)]>=12&&cr.ParamBase[(5)]>=7&&cr.ParamBase[(4)]>=6&&cr.ParamBase[(1)]>=6);
		case(307):
		return(cr.ParamBase[(307)]<3&&cr.ParamBase[(77)]>=3&&cr.ParamBase[(1)]>=6);
		case(308):
		return(cr.ParamBase[(308)]<3&&cr.ParamBase[(77)]>=3&&cr.ParamBase[(2)]>=6);
		case(309):
		return(cr.ParamBase[(309)]<0&&cr.ParamBase[(77)]>=6&&cr.ParamBase[(6)]>=6);
		case(312):
		return(cr.ParamBase[(312)]<2&&cr.ParamBase[(77)]>=6&&cr.ParamBase[(2)]>=6&&cr.ParamBase[(4)]>=4);
		case(313):
		return(cr.ParamBase[(313)]<2&&cr.ParamBase[(77)]>=3&&cr.ParamBase[(2)]>=8&&cr.ParamBase[(0)]>=8);
		case(314):
		return(cr.ParamBase[(314)]<3&&cr.ParamBase[(77)]>=3&&cr.ParamBase[(0)]>=6&&cr.ParamBase[(2)]>=6);
		case(315):
		return(cr.ParamBase[(315)]<1&&cr.ParamBase[(77)]>=9&&cr.ParamBase[(1)]>=7&&cr.ParamBase[(4)]>=6);
		case(316):
		return(cr.ParamBase[(316)]<1&&cr.ParamBase[(77)]>=6&&cr.ParamBase[(5)]>=6&&cr.ParamBase[(208)]>=50);
		case(317):
		return(cr.ParamBase[(317)]<3&&cr.ParamBase[(77)]>=3&&cr.ParamBase[(2)]>=6&&cr.ParamBase[(4)]>=6&&cr.ParamBase[(217)]>=40);
		case(318):
		return(cr.ParamBase[(318)]<0&&cr.ParamBase[(77)]>=9&&cr.ParamBase[(3)]>=7&&cr.ParamBase[(215)]>=60);
		case(319):
		return(cr.ParamBase[(319)]<3&&cr.ParamBase[(77)]>=6&&cr.ParamBase[(4)]>=6);
		case(320):
		return(cr.ParamBase[(320)]<2&&cr.ParamBase[(77)]>=3&&cr.ParamBase[(1)]>=7&&cr.ParamBase[(5)]>=6&&cr.ParamBase[(4)]>=5&&cr.ParamBase[(206)]>=40);
		case(322):
		return(cr.ParamBase[(322)]<0&&cr.ParamBase[(77)]>=9&&cr.ParamBase[(1)]>=6&&cr.ParamBase[(6)]>=6&&cr.ParamBase[(5)]>=4);
		case(324):
		return(cr.ParamBase[(324)]<1&&cr.ParamBase[(77)]>=24&&cr.ParamBase[(5)]>=8&&cr.ParamBase[(0)]>=8&&cr.ParamBase[(203)]>=80&&cr.ParamBase[(325)]==0&&cr.ParamBase[(420)]==0);
		case(325):
		return(cr.ParamBase[(325)]<1&&cr.ParamBase[(77)]>=24&&cr.ParamBase[(5)]>=8&&cr.ParamBase[(1)]>=8&&cr.ParamBase[(200)]>=80&&cr.ParamBase[(324)]==0&&cr.ParamBase[(420)]==0);
		case(326):
		return(cr.ParamBase[(326)]<1&&cr.ParamBase[(77)]>=18&&cr.ParamBase[(5)]>=10&&cr.ParamBase[(208)]>=80&&cr.ParamBase[(203)]>=80);
		case(327):
		return(cr.ParamBase[(327)]<2&&cr.ParamBase[(77)]>=12&&cr.ParamBase[(5)]>=5);
		case(329):
		return(cr.ParamBase[(329)]<2&&cr.ParamBase[(77)]>=12&&cr.ParamBase[(2)]<=4);
		case(330):
		return(cr.ParamBase[(330)]<1&&cr.ParamBase[(77)]>=9&&cr.ParamBase[(5)]>=6);
		case(331):
		return(cr.ParamBase[(331)]<2&&cr.ParamBase[(77)]>=6&&cr.ParamBase[(2)]>=3);
		case(332):
		return(cr.ParamBase[(332)]<1&&cr.ParamBase[(77)]>=12&&cr.ParamBase[(213)]>=40&&cr.ParamBase[(212)]>=40);
		case(333):
		return(cr.ParamBase[(333)]<1&&cr.ParamBase[(77)]>=12&&cr.ParamBase[(206)]>=40&&cr.ParamBase[(207)]>=40);
		case(334):
		return(cr.ParamBase[(334)]<0&&cr.ParamBase[(77)]>=12&&cr.ParamBase[(210)]>=50&&cr.ParamBase[(209)]>=50);
		case(335):
		return(cr.ParamBase[(335)]<1&&cr.ParamBase[(77)]>=9&&cr.ParamBase[(214)]>=50);
		case(336):
		return(cr.ParamBase[(336)]<3&&cr.ParamBase[(77)]>=6);
		case(338):
		return(cr.ParamBase[(338)]<0&&cr.ParamBase[(77)]>=15&&cr.ParamBase[(5)]>=8&&cr.ParamBase[(210)]>=80);
		case(339):
		return(cr.ParamBase[(339)]<1&&cr.ParamBase[(77)]>=6&&cr.ParamBase[(208)]>=60);
		case(342):
		return(cr.ParamBase[(342)]<1&&cr.ParamBase[(77)]>=9);
		case(344):
		return(cr.ParamBase[(344)]<2&&cr.ParamBase[(77)]>=6&&cr.ParamBase[(2)]>=6&&cr.ParamBase[(217)]>=40);
		case(346):
		return(cr.ParamBase[(346)]<1&&cr.ParamBase[(77)]>=3&&cr.ParamBase[(1)]>=7);
		case(348):
		return(cr.ParamBase[(348)]<1&&cr.ParamBase[(77)]>=6&&cr.ParamBase[(1)]>=6);
		case(349):
		return(cr.ParamBase[(349)]<1&&cr.ParamBase[(77)]>=3&&cr.ParamBase[(5)]>=5);
		case(350):
		return(cr.ParamBase[(350)]<3&&cr.ParamBase[(77)]>=3&&cr.ParamBase[(4)]>=4);
		case(351):
		return(cr.ParamBase[(351)]<3&&cr.ParamBase[(77)]>=3&&cr.ParamBase[(4)]>=4);
		case(380):
		return(cr.ParamBase[(380)]<1&&cr.ParamBase[(77)]>=6&&cr.ParamBase[(0)]<10);
		case(381):
		return(cr.ParamBase[(381)]<1&&cr.ParamBase[(77)]>=3&&cr.ParamBase[(1)]>=6);
		case(382):
		return(cr.ParamBase[(382)]<1&&cr.ParamBase[(77)]>=3&&cr.ParamBase[(4)]>=6);
		case(383):
		return(cr.ParamBase[(383)]<1&&cr.ParamBase[(77)]>=9&&cr.ParamBase[(5)]>=4&&cr.ParamBase[(211)]>=75);
		case(384):
		return(cr.ParamBase[(384)]<1&&cr.ParamBase[(77)]>=6&&cr.ParamBase[(216)]>=50);
		case(385):
		return(cr.ParamBase[(385)]<0&&cr.ParamBase[(77)]>=12&&cr.ParamBase[(0)]<10);
		case(386):
		return(cr.ParamBase[(386)]<0&&cr.ParamBase[(77)]>=12&&cr.ParamBase[(1)]<10);
		case(387):
		return(cr.ParamBase[(387)]<0&&cr.ParamBase[(77)]>=12&&cr.ParamBase[(2)]<10);
		case(388):
		return(cr.ParamBase[(388)]<0&&cr.ParamBase[(77)]>=12&&cr.ParamBase[(3)]<10);
		case(389):
		return(cr.ParamBase[(389)]<0&&cr.ParamBase[(77)]>=12&&cr.ParamBase[(4)]<10);
		case(390):
		return(cr.ParamBase[(390)]<0&&cr.ParamBase[(77)]>=12&&cr.ParamBase[(5)]<10);
		case(391):
		return(cr.ParamBase[(391)]<0&&cr.ParamBase[(77)]>=12&&cr.ParamBase[(6)]<10);
		case(392):
		return(cr.ParamBase[(392)]<0&&cr.ParamBase[(77)]>=6&&cr.ParamBase[(210)]>=50&&cr.ParamBase[(80)]>=50);
		case(393):
		return(cr.ParamBase[(393)]<0&&cr.ParamBase[(77)]>=9);
		case(394):
		return(cr.ParamBase[(394)]<1&&cr.ParamBase[(77)]>=12&&cr.ParamBase[(203)]>=150);
		case(395):
		return(cr.ParamBase[(395)]<1&&cr.ParamBase[(77)]>=3&&cr.ParamBase[(3)]>=6&&cr.ParamBase[(2)]>=4&&cr.ParamBase[(5)]>=4);
		case(396):
		return(cr.ParamBase[(396)]<1&&cr.ParamBase[(77)]>=9&&cr.ParamBase[(3)]>=6);
		case(397):
		return(cr.ParamBase[(397)]<1&&cr.ParamBase[(77)]>=9&&cr.ParamBase[(5)]>=5&&cr.ParamBase[(6)]>=5);
		case(398):
		return(cr.ParamBase[(398)]<1&&cr.ParamBase[(77)]>=12&&cr.ParamBase[(207)]>=60);
		case(399):
		return(cr.ParamBase[(399)]<1&&cr.ParamBase[(77)]>=6&&cr.ParamBase[(3)]<10);
		case(400):
		return(cr.ParamBase[(400)]<1&&cr.ParamBase[(77)]>=6&&cr.ParamBase[(214)]>=50&&cr.ParamBase[(215)]>=50);
		case(401):
		return(cr.ParamBase[(401)]<2&&cr.ParamBase[(77)]>=6);
		case(402):
		return(cr.ParamBase[(402)]<1&&cr.ParamBase[(77)]>=9&&cr.ParamBase[(201)]>=75);
		case(403):
		return(cr.ParamBase[(403)]<1&&cr.ParamBase[(77)]>=3&&cr.ParamBase[(5)]>=5);
		case(404):
		return(cr.ParamBase[(404)]<1&&cr.ParamBase[(77)]>=6&&cr.ParamBase[(215)]>=50);
		case(405):
		return(cr.ParamBase[(405)]<1&&cr.ParamBase[(77)]>=3&&cr.ParamBase[(0)]>=6);
		case(406):
		return(cr.ParamBase[(406)]<1&&cr.ParamBase[(77)]>=12&&cr.ParamBase[(210)]>=100);
		case(407):
		return(cr.ParamBase[(407)]<1&&cr.ParamBase[(77)]>=12&&cr.ParamBase[(5)]>=5);
		case(420):
		return(cr.ParamBase[(420)]<0&&cr.ParamBase[(77)]>=24&&cr.ParamBase[(0)]>=8&&cr.ParamBase[(2)]>=8&&cr.ParamBase[(207)]>=80&&cr.ParamBase[(325)]==0&&cr.ParamBase[(324)]==0);
		default:
		break;
	}
	return false;
}                                                                                                                                                                                                                                                                                                                                                                                                       

