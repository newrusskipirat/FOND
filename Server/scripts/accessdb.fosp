

AccessDB AccountDataBase;

void AccountDataBaseInit(){
	AccountDataBase.DbLoad();
}

void AccountDataBaseMaster(){
	AccountDataBase.DbAccountAdd("master","master",0);
}

void AccountDataBaseCheck(string accountPass){
	AccountDataBase.DbAccountExist(accountPass);
}

void AcconuntDataBaseAuth(Critter&cr,string accountPass){
	AccountDataBase.DbAuthtorize(cr,accountPass);
}

class Account
{
	string Name;
	string Password;
	uint8 Access;
	uint GameId;
	bool Active;
	
	Account(){
		Name="";
		Password="";
		Access=0;
		GameId=0;
		Active=false;
	}
	
	Account(string name,string password,uint8 access,uint id,bool active){
		Name=name;
		Password=password;
		Access=access;
		GameId=id;
		Active=active;
	}
	
}

class AccessDB
{
	Account[]Accounts;
	
	AccessDB(){
		DbVirtualClear();
	}
	
	void DbLoad(){
		file f;
		
		if(f.open((".\\")+("access.db"),"r")!=-1){
			while(!f.isEndOfFile()){
				string line="";
				f.readLine(line);
				
				if(line.length()>0){
					string@[]@fields=split(line,(":"));
					
					if(fields.length%3!=0){
						Log("Account DB !load : fields count error");
						return;
					}
					
					DbVirtualClear();
					
					for(uint8 i=0,j=fields.length();i<j;++i){
						if(i%3==0){
							
							int temp=0;
							StrToInt(fields[i+2],temp);     
							
							Accounts.insertLast(Account(fields[i],fields[i+1],temp,0,true));
						}
					}
				}
			};
			
			Log("Account DB load successful, accounts : "+Accounts.length());
		}
	}
	
	private void DbAccountInsert(string line){
		file f;
		
		if(f.open((".\\")+("access.db"),"a")!=-1){
			f.writeString(line);
		}
	}
	
	private int DbAccountCheck(string line,uint8 deep){
		
		string@[]fields=split(line,(":"));
		for(uint i=0,j=Accounts.length();i<j;++i)
		{
			if(Accounts[i].Name==fields[0])
			{
				Log("find level 0");
				if(deep>0){Log("find level 1");return(Accounts[i].Password==fields[1]?int(i):-1);}
				else return i;
			}
		}
		
		return-1;
	}
	
	private void DbVirtualClear(){
		
		Accounts.resize(0);
	}
	
	private string FormatAccount(string name,string pass,uint8 access){
		return(""+name+(":")+pass+(":")+access+("\n"));
	}
	
	private bool DbSetAccess(Critter&cr,int index){
		if(index!=-1&&Accounts[index].Active){
			
			Accounts[index].GameId=cr.Id;
			cr.Say((11),"Access changed to "+Accounts[index].Access);
			return true;
		}
		
		return false;
	}
	
	bool DbAuthtorize(Critter&cr,string name,string pass){
		
		int index=DbAccountCheck(FormatAccount(name,pass,0),1);
		Log("index check "+index);
		return DbSetAccess(cr,index);
		
	}
	
	bool DbAuthtorize(Critter&cr,string accountPass){
		
		int index=DbAccountCheck(accountPass,1);
		Log("index check "+index);
		return DbSetAccess(cr,index);
		
	}
	
	void DbAccountAdd(string name,string pass,uint8 access){
		DbAccountInsert(FormatAccount(name,pass,0));
	}
	
	bool DbAccountExist(string accountPass){
		return(DbAccountCheck(accountPass,1)!=-1);
	}
	
	bool DbAccountExist(string account,string pass){
		return(DbAccountCheck(FormatAccount(account,pass,0),1)!=-1);
	}
}

void testdbload(Critter&cr,int,int,int){
	AccountDataBaseInit();
}

void testdbmaster(Critter&cr,int,int,int){
	AccountDataBaseMaster();
}