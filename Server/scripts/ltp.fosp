

bool LocIsModoc(uint locPid)
{
	return(locPid<=(1253));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(32)||locPid==(1216)||locPid==(43)||locPid==96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(42));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

shared interface Project
{
	string@get_Name();
	void Build();
	void SetAssociation(string@ex,string@className,string@classModule);
}

shared interface FileObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	void FormatStringData(string&nameData,string&data);
	FileObject@get_Pattern(string&name)const;
	FileObject@get_Copy(string&name); 
	
	void set_GlobalData(string@name,string@value);          
	
	string@get_GlobalData(string@name);            
	
}

shared class TimeLog
{
	uint tick;
	
	TimeLog()
	{
		refresh();
	}
	
	void refresh()
	{
		tick=GetTick();
	}
	
	bool check(uint count)
	{
		return(GetTick()-tick>=count);
	}
	
	uint get()
	{
		uint old=tick;
		refresh();
		return(tick-old);
	}
	
	void Log(string&in message)
	{
		::ClearLog(message+" ["+(GetTick()-tick)+"ms]");
	}
}

shared interface AnyDataObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	uint[]@get_SaveData();
	void InitData(uint[]&data);
}

shared interface ManagerObject
{
	FileObject@get_ProtoObject(string@name);
	void ParseProtoTypes(const string&ex,const FileObject&pattern,const string@search);
	FileObject@ParseProtoTypeFile(string&name,const string&ex,const FileObject&pattern,const string@search);
	FileObject@AddPrototype(FileObject@proto);
	FileObject@StringToFileObject(string&name,string&txt,const FileObject&pattern);
}

shared interface ValueAPI{}
shared class SettingsAPI
{
	string Name;
	bool IsDebug;
} 

shared class GlobalData
{
	uint Hash;
	string Value;
	
	GlobalData(string@name)
	{
		Hash=GetStrHash(name);
		Value="";
	} 
	
	void SaveData(uint[]&outArray,uint&position)
	{
		uint len=Value.length();
		
		outArray.resize(position+2+len/2);
		
		outArray[position++]=Hash;
		outArray[position++]=len;
		
		for(uint i=0;i<len;i++)
		{
			outArray[position]|=Value[i++]<<24;
			outArray[position]|=Value[i++]<<16;
			outArray[position]|=Value[i++]<<8;
			outArray[position++]|=Value[i];
		}
	} 
	
	void LoadData(uint[]&in outArray,uint&position)
	{
		Hash=outArray[position++];
		uint len=outArray[position++];
		Value.resize(len);
		
		for(uint i=0;i<len;i++)
		{
			Value[i++]=(outArray[position]>>24)&0xFF;
			Value[i++]=(outArray[position]>>16)&0xFF;
			Value[i++]=(outArray[position]>>8)&0xFF;
			Value[i]=outArray[position++]&0xFF;
			
		}
	}
} 

shared class Hexagonal
{
	Hexagonal(){Reset();}
	Hexagonal(const uint16&in x,const uint16&in y){Set(x,y);}
	Hexagonal(const Hexagonal&master){Set(master);}
	
	Hexagonal(const Critter&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Item&master){Set(master.HexX,master.HexY);}
	Hexagonal(const Scenery&master){Set(master.HexX,master.HexY);}
	
	bool Entire(Map&map,int entNum){return map.GetEntireCoords(entNum,0,X,Y);}
	bool IsPassed(Map&map){return ValidPosition(map)&&map.IsHexPassed(X,Y);}
	bool IsPassed(Map&map,Hexagonal&begin,Hexagonal&end){return ValidPosition(map,begin,end)&&map.IsHexPassed(X,Y);}
	
	bool ValidPosition(Map&map)
	{
		Hexagonal end,begin;
		if(end.Entire(map,0)&&begin.Entire(map,255))
		return ValidPosition(map,begin,end);
		return false;
	}
	
	bool ValidPosition(Map&map,Hexagonal&begin,Hexagonal&end)
	{
		return(X>=begin.X&&Y>=begin.Y
		&&X<=end.X&&Y<=end.Y);
	}
	
	bool Transit(Critter&critter,Map&map){return Transit(critter,map,critter.Dir);}
	bool Transit(Critter&critter,Map&map,uint8 direction)
	{
		if(!IsPassed(map))return false;
		return critter.TransitToMap(map.Id,X,Y,direction);
	}
	
	bool Transit(Critter&critter,uint mapId){return Transit(critter,mapId,critter.Dir);}
	bool Transit(Critter&critter,uint mapId,uint8 direction)
	{
		if(mapId==0)return false;
		Map@map=GetMap(mapId);
		if(@map is null)return false;
		return Transit(critter,map,direction);
	} 
	
	void Set(const uint16&in x,const uint16&in y){X=x;Y=y;}
	void Set(const Hexagonal&in other){Set(other.X,other.Y);}
	void Reset(){X=Y=0;}
	uint Distantion(Hexagonal&other){return GetDistantion(X,Y,other.X,other.Y);}
	
	uint16 X;
	uint16 Y;
	
	bool opEquals(const Hexagonal&in other){return(other.X==X&&other.Y==Y);}
	Hexagonal&opAssign(const Hexagonal&in other)
	{
		Set(other);
		return this;
	}
	
	const uint get_UID(const uint w)const{return X+Y*w;}
	string get_Debug(){return"X:"+X+"Y:"+Y;}
	void Log(string&str){::Log(str+":"+Debug);}
}    

shared class MapHash
{
	MapHash(const uint16&in protoId)
	{
		ProtoId=protoId;
		@Min=null;
		@Max=null;
	}
	
	MapHash&opAssign(Map&map)
	{
		@Min=Hexagonal(0,0);
		@Max=Hexagonal(0,0);
		map.GetEntireCoords(0,0,Max.X,Max.Y);
		map.GetEntireCoords((255),0,Min.X,Min.Y);
		return this;
	}
	
	uint16 ProtoId;
	Hexagonal@Min;
	Hexagonal@Max;
} 

shared class Line
{
	Line(Hexagonal&a,Hexagonal&b){@A=a;@B=b;}
	
	uint get_Length()
	{
		return B.Distantion(A);
	}
	
	uint get_Point(Hexagonal&point)
	{
		return B.Distantion(point);
	}
	
	float get_Module(Hexagonal&point)
	{
		return Point[point]/Length;
	}
	
	Hexagonal@get_opIndex(const uint&in size)
	{
		
		const float mod=float(size/Length);
		return@Hexagonal(A.X+(B.X-A.X)*mod,A.Y+(B.Y-A.Y)*mod);
	} 
	
	Line(Map&map,uint16 grid,MapHash@hash)
	{
		if(@hash is null)
		{
			Hexagonal min,max;
			map.GetTransferParams(min.X,min.Y,max.X,max.Y,grid);
			
			@A=@Hexagonal(min.X,min.Y);
			@B=@Hexagonal(max.X,max.Y);
		}
		else
		{
			if(@hash.Min is null||@hash.Max is null)
			map.GetTransferParams(hash.Min.X,hash.Min.Y,hash.Max.X,hash.Max.Y,grid);
			
			@A=@Hexagonal(hash.Min.X,hash.Min.Y);
			@B=@Hexagonal(hash.Max.X,hash.Max.Y);
		}
	} 
	
	string get_Debug(){return"A<"+A.Debug+">B<"+B.Debug+">";}
	void Log(string&str){::Log(str+":"+Debug);}
	
	Hexagonal@A;
	Hexagonal@B;
}  

import MapHash@GetMapHash(const uint16&in pid)from"world";
import uint CreateLocation(Hexagonal&coordinate,uint16 locationPid)from"world"; 

import ManagerObject@get_objectManager()from"world"; 

import EventTree@get_EventRoot()from"world"; 

import Project@CreateProject(string@name,string@path)from"main";
import Project@get_Project(string@name)from"main";                                                                                                                        

funcdef uint PROCESS(Critter@,int&,int&,int&);                                    

LTProc[]procs;

class LTProc
{
	PROCESS@pointer;
	LTProc()
	{
		@pointer=null;
	}
}

bool RegisterProcess(uint8 type,any func)
{
	PROCESS@temp_func=null;
	
	func.retrieve(@temp_func);
	
	int param0=-1,
	param1=-1,
	param2=-1;
	
	if((@temp_func!=null)&&(temp_func(null,param0,param1,param2)==(0xF035BCF3))&&(uint8(param0)==type))
	{
		uint len=procs.length();
		
		if(len<=type)
		procs.resize(type+1);
		
		@procs[type].pointer=temp_func;
		
		Log("Process #"+type+" binded.");
		return true;
	}
	
	Log("Can't bind process! Type: "+type);
	
	return false;
}

uint makeTDH(uint8 type,uint16 hexX,uint16 hexY,uint8 dir)
{
	uint tck=0;
	tck|=(type&0xFF);
	tck|=((hexX&0x3FF)<<8);
	tck|=((hexY&0x3FF)<<18);
	tck|=((dir&0x7)<<28);
	
	return tck;
}

void setTDH(Critter&cr,uint8 type)
{
	cr.StatBase[(140)]=int(makeTDH(type,cr.HexX,cr.HexY,cr.Dir));
}

bool checkTDH(Critter&cr)
{
	return((uint(cr.Stat[(140)])&0xFFFFFF00)==(makeTDH(0,cr.HexX,cr.HexY,cr.Dir)));
}

bool checkTDH(Critter&cr,uint8 type)
{
	return(cr.Stat[(140)]==int(makeTDH(type,cr.HexX,cr.HexY,cr.Dir)));
}

bool StartProcess(Critter&cr,uint8 type,uint time)
{
	if(!StartProcess(cr,type,0,0,0,time,false))
	return false;
	return true;
}

bool StartProcess(Critter&cr,uint8 type,int param0,uint time)
{
	if(!StartProcess(cr,type,param0,0,0,time,true))
	return false;
	return true;
}

bool StartProcess(Critter&cr,uint8 type,int param0,int param1,int param2,uint time)
{
	if(!StartProcess(cr,type,param0,param1,param2,time,true))
	return false;
	return true;
}

bool StartProcess(Critter&cr,uint8 type,int param0,int param1,int param2,uint time,bool paramWrite)
{
	if(procs.length()<=type||(@procs[type].pointer==null))
	{
		Log("fail "+type);
		return false;
	}
	
	PROCESS@temp_func=@procs[type].pointer;
	
	Map@map=cr.GetMap();
	uint mapId=0;
	
	if(paramWrite)
	{
		cr.StatBase[(143)]=param0;
		cr.StatBase[(144)]=param1;
		cr.StatBase[(145)]=param2;
	}
	else if(uint(cr.Stat[(140)])&0xFF!=type)
	{
		cr.StatBase[(143)]=0;
		cr.StatBase[(144)]=0;
		cr.StatBase[(145)]=0;
	}
	
	if((@map!=null))
	{
		mapId=map.Id;
		setTDH(cr,type);
	}
	else
	cr.StatBase[(140)]=int(type);
	
	cr.SetEvent((0),"_Process");
	cr.StatBase[(141)]=int(mapId);
	cr.StatBase[(142)]=int(__FullSecond);
	cr.RunClientScript("client_main@_waiting",1,0,0,null,null);
	cr.Wait(time);
	
	return true;
}

bool StopProcess(Critter&cr)
{
	cr.SetEvent((0),null);
	cr.StatBase[(142)]=-1;
	cr.RunClientScript("client_main@_waiting",0,0,0,null,null);
	
	cr.Wait(0);
	
	return true;
}

void _Process(Critter&cr)
{
	uint tdr=uint(cr.Stat[(140)]),
	pmap=uint(cr.Stat[(141)]);
	
	int param0=cr.Stat[(143)],
	param1=cr.Stat[(144)],
	param2=cr.Stat[(145)];
	
	uint8 type=tdr&0xFF;
	
	if(uint(cr.Stat[(142)])<=__FullSecond)
	{
		Map@map=cr.GetMap();
		if(((pmap==0)&&(tdr==type))||((@map!=null)&&(map.Id==pmap)&&checkTDH(cr)))
		{
			if(procs.length()>type&&(@procs[type]!=null))
			{
				PROCESS@temp_func=@procs[type].pointer;
				
				uint time=temp_func(cr,param0,param1,param2);
				
				cr.StatBase[(143)]=param0;
				cr.StatBase[(144)]=param1;
				cr.StatBase[(145)]=param2;
				
				if(time!=0)
				{
					cr.Wait(time);
					return;
				}
			}
			else
			{
				Log("_Process error #"+type);
			}
		}
		
	}
	StopProcess(cr);
}

void unsafe_StopProcess(Critter&player,int param0,int param1,int param2,string@param3,int[]@param4)
{
	if(player.Stat[(95)]>0)
	return;
	player.StatBase[(95)]+=1;
	StopProcess(player);
}
