// Author: Endragor

#include "_macros.fos"

// --------------- MODIFIABLE DATA AND FUNCTIONS ---------------\\

#define ST_LAST_CONT_ID                       ( 130 ) // Remove it
#define DIALOG_all_jukebox                    ( 93 )

#define DEFAULT_SONG_COST                     ( 5 )

#define JUKEBOX_PLAY_BUTTON_IS_ACTIVE_TEXT    ( " Горит кнопка \"Play\"." )
#define JUKEBOX_STATUS_FREE_TEXT              ( "Ничего не играет." )
#define JUKEBOX_STATUS_BUSY_TEXT              ( "Играет музыка. Подождите." )

// Default song order timeout in seconds
#define DEFAULT_SONG_TIMEOUT                  ( 300 )

// Pids of items that are considered to be discs for jukebox
const uint16[] DiscPids =
{
    PID_JUKEBOX_DISK_XFILES,
    PID_JUKEBOX_DISK_TMNT,
    PID_JUKEBOX_DISK_AFTER_DARK,
    PID_JUKEBOX_DISK_TERMINATOR,
    PID_JUKEBOX_DISK_SIXTEEN_TONS,
    PID_JUKEBOX_DISK_MAYBE,
    PID_JUKEBOX_DISK_WORLD_ON_FIRE,
    PID_JUKEBOX_DISK_SPRINGTIME,
    PID_JUKEBOX_DISK_ZERG,
    PID_JUKEBOX_DISK_FIFTY_MEFATONS,
    PID_JUKEBOX_DISK_DARK_EYES,
    PID_JUKEBOX_DISK_RADIOACTIVE_MAMA,
    PID_JUKEBOX_DISK_SUMMERTIME,
    PID_JUKEBOX_DISK_CHEESE_MARCH,
    PID_JUKEBOX_DISK_SOLD_WORLD,
    PID_JUKEBOX_DISK_TRUE_LOVES,
    PID_JUKEBOX_DISK_SEVER,
    PID_JUKEBOX_DISK_RAD_ROCK,
    PID_JUKEBOX_DISK_ROUND_TABLE,
    PID_JUKEBOX_DISK_HOLY_GRAIL,
    PID_JUKEBOX_DISK_WINTERS_SHELTER,
    PID_JUKEBOX_DISK_LOVED_BY_YOU,
    PID_JUKEBOX_DISK_DREAM_ON,
    PID_JUKEBOX_DISK_WOUNDERFUL_WORLD,
    PID_JUKEBOX_DISK_LONDON_MARCH,
    PID_JUKEBOX_DISK_LAIKA,
    PID_JUKEBOX_DISK_DARKSIDE_BLUES,
    PID_JUKEBOX_DISK_TAMPICO,
    PID_JUKEBOX_DISK_STILL_ALIVE,
    PID_JUKEBOX_DISK_CANTINA_BAND,
    PID_JUKEBOX_DISK_ME_NICE,
    PID_JUKEBOX_DISK_SOMEBODY_TO_LOVE,
    PID_JUKEBOX_DISK_PUTTIN,
    PID_JUKEBOX_DISK_HBOMB,
    PID_JUKEBOX_DISK_BARBER_BOMB,
    PID_JUKEBOX_DISK_GHOSTBUSTERS,
    PID_JUKEBOX_DISK_ATOMIC_COCTAIL,
    PID_JUKEBOX_DISK_MOON_WAS_YELLOW,
    PID_JUKEBOX_DISK_COLD_WAR,
    PID_JUKEBOX_DISK_ATOMIC_BOMB_BABY,
    PID_JUKEBOX_DISK_ROCK_IN,
    PID_JUKEBOX_DISK_BLUE_LOU,
    PID_JUKEBOX_DISK_NEW_JUNK,
    PID_JUKEBOX_DISK_URANIUM,
    PID_JUKEBOX_DISK_TWIST_AGAIN,
    PID_JUKEBOX_DISK_VODKA,
    PID_JUKEBOX_DISK_NO_COMMUNIST,
    PID_JUKEBOX_DISK_ATOMIC_POWER,
    PID_JUKEBOX_DISK_WAY_TO_VEGAS,
    PID_JUKEBOX_DISK_JUST_ALLOW,
    PID_JUKEBOX_DISK_PARANOID,
    PID_JUKEBOX_DISK_CHAMBDERS_SHELTER,
    PID_JUKEBOX_DISK_STRANA_SOVETOV,
    PID_JUKEBOX_DISK_DOROGA,
    PID_JUKEBOX_DISK_MILBURN_ATOMIC,
    PID_JUKEBOX_DISK_TNT,
    PID_JUKEBOX_DISK_JAVABAR
};
// Associated songs for each disc. If a player chooses DiscPids[i] to play then SoundFiles[i] will be played.
// These files must be placed in "data/sound/SFX/" client directory
const string[] SoundFiles =
{
    "xfiles.ogg",
    "tmnt.ogg",
    "afterdark.ogg",
    "terminator2.ogg",
    "sixteentons.ogg",
    "maybe.ogg",
    "worldonfire.ogg",
    "rockies.ogg",
    "zerg.ogg",
    "fiftymegatons.ogg",
    "darkeyes.ogg",
    "radioactivemama.ogg",
    "summertime.ogg",
    "imperialmarch.ogg",
    "soldtheworld.ogg",
    "loveshair.ogg",
    "severnavsegda.ogg",
    "radioaktivnirocknroll.ogg",
    "roundtable.ogg",
    "holygrail.ogg",
    "falloutshelter.ogg",
    "lovedbyyou.ogg",
    "Dreamon.ogg",
    "wonderfulworld.ogg",
    "imperialmarch0.ogg",
    "laika.ogg",
    "darksideblues.ogg",
    "tampico.ogg",
    "stillalive.ogg",
    "cantinaband.ogg",
    "askmenice.ogg",
    "somebodytolove.ogg",
    "ritz.ogg",
    "hbombrock.ogg",
    "atombomb.ogg",
    "ghostbusters.ogg",
    "atomiccocktail.ogg",
    "moonwasyellow.ogg",
    "coldwarwithyou.ogg",
    "AtomBombBaby.ogg",
    "rockininrhythm.ogg",
    "bluelou.ogg",
    "newjunkcity.ogg",
    "uranium.ogg",
    "twistagain.ogg",
    "vodka.ogg",
    "nocommunist.ogg",
    "atomicpower.ogg",
    "waytovegas.ogg",
    "onemore.ogg",
    "paranoid.ogg",
    "falloutshelter0.ogg",
    "stranasovetov.ogg",
    "auctiondoroga.ogg",
    "atomicbaby.ogg",
    "tnt.ogg",
    "javabar.ogg"
};
// Associated disc names for each disc. They will be displayed on a jukebox screen during song selection.
const string[] DiscNames =
{
    "Секретные Материалы",
    "Черепашки Мутанты Нинзя",
    "От заката до рассвета",
    "Терминатор 2",
    "The Platters - Sixteen Tons",
    "The Ink Spots - Maybe",
    "The Ink Spots - I Don't Want To Set The World On Fire",
    "Tex Ritter - When It's Springtime In The Rockies",
    "StarCraft - A Zerg Shotgun and You",
    "Sonny Russell - Fifty Megatons",
    "Slam Stewart - Dark-Eyes",
    "Sheldon Allman - Radioactive Mama",
    "Sarah Vaughan - Summertime",
    "Richard Cheese - Imperial March",
    "Nirvana - The Man Who Sold The World",
    "Nina Simone - Black Is The Color Of My True Loves Hair",
    "Невидимка - Север Навсегда",
    "Невидимка - Радиоактивный РокНРолл",
    "Monty Pythons Spamalot Knights Of The Round Table",
    "Monty Python And The Holy Grail",
    "Mike Winters & Bernie Winters - Fallout Shelter",
    "Marilyn Monroe - I Wanna Be Loved by You",
    "Louis Armstrong - A Kiss To Build A Dream On",
    "Louis Armstrong - Wonderful World",
    "London Symphony Orchestra - The Imperial March",
    "Laika and The Cosmonauts - C'mon Do The Laika",
    "Kazuhiko Toyama - Darkside Blues",
    "June - Christy Tampico",
    "Jonathan Coulton & Ellen McLain - Still Alive",
    "John Williams - Cantina Band",
    "John Hammond - Ask Me Nice",
    "Jefferson Airplane - Somebody to Love",
    "Harry Richman Orchestra - Puttin on the Ritz",
    "H-Bomb Ferguson - Rock H-Bomb Rock",
    "Glenn Barber - Atom Bomb",
    "Охотники За Привидениями",
    "Gaillard Slim Quartette - Atomic Cocktail",
    "Frank Sinatra - The Moon Was Yellow (And The Night Was Young)",
    "Floyd Tillman - This Cold War With you",
    "Five Stars - Atom Bomb Baby",
    "Ella Fitzgerald - Rockin In Rhythm",
    "Ella Fitzgerald - Blue Lou",
    "Earthworm Jim - New Junk City",
    "Commodores - Uranium",
    "Chubby Checker - Lets Twist Again",
    "Chris De Burgh - Moonlight And Vodka",
    "Carson Robison - I'm No Communist",
    "Buchanan Brothers - Atomic Power",
    "Brian Tyler - On My Way To Vegas",
    "Bob Dylan Honey - Just Allow Me One More",
    "Rock'N'Roll Racing - Paranoid (Black Sabbath)",
    "Billy Chambers - Fallout Shelter",
    "Белка и Стрелка - Страна Советов",
    "АукцЫон - Дорога",
    "Amos Milburn - Atomic Baby",
    "AC \\ DC - TNT",
    "Java Bar"
};
// Associated song timeouts for each disc. 0 means default timeout (you can set value above).
const uint[] SongTimeouts =
{
    260,
    94,
    260,
    121,
    166,
    180,
    180,
    114,
    204,
    136,
    164,
    109,
    181,
    139,
    220,
    205,
    186,
    167,
    350,
    116,
    159,
    170,
    266,
    135,
    181,
    129,
    175,
    156,
    175,
    169,
    297,
    167,
    236,
    134,
    186,
    243,
    165,
    192,
    166,
    144,
    310,
    157,
    146,
    136,
    140,
    217,
    167,
    158,
    247,
    118,
    172,
    165,
    76,
    205,
    154,
    221,
    169
};

// Here you can specify cost for specific songs by their index in the array above.
// It can be done simply by creating another array with costs and returning its values here.
uint GetSongCost( int discNumber )
{
    return DEFAULT_SONG_COST;
}

// -------------------------------------------------------------\\

#define LEX_SPECIAL_CHARACTER    ( "$" )
#define LEX_SEPARATOR            ( " " )

// Song switching directions
#define DIRECTION_RIGHT          ( 0 )
#define DIRECTION_LEFT           ( 1 )

// Jukebox statuses (is timeout set or not)
#define STATUS_FREE              ( 0 )
#define STATUS_BUSY              ( 1 )

import void PlayMusic( Map& map, string& musicName, uint pos, uint repeat ) from "media";
import bool IsKeyAviable( Critter& cr, uint lockerId ) from "lockers";

int64 GetItemIndexByPid( uint16 pid, Item@[]& items )
{
    for( uint i = 0; i < items.length(); ++i )
    {
        if( valid( items[ i ] ) && items[ i ].GetProtoId() == pid )
        {
            return i;
        }
    }
    return -1;
}

void _JukeboxInit( Item& jukebox, bool firstTime )
{
    jukebox.Val0 = STATUS_FREE; // flag for timeout check
    jukebox.Val1 = 0;           // jukebox credit value
    jukebox.Val2 = 0;           // jukebox current disc pid (0 or any other invalid value means "set on the next demand")
    jukebox.LockerId = 0;
    jukebox.SetEvent( ITEM_EVENT_SKILL, "_JukeboxSkillUse" );
    jukebox.SetEvent( ITEM_EVENT_USE_ON_ME, "_JukeboxItemUse" );
}

bool _JukeboxItemUse( Item& jukebox, Critter& cr, Item@ usedItem )
{
    if( !valid( usedItem ) )
    {
        return false;
    }
    uint16 usedItemProto = usedItem.GetProtoId();
    if( usedItemProto == PID_BOTTLE_CAPS )
    {
        cr.StatBase[ ST_LAST_CONT_ID ] = jukebox.Id;
        RunDialog( cr, DIALOG_all_jukebox, jukebox.HexX, jukebox.HexY, false );
        return true;
    }
    if( usedItemProto == PID_KEY )
    {
        return KeyUsedOnJukebox( jukebox, usedItem, cr );
    }
    return false;
}

bool _JukeboxSkillUse( Item& jukebox, Critter& cr, int skill )
{
    if( skill == SKILL_PICK_ON_GROUND )
    {
        cr.StatBase[ ST_LAST_CONT_ID ] = jukebox.Id;
        RunDialog( cr, DIALOG_all_jukebox, jukebox.HexX, jukebox.HexY, false );
        return true;
    }
    if( skill == SK_REPAIR )
    {
        if( FLAG( jukebox.LockerCondition, LOCKER_ISOPEN ) || jukebox.LockerId == 0 ||
            FLAG( jukebox.LockerCondition, LOCKER_BROKEN ) || IsKeyAviable( cr, jukebox.LockerId ) )
        {
            JukeboxContainerRequested( jukebox, cr );
            return true;
        }
    }
    return false;
}

bool KeyUsedOnJukebox( Item& jukebox, Item& key, Critter& user )
{
    if( jukebox.LockerId != 0 && jukebox.LockerId == key.LockerId && !FLAG( jukebox.LockerCondition, LOCKER_BROKEN ) )
    {
        JukeboxContainerRequested( jukebox, user );
        return true;
    }
    return false;
}

void JukeboxContainerRequested( Item& jukebox, Critter& cr )
{
    if( jukebox.Proto.Container_Changeble )
    {
        if( FLAG( jukebox.LockerCondition, LOCKER_ISOPEN ) )
        {
            jukebox.LockerClose();
        }
        else
        {
            jukebox.LockerOpen();
            cr.ShowContainer( null, jukebox, jukebox.Proto.GroundLevel ? TRANSFER_HEX_CONT_DOWN : TRANSFER_HEX_CONT_UP );
        }
    }
    else
    {
        cr.ShowContainer( null, jukebox, jukebox.Proto.GroundLevel ? TRANSFER_HEX_CONT_DOWN : TRANSFER_HEX_CONT_UP );
    }
}

// Checks for timeout and disc and starts music to play from jukebox
// returns true if succeeded
bool JukeboxSongRequested( Item& jukebox )
{
    if( jukebox.Val0 != STATUS_FREE )    // jukebox not available
    {
        return false;
    }
    uint16 discPid = jukebox.Val2;
    if( !JukeboxContainsDisc( jukebox, discPid ) )
    {
        return false;
    }
    int discNumber = GetDiscNumber( discPid );
    if( discNumber == -1 )
    {
        return false;
    }
    uint16 hx = 0, hy = 0;     // jukebox coordinates
    Map@   map = jukebox.GetMapPosition( hx, hy );
    if( !valid( map ) )
    {
        return false;
    }
    jukebox.Val0 = STATUS_BUSY;     // setting timeout flag
    if( SongTimeouts[ discNumber ] == 0 )
    {
        // event for timeout reset. Using default timeout.
        CreateTimeEvent( __FullSecond + REAL_SECOND( DEFAULT_SONG_TIMEOUT ), "e_EnableOrders", jukebox.Id, false );
    }
    else
    {
        // event for timeout reset. Using specific timeout.
        CreateTimeEvent( __FullSecond + REAL_SECOND( SongTimeouts[ discNumber ] ), "e_EnableOrders", jukebox.Id, false );
    }
    PlayMusic( map, "DUMMY", 0, 0 );   // to mute background music. Better not create "DUMMY" sound file ;)
    map.PlaySound( SoundFiles[ discNumber ], hx, hy, 0 );
    return true;
}

uint e_EnableOrders( uint[] @ values )
{
    Item@ jukebox = GetItem( values[ 0 ] );
    if( valid( jukebox ) )
    {
        jukebox.Val0 = STATUS_FREE;
    }
    return 0;
}

bool IsDisc( uint16 pid )
{
    uint discAmount = DiscPids.length();
    for( uint i = 0; i < discAmount; ++i )
    {
        if( DiscPids[ i ] == pid )
        {
            return true;
        }
    }
    return false;
}

bool IsDisc( Item@ item )
{
    return ( valid( item ) && IsDisc( item.GetProtoId() ) );
}

int GetDiscNumber( uint16 discPid )
{
    uint discAmount;
    discAmount = DiscPids.length();
    for( uint i = 0; i < discAmount; ++i )
    {
        if( DiscPids[ i ] == discPid )
        {
            return i;
        }
    }
    return -1;
}

// Checks if discPid is a correct pid of a disc and if a jukebox contains the disc
bool JukeboxContainsDisc( Item& jukebox, uint16 discPid )
{
    if( IsDisc( discPid ) )
    {
        Item@ disc = jukebox.GetItem( discPid, uint( -1 ) );
        if( !valid( disc ) )
        {
            return false;
        }
        return true;
    }
    return false;
}

// Fills discs array with proper disc pointers from jukebox
uint GetJukeboxDiscs( Item& jukebox, Item@[] @ + discs )
{
    if( !valid( discs ) )
    {
        return 0;
    }
    uint discAmount = 0;
    Item@[] jukeboxItems;
    jukebox.GetItems( uint( -1 ), jukeboxItems );
    for( uint i = 0; i < jukeboxItems.length(); ++i )
    {
        if( IsDisc( jukeboxItems[ i ] ) )
        {
            discs.insertLast( jukeboxItems[ i ] );
            ++discAmount;
        }
    }
    return discAmount;
}

int GetRandomJukeboxDiscNumber( Item& jukebox )
{
    Item@[] discs;
    GetJukeboxDiscs( jukebox, discs );
    if( discs.length() == 0 )
    {
        return -1;
    }
    Item@ discToPlay = discs[ Random( 0, discs.length() - 1 ) ];
    if( !valid( discToPlay ) )
    {
        return -1;
    }
    int discNumber = GetDiscNumber( discToPlay.GetProtoId() );
    return discNumber;
}

// Not only checks if current disc is valid but also sets random disc as current if it's not
bool IsJukeboxCurrentDiscValid( Item& jukebox )
{
    int currentDiscNumber = GetDiscNumber( jukebox.Val2 );                         // get array index of current song
    if( currentDiscNumber == -1 || !JukeboxContainsDisc( jukebox, jukebox.Val2 ) ) // current song is not valid
    {
        currentDiscNumber = GetRandomJukeboxDiscNumber( jukebox );                 // trying to set random song
        if( currentDiscNumber == -1 )                                              // there are no discs in the jukebox
        {
            return false;
        }
        else
        {
            jukebox.Val2 = DiscPids[ currentDiscNumber ];
            return true;
        }
    }
    return true;
}

bool IsPlayActive( Item& jukebox )
{
    return ( IsJukeboxCurrentDiscValid( jukebox ) && uint( jukebox.Val1 ) >= GetSongCost( GetDiscNumber( jukebox.Val2 ) ) && jukebox.Val0 == STATUS_FREE );
}

void SwitchJukeboxCurrentSong( Item& jukebox, uint8 direction )
{
    Item@[] discs;
    GetJukeboxDiscs( jukebox, discs );
    if( !valid( discs ) )
    {
        return;
    }
    int64 currentDiscIndex = GetItemIndexByPid( jukebox.Val2, discs );
    if( currentDiscIndex == -1 )
    {
        return;
    }
    if( direction == DIRECTION_LEFT )
    {
        do
        {
            --currentDiscIndex;
            if( currentDiscIndex == -1 )
            {
                currentDiscIndex = discs.length() - 1;
            }
        }
        while( !valid( discs[ currentDiscIndex ] ) );
    }
    else
    {
        do
        {
            ++currentDiscIndex;
            if( uint( currentDiscIndex ) == discs.length() )
            {
                currentDiscIndex = 0;
            }
        }
        while( !valid( discs[ currentDiscIndex ] ) );
    }
    jukebox.Val2 = discs[ currentDiscIndex ].GetProtoId();
}

Item@ GetJukebox( Critter& player )
{
    Map@ map = player.GetMap();
    if( valid( map ) )
    {
        return map.GetItem( player.StatBase[ ST_LAST_CONT_ID ] );
    }
    return null;
}

// DIALOG FUNCTIONS

void dlg_JukeboxMainDialog( Critter& player, Critter@ cr, string@ lexems )
{
    if( !IS_DIALOG_GENERATED( lexems ) )
    {
        return;
    }
    const string IS_PLAY_ACTIVE_LEX_NAME = "is_play_active";
    string       isPlayActiveLexValue;
    Item@        jukebox = GetJukebox( player );
    if( !valid( jukebox ) || !IsJukeboxCurrentDiscValid( jukebox ) )
    {
        FillBasicJukeboxLexems( jukebox, lexems, true );
        isPlayActiveLexValue = "error";
    }
    else
    {
        FillBasicJukeboxLexems( jukebox, lexems, false );
        isPlayActiveLexValue = IsPlayActive( jukebox ) ? JUKEBOX_PLAY_BUTTON_IS_ACTIVE_TEXT : "";
    }
    lexems += LEX_SPECIAL_CHARACTER + IS_PLAY_ACTIVE_LEX_NAME + LEX_SEPARATOR + isPlayActiveLexValue;
}

void dlg_JukeboxCoinboxDialog( Critter& player, Critter@ cr, string@ lexems )
{
    if( !IS_DIALOG_GENERATED( lexems ) )
    {
        return;
    }
    Item@ jukebox = GetJukebox( player );
    if( !valid( jukebox ) || !IsJukeboxCurrentDiscValid( jukebox ) )
    {
        FillBasicJukeboxLexems( jukebox, lexems, true );
    }
    else
    {
        FillBasicJukeboxLexems( jukebox, lexems, false );
    }
}

void r_CoinsInserted( Critter& player, Critter@ cr, int moneyAmount )
{
    Item@ jukebox = GetJukebox( player );
    if( !valid( jukebox ) )
    {
        return;
    }
    if( _CritCountItem( player, PID_BOTTLE_CAPS ) >= uint( moneyAmount ) )
    {
        player.DeleteItem( PID_BOTTLE_CAPS, moneyAmount );
        jukebox.AddItem( PID_BOTTLE_CAPS, moneyAmount, uint( -1 ) );
        jukebox.Val1 += moneyAmount;
    }
}

void r_PlayPressed( Critter& player, Critter@ cr )
{
    Item@ jukebox = GetJukebox( player );
    if( !valid( jukebox ) )
    {
        return;
    }
    if( JukeboxSongRequested( jukebox ) == true )
    {
        jukebox.Val1 -= GetSongCost( GetDiscNumber( jukebox.Val2 ) );
    }
}

bool d_IsPlayActive( Critter& player, Critter@ cr )
{
    Item@ jukebox = GetJukebox( player );
    if( !valid( jukebox ) )
    {
        return false;
    }
    return IsPlayActive( jukebox );
}

void r_LeftArrowPressed( Critter& player, Critter@ cr )
{
    Item@ jukebox = GetJukebox( player );
    if( !valid( jukebox ) )
    {
        return;
    }
    SwitchJukeboxCurrentSong( jukebox, DIRECTION_LEFT );
}

void r_RightArrowPressed( Critter& player, Critter@ cr )
{
    Item@ jukebox = GetJukebox( player );
    if( !valid( jukebox ) )
    {
        return;
    }
    SwitchJukeboxCurrentSong( jukebox, DIRECTION_RIGHT );
}

// Fills basic (song_name, song_cost, credit, status) lexems assuming that current disc pid is correct.
// fillWithErrors == true means assign each lexem "error" value
void FillBasicJukeboxLexems( Item@ jukebox, string@ lexems, bool fillWithErrors )
{
    if( !valid( lexems ) )
    {
        return;
    }
    if( !valid( jukebox ) )
    {
        fillWithErrors = true;
    }
    const string SONG_NAME_LEX_NAME = "song_name";
    const string SONG_COST_LEX_NAME = "song_cost";
    const string CREDIT_LEX_NAME = "credit";
    const string STATUS_LEX_NAME = "status";
    string       songNameLexValue;
    string       songCostLexValue;
    string       creditLexValue;
    string       statusLexValue;
    if( !fillWithErrors )
    {
        int currentDiscNumber = GetDiscNumber( jukebox.Val2 );       // get array index of current song
        songNameLexValue = "song123";
        songNameLexValue = DiscNames[ currentDiscNumber ];
        songCostLexValue = GetSongCost( currentDiscNumber );
        creditLexValue = jukebox.Val1;
        statusLexValue = jukebox.Val0 == STATUS_FREE ? JUKEBOX_STATUS_FREE_TEXT : JUKEBOX_STATUS_BUSY_TEXT;
    }
    else
    {
        songNameLexValue = "error";
        songCostLexValue = "error";
        creditLexValue = "error";
        statusLexValue = "error";
    }
    lexems += LEX_SPECIAL_CHARACTER + SONG_NAME_LEX_NAME + LEX_SEPARATOR + songNameLexValue;
    lexems += LEX_SPECIAL_CHARACTER + SONG_COST_LEX_NAME + LEX_SEPARATOR + songCostLexValue;
    lexems += LEX_SPECIAL_CHARACTER + CREDIT_LEX_NAME + LEX_SEPARATOR + creditLexValue;
    lexems += LEX_SPECIAL_CHARACTER + STATUS_LEX_NAME + LEX_SEPARATOR + statusLexValue;
}
