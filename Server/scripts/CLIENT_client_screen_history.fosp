              

import IGUIScreenOpt@GUI_CreateScreen(int screenIndex,string@sprName)from"client_gui";

import void GUI_DeleteScreen(int screenIndex)from"client_gui";

import IGUIElementOpt@GUI_AddScreenElement(int screenIndex,string@sprName,int x,int y)from"client_gui";

import IGUIScreenOpt@GUI_GetScreenOptions(int screenIndex)from"client_gui";

import IGUIScreenOpt@GUI_GetScreenOptions()from"client_gui";

import IGUIElementOpt@GUI_GetElementOptions()from"client_gui";
import void GUI_HideScreen(int screenIndex,int p0,int p1,int p2)from"client_gui";

import void GUI_DeleteScreenElements(int screenIndex)from"client_gui"; 

import IGUIScreenOpt@GUI_CreateScreenIni(int screenIndex,string@iniKey)from"client_gui";
import IGUIElementOpt@GUI_AddScreenElementIni(int screenIndex,string@ini,int defx,int defy)from"client_gui";
import IGUIElementOpt@GUI_AddScreenElementIni(int screenIndex,string@ini,int defx,int defy,string@defSpr)from"client_gui";      

shared interface IGUIScreenCallbackShow
{
	void OnShow(int p0,int p1,int p2);
}
shared interface IGUIScreenCallbackHide
{
	void OnHide(int p0,int p1,int p2);
}
shared interface IGUIScreenCallbackMove
{
	void OnMove(int posX,int posY);
}

shared interface IGUIScreenCallbackInit{
	void OnInit();
}

shared interface IGUIScreenOpt
{
	IGUIScreenOpt@CallbackShow(IGUIScreenCallbackShow@callback);
	IGUIScreenOpt@CallbackHide(IGUIScreenCallbackHide@callback);
	IGUIScreenOpt@CallbackMove(IGUIScreenCallbackMove@callback);
	IGUIScreenOpt@Position(int x,int y);
	IGUIScreenOpt@CanMove(bool enabled);
	IGUIScreenOpt@Modal(bool enabled);
	IGUIScreenOpt@Multiinstance(bool enabled);
	IGUIScreenOpt@IgnoreBorders(bool enabled);
	IGUIScreenOpt@CloseOnMiss(bool enabled);
	IGUIScreenOpt@AutoCursor(bool enabled,int cursorType);
	IGUIScreenOpt@SetElementCount(int8 ElementCount);
	IGUIScreenOpt@Pic(string@sprName,int path);  
	
	int GetPosX();
	int GetPosY();
	uint16 GetElementsLength();
	IGUIElementOpt@GetElement(uint16 index);
	
}    

shared interface IGUIElementCallbackInit
{
	void OnInit();
}
shared interface IGUIElementCallbackDraw
{
	void OnDraw(int posX,int posY,int w,int h);
}
shared interface IGUIElementCallbackMouseClick
{
	void OnMouseClick(int click);
}
shared interface IGUIElementCallbackKeyPress
{
	void OnKeyPress(uint8 key,uint8 letter);
}

shared interface IGUIElementOpt
{
	IGUIElementOpt@CallbackInit(IGUIElementCallbackInit@callback);
	IGUIElementOpt@CallbackDraw(IGUIElementCallbackDraw@callback);
	IGUIElementOpt@CallbackMouseClick(IGUIElementCallbackMouseClick@callback);
	IGUIElementOpt@CallbackKeyPress(IGUIElementCallbackKeyPress@callback);
	IGUIElementOpt@Position(int x,int y);
	IGUIElementOpt@Position(int x,int y,int w,int h);
	IGUIElementOpt@Position(string&iniKey);
	IGUIElementOpt@DownPic(string@sprName);
	IGUIElementOpt@Text(string@text,int font,uint color,uint downColor,int flags);
	IGUIElementOpt@TextInput(bool enabled,uint maxLen,uint colorFocused);
	IGUIElementOpt@Switch(bool enabled); 
	
	IGUIElementOpt@SetVisible(bool enabled);
	IGUIElementOpt@Realese();
	IGUIElementOpt@SetElementType(uint8 type);
	IGUIElementOpt@SetDescription(string desc);
	IGUIElementOpt@SetElementBtnNum(uint8 btnNum);
	IGUIElementOpt@SetElementFastPanelType(uint8 type);
	IGUIElementOpt@SetElementFastPanelId(uint16 id);
	IGUIElementOpt@UpPic(string@sprName);
	IGUIElementOpt@Pic(string@sprName,int path);
	IGUIElementOpt@SetLayer(uint8 layer);
	IGUIElementOpt@SetSpecialValue(uint value);
	IGUIElementOpt@SetRenderLayer(uint8 layer);
	IGUIElementOpt@PicSetFrmCount(uint16 count);   
	
	int GetPosX();
	int GetPosY();
	string@GetText(); 
	
	bool GetVisible();
	uint8 GetLayer();
	uint8 GetType();
	uint8 GetBtnNum();
	uint8 GetFastPanelType();
	uint16 GetFastPanelId();
	string GetDescription();
	uint16 GetSurfaceHeight();
	uint16 GetSurfaceWidth();
	uint GetSpecValue();
	uint8 GetRenderLayer(); 
	
}                                                      

string[]__critterHistoryInfo;                                                                                                                                                                                                                                                                                                                                                                                                                                           

uint __GetColor(int r,int g,int b)
{
	r=(((r)>(255))?(255):(((r)<(0))?(0):(r)));
	g=(((g)>(255))?(255):(((g)<(0))?(0):(g)));
	b=(((b)>(255))?(255):(((b)<(0))?(0):(b)));
	return(uint((0xFF<<24)|(((r)&0xFF)<<16)|(((g)&0xFF)<<8)|((b)&0xFF)));
}

uint __GetGradient(uint colorStart,uint colorEnd,uint8 pos)
{
	pos=(((pos)>(100))?(100):(((pos)<(1))?(1):(pos)));
	
	int aS=(colorStart>>24)&0xFF,
	rS=((colorStart>>16)&0xFF),
	gS=((colorStart>>8)&0xFF),
	bS=((colorStart)&0xFF),
	
	aE=(colorEnd>>24)&0xFF,
	rE=((colorEnd>>16)&0xFF),
	gE=((colorEnd>>8)&0xFF),
	bE=((colorEnd)&0xFF); 
	
	rS=(((rE-int(rS*(pos*0.01)))>0)?(rE-int(rS*(pos*0.01))):-(rE-int(rS*(pos*0.01))));
	gS=(((gE-int(gS*(pos*0.01)))>0)?(gE-int(gS*(pos*0.01))):-(gE-int(gS*(pos*0.01))));
	bS=(((bE-int(bS*(pos*0.01)))>0)?(bE-int(bS*(pos*0.01))):-(bE-int(bS*(pos*0.01))));
	
	return __GetColor(rS,gS,bS);
}

uint __GetColor(uint8&a,uint8&r,uint8&g,uint8&b,uint color){
	a=(color>>24)&0xFF;
	r=((color>>16)&0xFF);
	g=((color>>8)&0xFF);
	b=((color)&0xFF);
	
	return 0;
}

bool LocIsModoc(uint locPid)
{
	return(locPid<=(1253));
}

bool LocIsCity(uint locPid)
{
	return(locPid<=(32)||locPid==(1216)||locPid==(43)||locPid==96);
}

bool LocIsMasked(uint locPid)
{
	return(locPid==(42));
}

bool LocIsHidden(uint locPid)
{
	return false;
}

shared interface Project
{
	string@get_Name();
	void Build();
	void SetAssociation(string@ex,string@className,string@classModule);
}

shared interface FileObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	void FormatStringData(string&nameData,string&data);
	FileObject@get_Pattern(string&name)const;
	FileObject@get_Copy(string&name);                           
	
}

shared class TimeLog
{
	uint tick;
	
	TimeLog()
	{
		refresh();
	}
	
	void refresh()
	{
		tick=GetTick();
	}
	
	bool check(uint count)
	{
		return(GetTick()-tick>=count);
	}
	
	uint get()
	{
		uint old=tick;
		refresh();
		return(tick-old);
	}
	
	void Log(string&in message)
	{
		::ClearLog(message+" ["+(GetTick()-tick)+"ms]");
	}
}

shared interface AnyDataObject
{
	string@get_DictKey();
	string@get_ObjectName()const;
	uint[]@get_SaveData();
	void InitData(uint[]&data);
}

shared interface ManagerObject
{
	FileObject@get_ProtoObject(string@name);
	void ParseProtoTypes(const string&ex,const FileObject&pattern,const string@search);
	FileObject@ParseProtoTypeFile(string&name,const string&ex,const FileObject&pattern,const string@search);
	FileObject@AddPrototype(FileObject@proto);
	FileObject@StringToFileObject(string&name,string&txt,const FileObject&pattern);
}

shared interface ValueAPI{}
shared class SettingsAPI
{
	string Name;
	bool IsDebug;
}                                                  

shared class Hexagonal
{
	Hexagonal(){Reset();}
	Hexagonal(const uint16&in x,const uint16&in y){Set(x,y);}
	Hexagonal(const Hexagonal&master){Set(master);}                                       
	
	void Set(const uint16&in x,const uint16&in y){X=x;Y=y;}
	void Set(const Hexagonal&in other){Set(other.X,other.Y);}
	void Reset(){X=Y=0;}
	uint Distantion(Hexagonal&other){return GetDistantion(X,Y,other.X,other.Y);}
	
	uint16 X;
	uint16 Y;
	
	bool opEquals(const Hexagonal&in other){return(other.X==X&&other.Y==Y);}
	Hexagonal&opAssign(const Hexagonal&in other)
	{
		Set(other);
		return this;
	}
	
	const uint get_UID(const uint w)const{return X+Y*w;}
	string get_Debug(){return"X:"+X+"Y:"+Y;}
	void Log(string&str){::Log(str+":"+Debug);}
}                            

shared class Line
{
	Line(Hexagonal&a,Hexagonal&b){@A=a;@B=b;}
	
	uint get_Length()
	{
		return B.Distantion(A);
	}
	
	uint get_Point(Hexagonal&point)
	{
		return B.Distantion(point);
	}
	
	float get_Module(Hexagonal&point)
	{
		return Point[point]/Length;
	}
	
	Hexagonal@get_opIndex(const uint&in size)
	{
		
		const float mod=float(size/Length);
		return@Hexagonal(A.X+(B.X-A.X)*mod,A.Y+(B.Y-A.Y)*mod);
	}                      
	
	string get_Debug(){return"A<"+A.Debug+">B<"+B.Debug+">";}
	void Log(string&str){::Log(str+":"+Debug);}
	
	Hexagonal@A;
	Hexagonal@B;
}                                                                                                                                            

IGUIElementOpt@[]playerHistoryBtns;
IGUIElementOpt@HistoryName;
IGUIElementOpt@HistoryHistory;
IGUIElementOpt@HistoryDate;
IGUIElementOpt@HistoryChaView;
IGUIElementOpt@HistoryItems;
IGUIElementOpt@HistoryPsyho;

string[]fractionNames={"name1","name2","name3","name4","name5","name6","name7"};
uint8[]fractionValues={1,2,3,4,5,6,7}; 

class ScreenHistoryAll:IGUIScreenCallbackShow,IGUIScreenCallbackHide
{
	uint16 CurrentHistoryPosition;
	ButtonListHistory@ButtonListHistoryDown;
	BtnReserCurrent@btnReset;
	
	ScreenHistoryAll(uint16 currentPos)
	{
		CurrentHistoryPosition=currentPos;
	}
	
	void OnShow(int p0,int p1,int p2)
	{
		
	}
	
	void OnHide(int p0,int p1,int p2)
	{}
}

class ButtonListHistory:IGUIElementCallbackInit,IGUIElementCallbackMouseClick
{
	ScreenHistoryAll@Instance;
	IGUIElementOpt@Options;
	bool Down;
	
	ButtonListHistory(ScreenHistoryAll&screenHistoryAll,bool down)
	{
		@Instance=screenHistoryAll;
		@Instance.ButtonListHistoryDown=this;
		Down=down; 
		
	}
	
	void OnInit()
	{}
	
	void OnMouseClick(int click)
	{  
		
		Message(""+Instance.CurrentHistoryPosition);
		if(Down)
		{
			Message("down");
			ListBtns(Instance.CurrentHistoryPosition,true);
			Instance.CurrentHistoryPosition<__critterHistoryInfo.length()?Instance.CurrentHistoryPosition++:__critterHistoryInfo.length();
		}
		else
		{
			Message("up");
			ListBtns(Instance.CurrentHistoryPosition,false);
			Instance.CurrentHistoryPosition>0?Instance.CurrentHistoryPosition--:0;
		}
	} 
	
}

class BtnReserCurrent:IGUIElementCallbackMouseClick
{
	ScreenHistoryAll@Instance;
	
	BtnReserCurrent(ScreenHistoryAll&instance)
	{
		@Instance=instance;
		@Instance.btnReset=this;
	}
	
	void OnMouseClick(int click)
	{
		Instance.CurrentHistoryPosition=0;
		ListBtns(0,true);
	}
}

void ListBtns(uint16 currentPos,bool down)
{
	Message("btns init");
	for(uint8 i=0;i<playerHistoryBtns.length();i++)
	{
		if(i+currentPos<__critterHistoryInfo.length())
		@playerHistoryBtns[i].Text(__critterHistoryInfo[i+currentPos],(5),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x000C)); 
		
	}      
	
}  

class ButtonShowHistory:IGUIElementCallbackMouseClick
{
	void OnMouseClick(int click)
	{
		
		::ShowScreen((47),3,3,3);
		
	}
	
}

class ScreenHistoryView:IGUIScreenCallbackShow,IGUIScreenCallbackHide
{
	StateBtns@[]StateBtn;
	FractionDropBtn@[]FractionDropBtns;
	TextBox@TextBoxName;
	TextBox@TextBoxHistory;
	TextBox@TextBoxDate;
	TextBox@TextBoxPsyho;
	TextBox@TextBoxItems;
	TextBox@TextBoxChaView;
	SaveHistoryBtn@SaveHistoryBtn;
	IGUIElementOpt@[]FractionDropBtnsOpt;
	IGUIElementOpt@TextBoxNameOpt;
	IGUIElementOpt@TextBoxHistoryOpt;
	IGUIElementOpt@TextBoxDateOpt;
	IGUIElementOpt@TextBoxPsyhoOpt;
	IGUIElementOpt@TextBoxItemsOpt;
	IGUIElementOpt@TextBoxChaViewOpt;
	
	uint8 State;
	uint8 CurrentDropPos;
	
	ScreenHistoryView(uint16 currentPos)
	{
		CurrentDropPos=currentPos;
	} 
	
	void OnShow(int p0,int p1,int p2)
	{
		
	}
	
	void OnHide(int p0,int p1,int p2)
	{}
	
	void SetState(int state)
	{
		for(uint i=0;i<StateBtn.length();i++)
		StateBtn[i].SetState(false);
		StateBtn[state-1].SetState(true);
		State=state;
	}
}

class StateBtns:IGUIElementCallbackInit,IGUIElementCallbackMouseClick
{
	ScreenHistoryView@Instance;
	IGUIElementOpt@Options;
	int State;
	
	StateBtns(ScreenHistoryView&instance,int state)
	{
		@Instance=instance;
		
		State=state;
		
		@Instance.StateBtn[State-1]=this; 
		
	}
	
	void OnInit()
	{
		@Options=GUI_GetElementOptions();
	}
	
	void OnMouseClick(int click)
	{
		if(click==(0))
		Instance.SetState(State);
	}
	
	void SetState(bool state)
	{
		Options.Switch(state);
	}
}

class SaveHistoryBtn:IGUIElementCallbackInit,IGUIElementCallbackMouseClick
{
	ScreenHistoryView@Instance;
	
	SaveHistoryBtn(ScreenHistoryView&instance)
	{
		@Instance=instance;
		@Instance.SaveHistoryBtn=this;
	}
	
	void OnInit()
	{}
	
	void OnMouseClick(int click)
	{
		string name=Instance.TextBoxNameOpt.GetText(),
		history=Instance.TextBoxHistoryOpt.GetText(),
		date=Instance.TextBoxDateOpt.GetText(),
		saveText="";
		
		if(name=="")
		{
			Message("name not fill");
			return;
		}
		if(history=="")
		{
			Message("history not fill");
			return;
		}
		string@[]@dateArr=split(date,".");
		if(dateArr[0].length()!=2||dateArr[1].length()!=2||dateArr[2].length()!=4)
		{
			Message("invalid date format. Example xx.xx.xxxx");
			return;
		}
		
		saveText=name+"%"+date+"%"+history;
		RunServerScriptUnsafe("general_unsafe@unsafe_history_save",0,0,0,saveText,null);
	}
}

class FractionDropBtn:IGUIElementCallbackInit,IGUIElementCallbackMouseClick
{
	ScreenHistoryView@Instance;
	IGUIElementOpt@Options;
	uint8 Type;
	uint8 Mode;
	
	FractionDropBtn(ScreenHistoryView&instance,uint8 type)
	{
		@Instance=instance;
		
		Type=type; 
		
		@Instance.FractionDropBtns[type-1]=this; 
		
	}
	
	void OnInit()
	{
		@Options=GUI_GetElementOptions();
		@Instance.FractionDropBtnsOpt[Type-1]=Options;
		
		if(Type>1)
		{
			Options.SetVisible(false);
		}
	}
	
	void OnMouseClick(int click)
	{
		uint8 length=fractionNames.length();
		Message(""+Instance.CurrentDropPos);
		if(click==(0))
		{
			if(Type==1)
			{
				ShowButtons(Mode==0?true:false);
				Mode=(Mode==0?1:0);
				if(Mode==1)
				{
					for(uint8 i=1;i<Instance.FractionDropBtnsOpt.length();i++)
					{
						Instance.FractionDropBtnsOpt[i].Text(fractionNames[i-1],(5),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x000C));
						Message(fractionNames[i]);
					}
				}  
				
			}
		}
		if(click==(3))
		{
			if(Instance.CurrentDropPos<length)
			{
				
				for(uint8 i=1;i<Instance.FractionDropBtnsOpt.length();i++)
				{
					Instance.FractionDropBtnsOpt[i+Instance.CurrentDropPos].Text(fractionNames[i+Instance.CurrentDropPos],(5),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x000C));
					Message(fractionNames[i+Instance.CurrentDropPos]);
					
				}
				Instance.CurrentDropPos++;
				
			}
		}
		if(click==(4))
		{
			if(Instance.CurrentDropPos>0)
			{
				
				for(uint8 i=1;i<Instance.FractionDropBtnsOpt.length();i++)
				{
					
					Instance.FractionDropBtnsOpt[Instance.CurrentDropPos+i].Text(fractionNames[Instance.CurrentDropPos+i],(5),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x000C));
					Message(fractionNames[i+Instance.CurrentDropPos]);
					
				}
				Instance.CurrentDropPos--;
				
			}
		}
	}
	
	void ShowButtons(bool show)
	{
		for(uint8 i=1;i<Instance.FractionDropBtnsOpt.length();i++)
		{
			Instance.FractionDropBtnsOpt[i].SetVisible(show);
		}
	}
}

class LoadButton:IGUIElementCallbackInit,IGUIElementCallbackMouseClick
{
	uint8 Type;
	LoadButton(uint8 type)
	{
		
		Type=type;     
		
	}
	
	void OnInit()
	{}
	
	void OnMouseClick(int click)
	{
		if(Type==0)
		RunServerScriptUnsafe("general_unsafe@unsafe_history_load",0,0,0,"",null);
		else if(Type==1)
		{
			for(uint16 i=0;i<__critterHistoryInfo.length();i++)
			{
				Message(" i = "+i+" info = "+__critterHistoryInfo[i]);
			}
		}
		else if(Type==2)
		RunServerScriptUnsafe("general_unsafe@unsafe_history_load",2,0,0,"",null);
	}
}

class TextBoxButtons:IGUIElementCallbackInit,IGUIElementCallbackMouseClick
{
	IGUIElementOpt@Options;
	void OnInit()
	{
		@Options=GUI_GetElementOptions();
		playerHistoryBtns.insertLast(Options);
	}
	
	void OnMouseClick(int click)
	{
		int id=0;
		StrToInt(Options.GetText(),id);
		RunServerScriptUnsafe("general_unsafe@unsafe_history_load",2,id!=0?id:0,0,"",null);
		::ShowScreen((46),0,0,0);
	}
	
}

class TextBox:IGUIElementCallbackInit,IGUIElementCallbackKeyPress
{
	ScreenHistoryView@Instance;
	IGUIElementOpt@Options;
	uint8 Type;
	
	TextBox(ScreenHistoryView&screenHistoryView,uint8 type)
	{
		@Instance=screenHistoryView;
		Type=type;
		switch(type)
		{
			case(0):
			@Instance.TextBoxName=this;
			break;
			case(2):
			@Instance.TextBoxHistory=this;
			break;
			case(1):
			@Instance.TextBoxDate=this;
			break;
			case(4):
			@Instance.TextBoxChaView=this;
			break;
			case(5):
			@Instance.TextBoxItems=this;
			break;
			case(3):
			@Instance.TextBoxPsyho=this;
			break;
			default:
			break;
		}
		
	}
	
	void OnInit()
	{
		@Options=GUI_GetElementOptions();
		CritterCl@choo=GetChosen();
		switch(Type)
		{
			case(0):
			@Instance.TextBoxNameOpt=Options;
			@HistoryName=Options;
			break;
			case(2):
			@Instance.TextBoxHistoryOpt=Options;
			@HistoryHistory=Options;
			break;
			case(1):
			@Instance.TextBoxDateOpt=Options;
			@HistoryDate=Options;
			break;
			case(4):
			@Instance.TextBoxChaViewOpt=Options;
			@HistoryChaView=Options;
			break;
			case(5):
			@Instance.TextBoxItemsOpt=Options;
			@HistoryItems=Options;
			break;
			case(3):
			@Instance.TextBoxPsyhoOpt=Options;
			@HistoryPsyho=Options;
			break;
			default:
			break;
		} 
		
	}  
	
	void OnKeyPress(uint8 key,uint8 letter)
	{
		string@text=Options.GetText();
		
		if(text.length()>0&&text[text.length()-1]==10)
		text.resize(text.length()-1);
		if((key==0x1C||key==0x9C)&&(Type==(2)||Type==(5)||Type==(3)))
		{
			text+="\n";
		}
		bool font_tag=false;
		if(Type==(2)||Type==(3)||Type==(4)||Type==(5))
		font_tag=true;
		Options.Text(text,(5),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),font_tag?(0x0040):(0x000C));
		
	}
	
}

void InitHistoryAllScreen()
{
	
	ScreenHistoryAll screenHistoryAll(0);
	GUI_CreateScreen((47),"fastpanel_skillbox.png")
	.CallbackHide(screenHistoryAll)
	.CallbackShow(screenHistoryAll)
	.CloseOnMiss(false)
	.CanMove(true)
	.AutoCursor(true,(0));
	
	ButtonListHistory buttonListHistoryDown(screenHistoryAll,true);
	GUI_AddScreenElement((47),"chosen_tab.png",150,20)
	.CallbackMouseClick(buttonListHistoryDown)
	.Text("down",(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008));
	
	ButtonListHistory buttonListHistoryUp(screenHistoryAll,false);
	GUI_AddScreenElement((47),"chosen_tab.png",150,40)
	.CallbackMouseClick(buttonListHistoryUp)
	.Text("up",(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008));
	
	uint16 axist=0;
	IGUIElementOpt@tempOpt;
	playerHistoryBtns.resize(0);
	for(uint16 i=0;i<(10);i++)
	{
		TextBoxButtons textBoxButtons;
		@tempOpt=GUI_AddScreenElement((47),"chosen_tab.png",0,80+axist)
		
		.CallbackMouseClick(textBoxButtons)
		.CallbackInit(textBoxButtons);
		
		playerHistoryBtns.insertLast(tempOpt);
		axist+=20;
	}
	
	BtnReserCurrent reset(screenHistoryAll);
	GUI_AddScreenElement((47),"chosen_tab.png",150,60)
	.CallbackMouseClick(reset)
	.Text("reset",(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008)); 
	
}

void InitHistoryViewScreen()
{
	Message("mwssage");
	ButtonShowHistory buttonShowHistory;
	GUI_AddScreenElement((5),"chosen_tab.png",150,40)
	.CallbackMouseClick(buttonShowHistory)
	.DownPic("chosen_tab.png");  
	
	ScreenHistoryView screenHistoryView;
	GUI_CreateScreen((46),"character_history_menu.png")
	.CallbackHide(screenHistoryView)
	.CallbackShow(screenHistoryView)
	.CloseOnMiss(false)
	.CanMove(true)
	.AutoCursor(true,(0));
	
	TextBox TextboxName(screenHistoryView,(0));
	GUI_AddScreenElement((46),"chosen_tab.png",10,20)
	
	.CallbackInit(TextboxName)
	.CallbackKeyPress(TextboxName)
	.TextInput(true,5,((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xFF)&0xFF)<<8)|((0)&0xFF)))));
	
	TextBox TextboxDate(screenHistoryView,(1));
	GUI_AddScreenElement((46),"chosen_tab.png",10,40)
	
	.CallbackInit(TextboxDate)
	.CallbackKeyPress(TextboxDate)
	.TextInput(true,10,((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xFF)&0xFF)<<8)|((0)&0xFF)))));            
	
	LoadButton loadButton1(2);
	GUI_AddScreenElement((46),"chosen_tab.png",160,40)
	.CallbackInit(loadButton1)
	.CallbackMouseClick(loadButton1)
	.Text("load",(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008)); 
	
	SaveHistoryBtn saveHistoryBtn(screenHistoryView);
	GUI_AddScreenElement((46),"usegetn.frm",650,400)
	.CallbackInit(saveHistoryBtn)
	.CallbackMouseClick(saveHistoryBtn)
	.DownPic("usegeth.frm")
	.Text("save",(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008));
	
	uint16 axist=265;
	screenHistoryView.FractionDropBtns.resize(5);
	screenHistoryView.FractionDropBtnsOpt.resize(5);
	
	for(uint8 i=1;i<=5;i++)
	{
		FractionDropBtn fractionDropBtn(screenHistoryView,i);
		GUI_AddScreenElement((46),"chosen_tab.png",220,axist)
		
		.CallbackInit(fractionDropBtn)
		.CallbackMouseClick(fractionDropBtn)
		.DownPic("chosen_tab.png");
		
		i==1?axist+=33:axist+=20;
	}
	
	screenHistoryView.StateBtn.resize(3);
	for(uint i=1;i<=3;i++)
	{
		StateBtns stateBtn(screenHistoryView,i);
		GUI_AddScreenElement((46),"town_view_gm.png",150,i*15)
		
		.CallbackInit(stateBtn)
		.CallbackMouseClick(stateBtn)
		.DownPic("town_view_gm_dn.png");             
		
	} 
	
	GUI_AddScreenElement((46),"textbox_history_up.png",358,80);
	GUI_AddScreenElement((46),"textbox_history_dn.png",358,376);
	GUI_AddScreenElement((46),"textbox_history_lt.png",358,80);
	GUI_AddScreenElement((46),"textbox_history_rt.png",685,80);
	
	TextBox TextboxHistory(screenHistoryView,(2));
	GUI_AddScreenElement((46),"textbox_history_text.png",362,85)
	
	.CallbackInit(TextboxHistory)
	.CallbackKeyPress(TextboxHistory)
	.TextInput(true,1024,((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xFF)&0xFF)<<8)|((0)&0xFF))))); 
	
	GUI_AddScreenElement((46),"textbox_history_up.png",10,80);
	GUI_AddScreenElement((46),"textbox_history_dn.png",10,160);
	GUI_AddScreenElement((46),"textbox_chaview_lt.png",10,80);
	GUI_AddScreenElement((46),"textbox_chaview_rt.png",340,80);
	
	TextBox TextboxChaView(screenHistoryView,(4));
	GUI_AddScreenElement((46),"textbox_chaview_text.png",18,84)
	
	.CallbackInit(TextboxChaView)
	.CallbackKeyPress(TextboxChaView)
	.TextInput(true,512,((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xFF)&0xFF)<<8)|((0)&0xFF))))); 
	
	GUI_AddScreenElement((46),"textbox_history_up.png",10,170);
	GUI_AddScreenElement((46),"textbox_history_dn.png",10,250);
	GUI_AddScreenElement((46),"textbox_chaview_lt.png",10,170);
	GUI_AddScreenElement((46),"textbox_chaview_rt.png",340,170);
	
	TextBox TextboxPsyho(screenHistoryView,(3));
	GUI_AddScreenElement((46),"textbox_chaview_text.png",18,174)
	
	.CallbackInit(TextboxPsyho)
	.CallbackKeyPress(TextboxPsyho)
	.TextInput(true,512,((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xFF)&0xFF)<<8)|((0)&0xFF))))); 
	
	GUI_AddScreenElement((46),"textbox_items_up.png",10,265);
	GUI_AddScreenElement((46),"textbox_items_dn.png",10,376);
	GUI_AddScreenElement((46),"textbox_items_lt.png",10,265);
	GUI_AddScreenElement((46),"textbox_items_rt.png",208,265);
	
	TextBox TextboxItems(screenHistoryView,(5));
	GUI_AddScreenElement((46),"textbox_items_text.png",18,269
	
	)
	
	.CallbackInit(TextboxItems)
	.CallbackKeyPress(TextboxItems)
	.TextInput(true,512,((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xFF)&0xFF)<<8)|((0)&0xFF)))));
	
}

void InitHistoryPlayerBtn()
{
	uint16 axist=0;
	IGUIElementOpt@tempOpt;
	
	for(uint16 i=0;i<__critterHistoryInfo.length();i++)
	{
		TextBoxButtons textBoxButtons;
		GUI_AddScreenElement((47),"chosen_tab.png",0,80+axist)
		.CallbackInit(textBoxButtons)
		.Text("id "+__critterHistoryInfo[i],(5),((uint((0xFF<<24)|(((0x8F)&0xFF)<<16)|(((0x6F)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0004)|(0x0008));
		
		axist+=20;
	}
}   

void LoadList(int length,int param1,int param2,string@param3,int[]@param4)
{
	if(__critterHistoryInfo.length()!=uint(length))
	{
		RunServerScriptUnsafe("general_unsafe@unsafe_history_load",1,0,0,"",null);
	}
}

void LoadListHistory(int p0,int p1,int p2,string@fileText,int[]@p4)
{
	
	string line="";
	uint8 ch;
	if(p0==0)
	{
		__critterHistoryInfo.resize(0);
		string@[]@test=split(fileText,"\n"); 
		
		for(uint16 i=0;i<test.length();i++)
		{
			
			__critterHistoryInfo.insertLast(test[i]);
			
		}
		Message("history list loaded");
		
	}
	else if(p0==1)
	{
		string@[]@test=split(fileText,"%");
		Message(""+test[0]);
		HistoryName.Text(test[0],(5),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x000C));
		HistoryDate.Text(test[1],(5),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x000C));
		HistoryHistory.Text(test[2],(5),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),((uint((0xFF<<24)|(((0)&0xFF)<<16)|(((0xC8)&0xFF)<<8)|((0)&0xFF)))),(0x0040));
	}
}
